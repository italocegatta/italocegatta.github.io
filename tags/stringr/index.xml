<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Stringr on Italo Cegatta</title>
    <link>/tags/stringr/</link>
    <description>Recent content in Stringr on Italo Cegatta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Sat, 14 Oct 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/stringr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>100 anos do posto meteorológico da ESALQ</title>
      <link>/100-anos-do-posto-meteorologico-da-esalq/</link>
      <pubDate>Sat, 14 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/100-anos-do-posto-meteorologico-da-esalq/</guid>
      <description>No dia 31 de dezembro de 2016 o Posto Meteorológico da ESALQ/USP completou 100 anos de funcionamento. Em “comemoração”&amp;quot; a este belo banco de dados, pretendo fazer alguns gráficos para analisar, sem muita pretensão, como o clima variou de lá pra cá.
No site do Posto podemos encontrar os dados nas escalas diária e mensal. Separei apenas os dados mensais para vermos aqui. Fiz algumas poucas adaptações no banco para poder pelo menos iniciar a análise.</description>
      <content:encoded>
        


&lt;p&gt;No dia 31 de dezembro de 2016 o Posto Meteorológico da &lt;a href=&#34;http://www.esalq.usp.br/departamentos/leb/posto/&#34;&gt;ESALQ/USP&lt;/a&gt; completou 100 anos de funcionamento. Em “comemoração”&amp;quot; a este belo banco de dados, pretendo fazer alguns gráficos para analisar, sem muita pretensão, como o clima variou de lá pra cá.&lt;/p&gt;
&lt;p&gt;No site do Posto podemos encontrar os dados nas escalas diária e mensal. Separei apenas os &lt;a href=&#34;http://www.esalq.usp.br/departamentos/leb/postocon.html&#34;&gt;dados mensais&lt;/a&gt; para vermos aqui. Fiz algumas poucas adaptações no banco para poder pelo menos iniciar a análise. Não considerei nenhuma consistência e preenchimento de falhas (tem bastante, o que é completamente compreensível!).&lt;/p&gt;
&lt;p&gt;Minha primeira movimentação é criar colunas para identificar o ano e as décadas, precisaremos delas mais para frente.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, RcppRoll, lubridate, stringr, ggplot2, ggridges)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clima &amp;lt;- read_csv2(&amp;quot;https://raw.githubusercontent.com/italocegatta/italocegatta.github.io_source/master/content/dados/posto_esalq.csv&amp;quot;) %&amp;gt;% 
  mutate(
    data = dmy(data),
    ano = year(data),
    decada_label = cut(ano, breaks = seq(1910, 2020, by = 10), dig.lab = 100, right = FALSE),
    decada = as.numeric(str_extract(decada_label, &amp;quot;[0-9]+&amp;quot;))
  )

clima&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,200 x 9
##    data        prec    ur t_max t_min t_med   ano decada_label decada
##    &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;         &amp;lt;dbl&amp;gt;
##  1 1917-01-01 296.     NA  28.1  18.3  23.2  1917 [1910,1920)    1910
##  2 1917-02-01 136.     NA  28.3  18.4  23.3  1917 [1910,1920)    1910
##  3 1917-03-01  58.9    NA  28.6  16.9  22.7  1917 [1910,1920)    1910
##  4 1917-04-01 116.     NA  26.7  13.9  20.3  1917 [1910,1920)    1910
##  5 1917-05-01  58.5    NA  22.2   8.6  15.4  1917 [1910,1920)    1910
##  6 1917-06-01  13      NA  23.3   6.3  14.8  1917 [1910,1920)    1910
##  7 1917-07-01  13.3    NA  24     7.7  15.9  1917 [1910,1920)    1910
##  8 1917-08-01   5.4    NA  26.4   7.5  16.9  1917 [1910,1920)    1910
##  9 1917-09-01  62.2    NA  27.8  12.2  20    1917 [1910,1920)    1910
## 10 1917-10-01  58.4    NA  27.6  13.8  20.7  1917 [1910,1920)    1910
## # ... with 1,190 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vou começar pela precipitação mensal. Para visualizar a distribuição dos dados a melhor abordagem é fazer um histograma. Vamos criar um histograma com intervalo de classe de 15 mm de chuva para cada mês do ano considerando os 100 anos de dados.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clima %&amp;gt;% 
  mutate(mes = month(data)) %&amp;gt;% 
  ggplot(aes(prec, rev(factor(mes)), height = ..density..)) +
  geom_density_ridges(stat = &amp;quot;binline&amp;quot;, binwidth = 15, fill = &amp;quot;grey20&amp;quot;, color = &amp;quot;grey90&amp;quot;) +
  labs(
    x = &amp;quot;Chuva mensal (mm)&amp;quot;,
    y = &amp;quot;Mês&amp;quot;
  ) +
  scale_fill_viridis_c() +
  scale_x_continuous(breaks = seq(0,700, 30)) +
  scale_y_discrete(labels = format(ISOdate(2000, 12:1, 1), &amp;quot;%b&amp;quot;)) +
  theme_bw(16) +
  theme(panel.grid.minor = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-3-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;E qual a década que mais choveu? Como variou a chuva anual ao longo desses 100 anos? Primeiro precisamos calcular quanto choveu em cada década. Em seguida vamos calcular quanto choveu em cada ano e juntar as duas informações. No gráfico abaixo, representei a média da década numa linha de tendência suavizada. Notem que a seca de 2014 Não foi a maior do século, houveram outros 4 anos mais secos desde de 1917.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prec_decada &amp;lt;- clima %&amp;gt;% 
  group_by(decada, ano) %&amp;gt;% 
  summarise(prec = sum(prec)) %&amp;gt;% 
  group_by(decada) %&amp;gt;% 
  summarise(prec = mean(prec)) 

clima %&amp;gt;% 
  group_by(decada, ano) %&amp;gt;% 
  summarise(prec = sum(prec)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  ggplot(aes(ano, prec)) +
    geom_line() +
    geom_point() +
    geom_smooth(
      data = prec_decada,
      aes(decada + 5, prec)
    ) +
    labs(
      x = &amp;quot;Ano&amp;quot;,
      y = &amp;quot;Precipitação anual (mm)&amp;quot;
    ) +
    scale_x_continuous(breaks = seq(1917, 2017, 10)) +
    theme_bw(16)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-4-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Passando para a temperatura média, podemos construir um painel com a densidade de probabilidade para valores que variam entre 12,5 a 27,7 (amplitude dos dados).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(clima, aes(t_med)) +
  geom_density(fill = &amp;quot;cadetblue&amp;quot;, alpha = 0.8) +
  facet_wrap(~ano) +
  labs(
    x = &amp;quot;Temperatura média mensal (°C)&amp;quot;,
    y = &amp;quot;Densidade&amp;quot;
  ) +
  theme_bw(9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-5-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Considerando as décadas, podemos fazer um gráfico um pouco mais simples para facilitar a visualização. Agora, cada década tem sua distribuição de probabilidade. Aparentemente, a calda da direita está se deslocando para maiores temperaturas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(clima, aes(t_med, factor(decada), fill = ..x..)) +
  geom_density_ridges_gradient(show.legend = FALSE, color = &amp;quot;white&amp;quot;) +
  labs(
    x = &amp;quot;Temperatura média mensal (°C)&amp;quot;,
    y = &amp;quot;Década&amp;quot;
  ) +
  scale_fill_viridis_c() +
  theme_bw(9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;E quanto a variação da temperatura nos meses do ano? Quanto podemos esperar de frio ou calor em cada mês?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clima %&amp;gt;% 
  mutate(mes = month(data)) %&amp;gt;% 
  ggplot(aes(t_med, rev(factor(mes)),  fill = ..x..)) +
  geom_density_ridges_gradient(color = &amp;quot;white&amp;quot;, show.legend = FALSE) +
  labs(
    x = &amp;quot;Temperatura média mensal (°C)&amp;quot;,
    y = &amp;quot;Mês&amp;quot;
  ) +
  scale_fill_viridis_c() +
  scale_x_continuous(breaks = seq(0,40, 4)) +
  scale_y_discrete(labels = format(ISOdate(2000, 12:1, 1), &amp;quot;%b&amp;quot;)) +
  theme_bw(16)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Podemos também visualizar a amplitude da temperatura máxima e mínima ao longo dos anos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(clima, aes(month(data))) +
  geom_ribbon(aes(ymax = t_max, ymin = t_min), alpha = 0.8) +
  facet_wrap(~ano) +
  labs(
    x = &amp;quot;Mês&amp;quot;,
    y = &amp;quot;Amplitude da temperatura mínima e máxima mensal (°C)&amp;quot;
  ) +
  scale_x_continuous(
    breaks = seq(1, 12, 2), 
    labels = format(ISOdate(2000, seq(1, 12, 2), 1), &amp;quot;%b&amp;quot;)
  ) +
  theme_bw(10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-8-1.svg&#34; width=&#34;1248&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Para finalizar, vamos calcular a média móvel de 30 anos para a temperatura média. Sem dúvida, dos anos 90 pra cá a temperatura média só vem subindo. A minha grande dúvida é: como será que a produção de alimentos e biomassa vai se comportar com essa mudança de clima? Será um grande desafio para a nossa geração, sem dúvida.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clima_normal &amp;lt;- clima %&amp;gt;%
  filter(!is.na(t_med)) %&amp;gt;% 
  group_by(ano = year(data)) %&amp;gt;%
  summarise(t_med = mean(t_med, na.rm = TRUE)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  mutate(t_med_movel = roll_mean(t_med, 30, align = &amp;quot;right&amp;quot;, fill = NA)) %&amp;gt;% 
  filter(!is.na(t_med_movel))

ggplot(clima_normal, aes(t_med_movel, ano)) +
  geom_path() +
  geom_point(shape = 21, color = &amp;quot;white&amp;quot;, fill = &amp;quot;black&amp;quot;, alpha = 0.8, size = 4) +
    labs(
    x = &amp;quot;Média móvel da temperatura média (°C)&amp;quot;,
    y = &amp;quot;Ano&amp;quot;
  ) +
  scale_y_reverse(breaks = seq(1940, 2017, by = 5)) +
  theme_bw(16)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-9-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessioninfo::session_info(c(&amp;quot;readr&amp;quot;, &amp;quot;dplyr&amp;quot;, &amp;quot;ggplot2&amp;quot;, &amp;quot;RcppRoll&amp;quot;, &amp;quot;lubridate&amp;quot;, &amp;quot;stringr&amp;quot;, &amp;quot;ggridges&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - Session info ----------------------------------------------------------
##  setting  value                       
##  version  R version 3.5.1 (2018-07-02)
##  os       Windows 10 x64              
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  ctype    Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2018-12-31                  
## 
## - Packages --------------------------------------------------------------
##  package      * version  date       lib source        
##  assertthat     0.2.0    2017-04-11 [1] CRAN (R 3.5.1)
##  BH             1.66.0-1 2018-02-13 [1] CRAN (R 3.5.0)
##  bindr          0.1.1    2018-03-13 [1] CRAN (R 3.5.1)
##  bindrcpp     * 0.2.2    2018-03-29 [1] CRAN (R 3.5.1)
##  cli            1.0.1    2018-09-25 [1] CRAN (R 3.5.1)
##  clipr          0.4.1    2018-06-23 [1] CRAN (R 3.5.1)
##  colorspace     1.3-2    2016-12-14 [1] CRAN (R 3.5.1)
##  crayon         1.3.4    2017-09-16 [1] CRAN (R 3.5.1)
##  digest         0.6.18   2018-10-10 [1] CRAN (R 3.5.1)
##  dplyr        * 0.7.8    2018-11-10 [1] CRAN (R 3.5.1)
##  fansi          0.4.0    2018-10-05 [1] CRAN (R 3.5.1)
##  ggplot2      * 3.1.0    2018-10-25 [1] CRAN (R 3.5.1)
##  ggridges     * 0.5.1    2018-09-27 [1] CRAN (R 3.5.2)
##  glue           1.3.0    2018-07-17 [1] CRAN (R 3.5.1)
##  gtable         0.2.0    2016-02-26 [1] CRAN (R 3.5.1)
##  hms            0.4.2    2018-03-10 [1] CRAN (R 3.5.1)
##  labeling       0.3      2014-08-23 [1] CRAN (R 3.5.0)
##  lattice        0.20-35  2017-03-25 [2] CRAN (R 3.5.1)
##  lazyeval       0.2.1    2017-10-29 [1] CRAN (R 3.5.1)
##  lubridate    * 1.7.4    2018-04-11 [1] CRAN (R 3.5.1)
##  magrittr       1.5      2014-11-22 [1] CRAN (R 3.5.1)
##  MASS           7.3-50   2018-04-30 [2] CRAN (R 3.5.1)
##  Matrix         1.2-14   2018-04-13 [2] CRAN (R 3.5.1)
##  mgcv           1.8-24   2018-06-23 [2] CRAN (R 3.5.1)
##  munsell        0.5.0    2018-06-12 [1] CRAN (R 3.5.1)
##  nlme           3.1-137  2018-04-07 [2] CRAN (R 3.5.1)
##  pillar         1.3.1    2018-12-15 [1] CRAN (R 3.5.2)
##  pkgconfig      2.0.2    2018-08-16 [1] CRAN (R 3.5.1)
##  plogr          0.2.0    2018-03-25 [1] CRAN (R 3.5.1)
##  plyr           1.8.4    2016-06-08 [1] CRAN (R 3.5.1)
##  purrr          0.2.5    2018-05-29 [1] CRAN (R 3.5.1)
##  R6             2.3.0    2018-10-04 [1] CRAN (R 3.5.1)
##  RColorBrewer   1.1-2    2014-12-07 [1] CRAN (R 3.5.0)
##  Rcpp           1.0.0    2018-11-07 [1] CRAN (R 3.5.1)
##  RcppRoll     * 0.3.0    2018-06-05 [1] CRAN (R 3.5.2)
##  readr        * 1.3.1    2018-12-21 [1] CRAN (R 3.5.2)
##  reshape2       1.4.3    2017-12-11 [1] CRAN (R 3.5.1)
##  rlang          0.3.0.1  2018-10-25 [1] CRAN (R 3.5.1)
##  scales         1.0.0    2018-08-09 [1] CRAN (R 3.5.1)
##  stringi        1.2.4    2018-07-20 [1] CRAN (R 3.5.1)
##  stringr      * 1.3.1    2018-05-10 [1] CRAN (R 3.5.1)
##  tibble         1.4.2    2018-01-22 [1] CRAN (R 3.5.1)
##  tidyselect     0.2.5    2018-10-11 [1] CRAN (R 3.5.1)
##  utf8           1.1.4    2018-05-24 [1] CRAN (R 3.5.1)
##  viridisLite    0.3.0    2018-02-01 [1] CRAN (R 3.5.1)
##  withr          2.1.2    2018-03-15 [1] CRAN (R 3.5.1)
## 
## [1] C:/Users/Italo/Documents/R/win-library/3.5
## [2] C:/Program Files/R/R-3.5.1/library&lt;/code&gt;&lt;/pre&gt;

      </content:encoded>
    </item>
    
    <item>
      <title>Como um cientista de dados pesquisa o carro que quer comprar?</title>
      <link>/como-um-cientista-de-dados-pesquisa-o-carro-que-quer-comprar/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/como-um-cientista-de-dados-pesquisa-o-carro-que-quer-comprar/</guid>
      <description>Estou naquela parte da vida em que se planeja comprar um carro. Como eu sou, acima de todos os sonhos, pão duro, decidir qual marca, modelo, versão e ano do veículo não vai ser fácil. Pensando nisso resolvi escrever um pacote no R para me ajudar a tomar esta decisão. O objetivo deste post é apresentar o pacote e as funções que auxiliam na coleta das informações da tabela FIPE.</description>
      <content:encoded>
        


&lt;p&gt;Estou naquela parte da vida em que se planeja comprar um carro. Como eu sou, acima de todos os sonhos, pão duro, decidir qual marca, modelo, versão e ano do veículo não vai ser fácil. Pensando nisso resolvi escrever um pacote no R para me ajudar a tomar esta decisão. O objetivo deste post é apresentar o pacote e as funções que auxiliam na coleta das informações da tabela &lt;a href=&#34;http://veiculos.fipe.org.br/&#34;&gt;FIPE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para aqueles que já passaram pela etapa de compra ou venda de um carro, provavelmente já consultaram a famosa tabela. Nas palavras do próprio site da FIPE:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Tabela Fipe expressa preços médios de veículos no mercado nacional, servindo apenas como um parâmetro para negociações ou avaliações. Os preços efetivamente praticados variam em função da região, conservação, cor, acessórios ou qualquer outro fator que possa influenciar as condições de oferta e procura por um veículo específico.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A motivação para este pacote foi exclusivamente pessoal e por isso a utilização das funções está bastante restrita. Por isso, se alguém quiser ajudar no desenvolvimento do pacote é só chegar e mandar um &lt;a href=&#34;https://github.com/italocegatta/fipe&#34;&gt;Pull Request&lt;/a&gt; no Github, contribuições serão muito bem-vindas.&lt;/p&gt;
&lt;p&gt;Primeiro vou mostrar as funções e o workflow idealizado para o pacote. Queremos saber, por enquanto, o preço atual de uma BMW X6 M ano 2015. O primeiro passo é definir o mês de referência que se deseja consultar o preço do veículo. A FIPE disponibiliza os valores consolidados desde janeiro de 2001.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(dplyr, purrr, stringr, tidyr, forcats, ggplot2)
pacman::p_load_gh(&amp;quot;italocegatta/fipe&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fipe_referencia()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 216 x 2
##    data_ref   cod_ref
##    &amp;lt;date&amp;gt;       &amp;lt;int&amp;gt;
##  1 2018-12-01     236
##  2 2018-11-01     235
##  3 2018-10-01     234
##  4 2018-09-01     233
##  5 2018-08-01     232
##  6 2018-07-01     231
##  7 2018-06-01     230
##  8 2018-05-01     229
##  9 2018-04-01     228
## 10 2018-03-01     227
## # ... with 206 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como o objetivo saber o preço atual do veículo, pegaremos o código &lt;code&gt;215&lt;/code&gt; (mês em que escrevo este post). Agora vamos procurar o código da marca BMW. Note que precisamos inserir o código do mês de referência para consultar a marca, essa é uma exigência do site da FIPE. Lembrando que o pacote não possui nenhum banco de dados armazenado, todas as informações são consultadas no site da tabela FIPE no ato da execução da função.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fipe_marca(cod_ref = 215)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 87 x 2
##    marca        cod_marca
##    &amp;lt;chr&amp;gt;            &amp;lt;int&amp;gt;
##  1 Acura                1
##  2 Agrale               2
##  3 Alfa Romeo           3
##  4 AM Gen               4
##  5 Asia Motors          5
##  6 ASTON MARTIN       189
##  7 Audi                 6
##  8 BMW                  7
##  9 BRM                  8
## 10 Buggy                9
## # ... with 77 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por sorte, o código &lt;code&gt;7&lt;/code&gt; da BMW aparece logo nos primeiros valores por ordem alfabética. Podemos seguir para o próximo passo e pegar o código do modelo que queremos. A consulta a baixo mostras que a BMW tem 221 modelos cadastrados na tabela FIPE. Como já definimos o modelo que queremos, vamos filtrar do dataframe para enxergar o código do modelo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(bmw &amp;lt;- fipe_modelo(cod_ref = 215, cod_marca = 7))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 221 x 2
##    modelo                                 cod_modelo
##    &amp;lt;chr&amp;gt;                                       &amp;lt;int&amp;gt;
##  1 116iA 1.6 TB 16V 136cv 5p                    6146
##  2 118iA 2.0 16V 136cv 3p                       5576
##  3 118iA 2.0 16V 136cv 5p                       4960
##  4 118iA Full 1.6 TB 16V 170cv 5p               6147
##  5 118iA/ Urban/Sport 1.6 TB 16V 170cv 5p       5923
##  6 120i 2.0 16V 150cv/ 156cv 5p                  152
##  7 120iA 2.0 16V 150cv/ 156cv 5p                 153
##  8 120iA 2.0 16V 156cv 3p                       4700
##  9 120iA Cabrio 2.0 16V 156cv 2p                4683
## 10 120iA Sport 2.0/ActiveFlex 16V Aut.          7178
## # ... with 211 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(bmw, str_detect(modelo, &amp;quot;X6 M&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   modelo                            cod_modelo
##   &amp;lt;chr&amp;gt;                                  &amp;lt;int&amp;gt;
## 1 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.       5189&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pronto, agora já sabemos que o código que a FIPE dá para o modelo X6 M é o &lt;code&gt;5189&lt;/code&gt;. Teríamos tudo pronto, se não fosse o padrão que a FIPE adota no campo&lt;code&gt;ano&lt;/code&gt;, onde o ano do modelo é acrescido de um código de combustível. A diferenciação para os “0 km” é feita na mesma coluna, utilizando a identificação 32000-*. Enfim, contornando as falhas estruturais no banco de dados deles, agora sabemos os códigos que identificam o ano do modelo, bem como o carro 0 km. Como eu optei por procurar o valor do carro 2015, iremos considerar o código &lt;code&gt;2015-1&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fipe_ano(cod_ref = 215, cod_marca = 7, cod_modelo = 5189)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 2
##   ano   cod_ano
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  
## 1 0 km  32000-1
## 2 2017  2017-1 
## 3 2016  2016-1 
## 4 2015  2015-1 
## 5 2014  2014-1 
## 6 2013  2013-1 
## 7 2012  2012-1 
## 8 2011  2011-1 
## 9 2010  2010-1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora sim vamos ao bendito preço da BMW!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fipe(cod_ref = 215, cod_marca = 7, cod_modelo = 5189, cod_ano = &amp;quot;2015-1&amp;quot;) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 1
## Variables: 7
## $ cod_fipe    &amp;lt;chr&amp;gt; &amp;quot;009144-8&amp;quot;
## $ ref         &amp;lt;date&amp;gt; 2017-07-01
## $ marca       &amp;lt;chr&amp;gt; &amp;quot;BMW&amp;quot;
## $ modelo      &amp;lt;chr&amp;gt; &amp;quot;X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.&amp;quot;
## $ ano         &amp;lt;chr&amp;gt; &amp;quot;2015&amp;quot;
## $ combustivel &amp;lt;chr&amp;gt; &amp;quot;Gasolina&amp;quot;
## $ valor       &amp;lt;dbl&amp;gt; 368603&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Achamos o preço do carro que eu queria. Apenas R$ 368 mil. Uma pechincha. Obviamente, saber quanto vale uma BMW X6 não faz diferença alguma no meu dia. Um abraço pra quem tem condições de comprar um carro desse sem precisar vender um rim.&lt;/p&gt;
&lt;p&gt;Agora que já conhecemos as funções e o fluxo para consultar o valor dos carros, vamos ampliar a consulta e justificar as horas que passamos aprendendo a programar. Já sabemos o preço do X6 M em julho/2017, mas e nos meses anteriores? Como será que foi a depreciação média do carro usado nos últimos meses? E os outros modelos X6, quanto será que estão valendo?&lt;/p&gt;
&lt;p&gt;Digamos que, agora, estas questões podem ser respondidas de forma bem rápida. Eu mostro.&lt;/p&gt;
&lt;p&gt;Vamos retomar os passos, mas agora no nível hard. Vou analisar o comportamento dos preços desde 2009. Para deixar a consulta mais rápida, serão considerados apenas 3 meses de referência por ano.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(base_marca &amp;lt;- fipe_referencia() %&amp;gt;%
  filter(data_ref %in% seq.Date(as.Date(&amp;quot;2009-01-01&amp;quot;), as.Date(&amp;quot;2017-07-01&amp;quot;), by = &amp;quot;4 months&amp;quot;)) %&amp;gt;%
  mutate(marca = map(cod_ref, fipe_marca)) %&amp;gt;%
  unnest() %&amp;gt;% 
  filter(marca == &amp;quot;BMW&amp;quot;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 26 x 4
##    data_ref   cod_ref marca cod_marca
##    &amp;lt;date&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;
##  1 2017-05-01     212 BMW           7
##  2 2017-01-01     202 BMW           7
##  3 2016-09-01     196 BMW           7
##  4 2016-05-01     191 BMW           7
##  5 2016-01-01     187 BMW           7
##  6 2015-09-01     183 BMW           7
##  7 2015-05-01     179 BMW           7
##  8 2015-01-01     174 BMW           7
##  9 2014-09-01     170 BMW           7
## 10 2014-05-01     166 BMW           7
## # ... with 16 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notem que agora temos um dataframe com códigos de referência entre janeiro/2008 a maio/2017. Seguindo a análise, precisamos encontrar os códigos dos modelos X6.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(base_modelo &amp;lt;- mutate(base_marca, modelo = map2(cod_ref, cod_marca, fipe_modelo)) %&amp;gt;%
  unnest() %&amp;gt;% 
  filter(str_detect(modelo, &amp;quot;X6&amp;quot;))
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 82 x 6
##    data_ref   cod_ref marca cod_marca modelo                     cod_modelo
##    &amp;lt;date&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                           &amp;lt;int&amp;gt;
##  1 2017-05-01     212 BMW           7 X6 M 4.4 4x4 V8 32V Bi-Tu~       5189
##  2 2017-05-01     212 BMW           7 X6 XDRIVE 35i 3.0 306cv B~       4745
##  3 2017-05-01     212 BMW           7 X6 XDRIVE 50i 4.4 407cv B~       4746
##  4 2017-05-01     212 BMW           7 X6 XDRIVE 50i M Sport 4.4~       7088
##  5 2017-01-01     202 BMW           7 X6 M 4.4 4x4 V8 32V Bi-Tu~       5189
##  6 2017-01-01     202 BMW           7 X6 XDRIVE 35i 3.0 306cv B~       4745
##  7 2017-01-01     202 BMW           7 X6 XDRIVE 50i 4.4 407cv B~       4746
##  8 2017-01-01     202 BMW           7 X6 XDRIVE 50i M Sport 4.4~       7088
##  9 2016-09-01     196 BMW           7 X6 M 4.4 4x4 V8 32V Bi-Tu~       5189
## 10 2016-09-01     196 BMW           7 X6 XDRIVE 35i 3.0 306cv B~       4745
## # ... with 72 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O próximo passo é pegar, para cada versão, os diferentes anos de fabricação do carro. A função vai consultar os anos de fabricação que a FIPE consolidou para cada uma das 82 linhas (combinação entre modelo e mês de referência).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(base_consulta &amp;lt;- mutate(base_modelo, ano = pmap(list(cod_ref, cod_marca, cod_modelo), fipe_ano)) %&amp;gt;%
  unnest()
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 480 x 8
##    data_ref   cod_ref marca cod_marca modelo       cod_modelo ano   cod_ano
##    &amp;lt;date&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  
##  1 2017-05-01     212 BMW           7 X6 M 4.4 4x~       5189 0 km  32000-1
##  2 2017-05-01     212 BMW           7 X6 M 4.4 4x~       5189 2017  2017-1 
##  3 2017-05-01     212 BMW           7 X6 M 4.4 4x~       5189 2016  2016-1 
##  4 2017-05-01     212 BMW           7 X6 M 4.4 4x~       5189 2015  2015-1 
##  5 2017-05-01     212 BMW           7 X6 M 4.4 4x~       5189 2014  2014-1 
##  6 2017-05-01     212 BMW           7 X6 M 4.4 4x~       5189 2013  2013-1 
##  7 2017-05-01     212 BMW           7 X6 M 4.4 4x~       5189 2012  2012-1 
##  8 2017-05-01     212 BMW           7 X6 M 4.4 4x~       5189 2011  2011-1 
##  9 2017-05-01     212 BMW           7 X6 M 4.4 4x~       5189 2010  2010-1 
## 10 2017-05-01     212 BMW           7 X6 XDRIVE 3~       4745 0 km  32000-1
## # ... with 470 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se na sua internet a função anterior demorou, prepara que a próxima vai demorar um tanto mais. Temos 480 requisições para fazer no site da FIPE em busca dos preços que queremos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(consulta &amp;lt;- mutate(
  base_consulta, 
  consulta = pmap(list(cod_ref, cod_marca, cod_modelo, cod_ano), fipe)
  )  %&amp;gt;%
  select(consulta) %&amp;gt;% 
  unnest() %&amp;gt;% 
  select(ref, modelo, ano, valor)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 480 x 4
##    ref        modelo                            ano    valor
##    &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;                             &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. 0 km  644550
##  2 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. 2017  520193
##  3 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. 2016  475803
##  4 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. 2015  365088
##  5 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. 2014  317505
##  6 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. 2013  291749
##  7 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. 2012  231191
##  8 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. 2011  204481
##  9 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. 2010  193629
## 10 2017-05-01 X6 XDRIVE 35i 3.0 306cv Bi-Turbo  0 km  415744
## # ... with 470 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depois de 4 passos, temos o banco de dados desejado. Imagina coletar estes dados, na mão, pelo site oficial!&lt;/p&gt;
&lt;p&gt;Bom agora o pacote está apresentado. Pretendo fazer outros posts com estudos de casos mais específicos, portanto vou deixar apenas um gráfico que resume a consulta que acabamos de fazer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;consulta %&amp;gt;%
  mutate(ano = fct_relevel(ano, &amp;quot;0 km&amp;quot;, after = Inf)) %&amp;gt;% 
  ggplot(aes(ref, valor, color =  ano, group = ano)) +
    geom_line(color = &amp;quot;grey30&amp;quot;) +
    geom_point(size = 3) +
    facet_wrap(~modelo) +
    labs(
      x = &amp;quot;Mês de refêrencia&amp;quot;,
      y = &amp;quot;Valor (R$)&amp;quot;,
      color = &amp;quot;Ano do \nmodelo&amp;quot;
    ) +
    scale_y_continuous(breaks = seq(0, 700000, 50000), labels = scales::dollar_format(prefix = NULL, big.mark = &amp;quot;.&amp;quot;)) +
    scale_x_date(date_breaks = &amp;quot;1 year&amp;quot;, date_labels = &amp;quot;%b/%y&amp;quot;) +
    scale_color_viridis_d() +
    theme_bw() +
    theme(legend.position = &amp;quot;top&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-07-29-como-um-cientista-de-dados-pesquisa-o-carro-que-quer-comprar_files/figure-html/plot_fipe-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessioninfo::session_info(c(&amp;quot;readr&amp;quot;, &amp;quot;dplyr&amp;quot;, &amp;quot;ggplot2&amp;quot;, &amp;quot;purrr&amp;quot;, &amp;quot;stringr&amp;quot;, &amp;quot;tidyr&amp;quot;, &amp;quot;forcats&amp;quot;, &amp;quot;fipe&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - Session info ----------------------------------------------------------
##  setting  value                       
##  version  R version 3.5.1 (2018-07-02)
##  os       Windows 10 x64              
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  ctype    Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2018-12-31                  
## 
## - Packages --------------------------------------------------------------
##  package      * version    date       lib
##  assertthat     0.2.0      2017-04-11 [1]
##  BH             1.66.0-1   2018-02-13 [1]
##  bindr          0.1.1      2018-03-13 [1]
##  bindrcpp     * 0.2.2      2018-03-29 [1]
##  cli            1.0.1      2018-09-25 [1]
##  clipr          0.4.1      2018-06-23 [1]
##  colorspace     1.3-2      2016-12-14 [1]
##  crayon         1.3.4      2017-09-16 [1]
##  curl           3.2        2018-03-28 [1]
##  digest         0.6.18     2018-10-10 [1]
##  dplyr        * 0.7.8      2018-11-10 [1]
##  fansi          0.4.0      2018-10-05 [1]
##  fipe         * 0.0.0.9000 2018-12-31 [1]
##  forcats      * 0.3.0      2018-02-19 [1]
##  ggplot2      * 3.1.0      2018-10-25 [1]
##  glue           1.3.0      2018-07-17 [1]
##  gtable         0.2.0      2016-02-26 [1]
##  hms            0.4.2      2018-03-10 [1]
##  httr           1.4.0      2018-12-11 [1]
##  jsonlite       1.6        2018-12-07 [1]
##  labeling       0.3        2014-08-23 [1]
##  lattice        0.20-35    2017-03-25 [2]
##  lazyeval       0.2.1      2017-10-29 [1]
##  lubridate      1.7.4      2018-04-11 [1]
##  magrittr       1.5        2014-11-22 [1]
##  MASS           7.3-50     2018-04-30 [2]
##  Matrix         1.2-14     2018-04-13 [2]
##  mgcv           1.8-24     2018-06-23 [2]
##  mime           0.6        2018-10-05 [1]
##  munsell        0.5.0      2018-06-12 [1]
##  nlme           3.1-137    2018-04-07 [2]
##  openssl        1.1        2018-11-15 [1]
##  pillar         1.3.1      2018-12-15 [1]
##  pkgconfig      2.0.2      2018-08-16 [1]
##  plogr          0.2.0      2018-03-25 [1]
##  plyr           1.8.4      2016-06-08 [1]
##  purrr        * 0.2.5      2018-05-29 [1]
##  R6             2.3.0      2018-10-04 [1]
##  RColorBrewer   1.1-2      2014-12-07 [1]
##  Rcpp           1.0.0      2018-11-07 [1]
##  readr          1.3.1      2018-12-21 [1]
##  reshape2       1.4.3      2017-12-11 [1]
##  rlang          0.3.0.1    2018-10-25 [1]
##  scales         1.0.0      2018-08-09 [1]
##  stringi        1.2.4      2018-07-20 [1]
##  stringr      * 1.3.1      2018-05-10 [1]
##  tibble         1.4.2      2018-01-22 [1]
##  tidyr        * 0.8.2      2018-10-28 [1]
##  tidyselect     0.2.5      2018-10-11 [1]
##  utf8           1.1.4      2018-05-24 [1]
##  viridisLite    0.3.0      2018-02-01 [1]
##  withr          2.1.2      2018-03-15 [1]
##  source                            
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.0)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  Github (italocegatta/fipe@0445ac6)
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.2)                    
##  CRAN (R 3.5.2)                    
##  CRAN (R 3.5.0)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.2)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.0)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.2)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
##  CRAN (R 3.5.1)                    
## 
## [1] C:/Users/Italo/Documents/R/win-library/3.5
## [2] C:/Program Files/R/R-3.5.1/library&lt;/code&gt;&lt;/pre&gt;

      </content:encoded>
    </item>
    
    <item>
      <title>Download automático de imagens MODIS</title>
      <link>/download-automatico-de-imagens-modis/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/download-automatico-de-imagens-modis/</guid>
      <description>O MODIS (MODerate resolution Imaging Spectroradiometer) faz parte de um programa da NASA para monitoramento da superfície terrestre. Os satélites Terra e Aqua fornecem informações muito interessantes para o setor agroflorestal e nos permite entender de maneira bastante eficaz a dinâmica do uso do solo e de crescimento das nossas culturas.
O MODOIS tem diversos produtos, mas neste post vamos tratar especificamente do produto MOD13Q1, que disponibiliza a cada 16 dias um raster de EVI e NDVI com resolução de 250 m.</description>
      <content:encoded>
        


&lt;p&gt;O MODIS (MODerate resolution Imaging Spectroradiometer) faz parte de um programa da NASA para monitoramento da superfície terrestre. Os satélites Terra e Aqua fornecem informações muito interessantes para o setor agroflorestal e nos permite entender de maneira bastante eficaz a dinâmica do uso do solo e de crescimento das nossas culturas.&lt;/p&gt;
&lt;p&gt;O MODOIS tem diversos &lt;a href=&#34;https://modis.gsfc.nasa.gov/data/&#34;&gt;produtos&lt;/a&gt;, mas neste post vamos tratar especificamente do produto &lt;a href=&#34;https://lpdaac.usgs.gov/dataset_discovery/modis/modis_products_table/mod13q1_v006&#34;&gt;MOD13Q1&lt;/a&gt;, que disponibiliza a cada 16 dias um raster de EVI e NDVI com resolução de 250 m. Bom, se você está acostumado com imagens de satélite/drone/vant com resolução submétrica, pode ser que no primeiro momento esta escala te assuste. Mas vale lembrar que é um serviço gratuito e de ótima qualidade.&lt;/p&gt;
&lt;p&gt;As cenas do MODIS ficam disponíveis em um &lt;a href=&#34;https://e4ftl01.cr.usgs.gov/&#34;&gt;ftp&lt;/a&gt; e navegando por lá podemos chegar na pasta do produto que nos &lt;a href=&#34;http://e4ftl01.cr.usgs.gov/MOLT/MOD13Q1.006&#34;&gt;interessa&lt;/a&gt;. Temos então imagens de satélite processadas, com correção atmosférica, sem deslocamento espacial e com regularidade. O satélite varre a terra a cada dois dias e as melhores visadas são utilizadas para compor o produto que é disponibilizado a cada 16 dias. Há casos (de baixa frequência) em que a nebulosidade é tanta que não é possível compor a informação do pixel dentro desta janela&lt;/p&gt;
&lt;p&gt;Nosso objetivo para este poste é fazer o download das cenas de forma automática, um web scraping. No R há diversos pacotes que nos auxiliam neste processo. A primeira etapa é acessar o ftp que contém as cenas e extrair as datas das cenas disponíveis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(dplyr, xml2, rvest, httr, stringr, methods)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# url do ftp que contém as cenas
path_root &amp;lt;- &amp;quot;http://e4ftl01.cr.usgs.gov/MOLT/MOD13Q1.006&amp;quot;

# carrega a raiz do ftp
page_root &amp;lt;- read_html(path_root)

# extrai os dias das cenas
scene_days &amp;lt;- page_root %&amp;gt;% 
 html_nodes(&amp;quot;a&amp;quot;) %&amp;gt;% 
  html_text(trim = T) %&amp;gt;%
  &amp;#39;[&amp;#39;(-c(1:7)) %&amp;gt;%
  str_replace_all(&amp;quot;\\/&amp;quot;, &amp;quot;&amp;quot;)

glimpse(scene_days)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  chr [1:433] &amp;quot;2000.02.18&amp;quot; &amp;quot;2000.03.05&amp;quot; &amp;quot;2000.03.21&amp;quot; &amp;quot;2000.04.06&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Muito bem, temos até a data da última atualização deste post 433 cenas disponíveis. O script abaixo cria a pasta com a data da cena e coloca lá os &lt;a href=&#34;https://modis-land.gsfc.nasa.gov/MODLAND_grid.html&#34;&gt;tiles&lt;/a&gt; de seu interesse. Como exemplo vamos pegar os tiles que cobrem os estados de São Paulo e Bahia. Note que é preciso ter um cadastro para autorizar o download dos arquivos. É simples e rápido de fazer acessando este &lt;a href=&#34;https://urs.earthdata.nasa.gov/users/new/&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# inicio do 1º loop - dias
for (i in seq_along(scene_days)) {
  # cria a pasta para receber os tiles
  if(!dir.exists(scene_days[i])) dir.create(scene_days[i])

  # ideintificador de iteração
  day &amp;lt;- scene_days[i]
  
  # carrega a pagina do dia da cena
  page_tiles &amp;lt;- read_html(paste(path_root, day, sep = &amp;quot;/&amp;quot;))
  
  # extrai os tiles de interesse
  path_tiles &amp;lt;- page_tiles %&amp;gt;% 
    html_nodes(&amp;quot;a&amp;quot;) %&amp;gt;% 
    html_text(trim = T) %&amp;gt;%
    &amp;#39;[&amp;#39;(str_detect(., &amp;quot;[hdf]$&amp;quot;)) %&amp;gt;% 
    &amp;#39;[&amp;#39;(str_detect(., &amp;quot;h13v11|h14v10&amp;quot;))
  
  # inicio do 2º loop - tiles
  for (j in seq_along(path_tiles)) {
    # url do tile
    path_tile &amp;lt;- paste(path_root, day, path_tiles[j], sep = &amp;quot;/&amp;quot;)

    # id do tile
    tile &amp;lt;- paste(day, path_tiles[j], sep = &amp;quot;/&amp;quot;)
    
    # download do arquivo
    if (!file.exists(tile)) {
      temp &amp;lt;- GET(path_tile, authenticate(&amp;quot;LOGIN&amp;quot;, &amp;quot;SENHA&amp;quot;))
      writeBin(content(temp, &amp;quot;raw&amp;quot;), tile)
      rm(temp)
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como tudo que está neste blog, este script foi escrito para resolver um problema específico e com certeza tem muito espaço para melhoria. Os próximos passos da análise, extração dos rasters e processamento da imagem serão abordados em posts separados. No futuro, caso exista uma demanda, pode ser que as funções sejam reunidas em um pacote específico sobre isso.&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessioninfo::session_info(c(&amp;quot;dplyr&amp;quot;, &amp;quot;xml2&amp;quot;, &amp;quot;rvest&amp;quot;, &amp;quot;httr&amp;quot;, &amp;quot;stringr&amp;quot;, &amp;quot;methods&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - Session info ----------------------------------------------------------
##  setting  value                       
##  version  R version 3.5.1 (2018-07-02)
##  os       Windows 10 x64              
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  ctype    Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2018-12-31                  
## 
## - Packages --------------------------------------------------------------
##  package    * version  date       lib source        
##  assertthat   0.2.0    2017-04-11 [1] CRAN (R 3.5.1)
##  BH           1.66.0-1 2018-02-13 [1] CRAN (R 3.5.0)
##  bindr        0.1.1    2018-03-13 [1] CRAN (R 3.5.1)
##  bindrcpp     0.2.2    2018-03-29 [1] CRAN (R 3.5.1)
##  cli          1.0.1    2018-09-25 [1] CRAN (R 3.5.1)
##  crayon       1.3.4    2017-09-16 [1] CRAN (R 3.5.1)
##  curl         3.2      2018-03-28 [1] CRAN (R 3.5.1)
##  dplyr      * 0.7.8    2018-11-10 [1] CRAN (R 3.5.1)
##  fansi        0.4.0    2018-10-05 [1] CRAN (R 3.5.1)
##  glue         1.3.0    2018-07-17 [1] CRAN (R 3.5.1)
##  httr       * 1.4.0    2018-12-11 [1] CRAN (R 3.5.2)
##  jsonlite     1.6      2018-12-07 [1] CRAN (R 3.5.2)
##  magrittr     1.5      2014-11-22 [1] CRAN (R 3.5.1)
##  mime         0.6      2018-10-05 [1] CRAN (R 3.5.1)
##  openssl      1.1      2018-11-15 [1] CRAN (R 3.5.1)
##  pillar       1.3.1    2018-12-15 [1] CRAN (R 3.5.2)
##  pkgconfig    2.0.2    2018-08-16 [1] CRAN (R 3.5.1)
##  plogr        0.2.0    2018-03-25 [1] CRAN (R 3.5.1)
##  purrr        0.2.5    2018-05-29 [1] CRAN (R 3.5.1)
##  R6           2.3.0    2018-10-04 [1] CRAN (R 3.5.1)
##  Rcpp         1.0.0    2018-11-07 [1] CRAN (R 3.5.1)
##  rlang        0.3.0.1  2018-10-25 [1] CRAN (R 3.5.1)
##  rvest      * 0.3.2    2016-06-17 [1] CRAN (R 3.5.1)
##  selectr      0.4-1    2018-04-06 [1] CRAN (R 3.5.1)
##  stringi      1.2.4    2018-07-20 [1] CRAN (R 3.5.1)
##  stringr    * 1.3.1    2018-05-10 [1] CRAN (R 3.5.1)
##  tibble       1.4.2    2018-01-22 [1] CRAN (R 3.5.1)
##  tidyselect   0.2.5    2018-10-11 [1] CRAN (R 3.5.1)
##  utf8         1.1.4    2018-05-24 [1] CRAN (R 3.5.1)
##  xml2       * 1.2.0    2018-01-24 [1] CRAN (R 3.5.1)
## 
## [1] C:/Users/Italo/Documents/R/win-library/3.5
## [2] C:/Program Files/R/R-3.5.1/library&lt;/code&gt;&lt;/pre&gt;

      </content:encoded>
    </item>
    
  </channel>
</rss>
