<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tidyr on Italo Cegatta</title>
    <link>/tags/tidyr/</link>
    <description>Recent content in Tidyr on Italo Cegatta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Tue, 01 Jan 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/tidyr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>O quão popular é o seu nome?</title>
      <link>/o-quao-popular-e-o-seu-nome/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/o-quao-popular-e-o-seu-nome/</guid>
      <description>No Censo 2010, o IBGE incorporou no levantamento a coleta de nomes (apenas o primeiro) e sobrenome (apenas o último). Para quem é curioso por coisas sem muita utilidade prática (e eu jogo forte nesse time!), vale a pena entrar no site https://censo2010.ibge.gov.br/nomes e conferir as estatísticas do nome de interesse.
O site é legal, mas eu queria ter os dados na mão para fazer as coisas do meu jeito.</description>
      <content:encoded>
        


&lt;p&gt;No Censo 2010, o IBGE incorporou no levantamento a coleta de nomes (apenas o primeiro) e sobrenome (apenas o último). Para quem é curioso por coisas sem muita utilidade prática (e eu jogo forte nesse time!), vale a pena entrar no site &lt;a href=&#34;https://censo2010.ibge.gov.br/nomes&#34; class=&#34;uri&#34;&gt;https://censo2010.ibge.gov.br/nomes&lt;/a&gt; e conferir as estatísticas do nome de interesse.&lt;/p&gt;
&lt;p&gt;O site é legal, mas eu queria ter os dados na mão para fazer as coisas do meu jeito. Então decidi escrever um pacote no R para acessar os dados da &lt;a href=&#34;https://servicodados.ibge.gov.br/api/docs/censos/nomes?versao=2&#34;&gt;API&lt;/a&gt; que o IBGE montou para esse banco.&lt;/p&gt;
&lt;p&gt;O pacote chama &lt;code&gt;brnome&lt;/code&gt; e está disponível no meu &lt;a href=&#34;https://github.com/italocegatta/brnome&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, purrr, tidyr, ggplot2, forcats, wordcloud)
pacman::p_load_gh(&amp;quot;italocegatta/brnome&amp;quot;)
pacman::p_load_gh(&amp;quot;italocegatta/brmap&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos começar com a função &lt;code&gt;brnome_freq()&lt;/code&gt; e entender a distribuição espacial e temporal (década de nascimento) do nome da minha queria e sapeca sobrinha, Eliza.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eliza_freq &amp;lt;- brnome_freq(nome = &amp;quot;eliza&amp;quot;)

eliza_freq&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 6
##   nome  sexo  localidade localidade_nome decada_nascimento frequencia
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                       &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;
## 1 ELIZA &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;                         1920       1749
## 2 ELIZA &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;                         1930       2651
## 3 ELIZA &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;                         1940       3098
## 4 ELIZA &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;                         1950       3800
## 5 ELIZA &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;                         1960       4023
## 6 ELIZA &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;                         1970       3805
## 7 ELIZA &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;                         1980       4697
## 8 ELIZA &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;                         1990       4340
## 9 ELIZA &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;                         2000       5595&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notem que as colunas &lt;code&gt;sexo&lt;/code&gt; e &lt;code&gt;localidade&lt;/code&gt; estão vazias pois não foram especificadas. Significa que foi considerada a busca de homens e mulheres para todo o Brasil.&lt;/p&gt;
&lt;p&gt;Será que tem algum homem batizado com o nome Eliza? Tem, e eu não sei se foi de propósito ou se foi um erro de coleta. Fica aí o questionamento hehehehe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;brnome_freq(nome = &amp;quot;eliza&amp;quot;, sexo = &amp;quot;m&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 6
##   nome  sexo  localidade localidade_nome decada_nascimento frequencia
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                       &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;
## 1 ELIZA M     &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;                         2000         34&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A pesquisa também pode ser feita para um determinado município ou estado. Neste caso, você precisa utilizar o código oficial do IBGE de localidades. Como exemplo, vamos ver os resultados para Cuiabá (&lt;code&gt;5103403&lt;/code&gt;) e Mato Grosso (&lt;code&gt;51&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;brnome_freq(nome = &amp;quot;eliza&amp;quot;, sexo  =&amp;quot;f&amp;quot;, localidade_cod = 5103403)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 6
##   nome  sexo  localidade localidade_nome decada_nascimento frequencia
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                       &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;
## 1 ELIZA F     5103403    Cuiabá                       1940         12
## 2 ELIZA F     5103403    Cuiabá                       1950         26
## 3 ELIZA F     5103403    Cuiabá                       1960         23
## 4 ELIZA F     5103403    Cuiabá                       1970         28
## 5 ELIZA F     5103403    Cuiabá                       1980         18
## 6 ELIZA F     5103403    Cuiabá                       1990         22
## 7 ELIZA F     5103403    Cuiabá                       2000         39&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;brnome_freq(nome = &amp;quot;eliza&amp;quot;, sexo  =&amp;quot;f&amp;quot;, localidade_cod = 51)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 6
##   nome  sexo  localidade localidade_nome decada_nascimento frequencia
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                       &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;
## 1 ELIZA F     51         Mato Grosso                  1920         16
## 2 ELIZA F     51         Mato Grosso                  1930         36
## 3 ELIZA F     51         Mato Grosso                  1940         52
## 4 ELIZA F     51         Mato Grosso                  1950         78
## 5 ELIZA F     51         Mato Grosso                  1960         91
## 6 ELIZA F     51         Mato Grosso                  1970        103
## 7 ELIZA F     51         Mato Grosso                  1980         93
## 8 ELIZA F     51         Mato Grosso                  1990         87
## 9 ELIZA F     51         Mato Grosso                  2000        152&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para consultar os códigos das localidades, o pacote disponibiliza um dataframe auxiliar &lt;code&gt;localidades&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;localidades&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5,597 x 3
##    localidade localidade_nome       tipo     
##    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;    
##  1 1100015    Alta Floresta D&amp;#39;Oeste Município
##  2 1100023    Ariquemes             Município
##  3 1100031    Cabixi                Município
##  4 1100049    Cacoal                Município
##  5 1100056    Cerejeiras            Município
##  6 1100064    Colorado do Oeste     Município
##  7 1100072    Corumbiara            Município
##  8 1100080    Costa Marques         Município
##  9 1100098    Espigão D&amp;#39;Oeste       Município
## 10 1100106    Guajará-Mirim         Município
## # ... with 5,587 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bom, consultas simples como está podem ser feitas diretamente pelo site do IBGE, mas podemos deixar um pouco mais complexo e pegar a frequência do nome Eliza para todos os estados do Brasil.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eliza_estado &amp;lt;- localidades %&amp;gt;% 
  filter(tipo == &amp;quot;Estado&amp;quot;) %&amp;gt;% 
  mutate(
    freq = map(
      localidade,
      ~brnome_freq(nome = &amp;quot;Eliza&amp;quot;, localidade_cod = .x) 
    )
  ) %&amp;gt;% 
  select(freq) %&amp;gt;% 
  unnest()

eliza_estado&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 218 x 6
##    nome  sexo  localidade localidade_nome decada_nascimento frequencia
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                       &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;
##  1 ELIZA &amp;lt;NA&amp;gt;  11         Rondônia                     1940         23
##  2 ELIZA &amp;lt;NA&amp;gt;  11         Rondônia                     1950         31
##  3 ELIZA &amp;lt;NA&amp;gt;  11         Rondônia                     1960         38
##  4 ELIZA &amp;lt;NA&amp;gt;  11         Rondônia                     1970         42
##  5 ELIZA &amp;lt;NA&amp;gt;  11         Rondônia                     1980         36
##  6 ELIZA &amp;lt;NA&amp;gt;  11         Rondônia                     1990         46
##  7 ELIZA &amp;lt;NA&amp;gt;  11         Rondônia                     2000         61
##  8 ELIZA &amp;lt;NA&amp;gt;  12         Acre                         1940         16
##  9 ELIZA &amp;lt;NA&amp;gt;  12         Acre                         1960         16
## 10 ELIZA &amp;lt;NA&amp;gt;  12         Acre                         1970         15
## # ... with 208 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Primeiro vamos analisar a frequência do nome pela década de nascimento somando os valores de todos os estados.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eliza_estado %&amp;gt;% 
  group_by(decada_nascimento) %&amp;gt;% 
  summarise(frequencia = sum(frequencia)) %&amp;gt;% 
  ggplot(aes(decada_nascimento, frequencia)) +
    geom_line(size = 2) +
    geom_point(shape = 21, color = &amp;quot;white&amp;quot;, fill =  &amp;quot;#80b1d3&amp;quot;, size = 7, stroke = 2) +
    labs(x = &amp;quot;Década de nascimento&amp;quot;, y = &amp;quot;Frequência do nome Eliza&amp;quot;) +
    scale_x_continuous(breaks = seq(1900, 2020, 10)) + 
    scale_y_continuous(limits = c(0, NA), labels = scales::unit_format(unit = &amp;quot;k&amp;quot;, scale = 1e-3)) + 
    theme_bw(16)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-01-o-quao-popular-e-o-seu-nome_files/figure-html/unnamed-chunk-8-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Também podemos ver a distribuição espacial pelos estados do Brasil.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eliza_estado %&amp;gt;% 
  left_join(brmap_estado, by = c(&amp;quot;localidade_nome&amp;quot; = &amp;quot;estado_nome&amp;quot;)) %&amp;gt;% 
  ggplot(aes(fill = frequencia)) +
    geom_sf(color = &amp;quot;white&amp;quot;) +
    scale_fill_distiller(palette = &amp;quot;Purples&amp;quot;, direction = 1) +
    labs(fill = &amp;quot;Frequência do nome Eliza&amp;quot;) +
    theme_bw(16) +
    theme(legend.position = &amp;quot;bottom&amp;quot;, legend.justification = &amp;quot;right&amp;quot;) +
    guides(fill = guide_colorbar(barwidth = 15, title.position = &amp;quot;top&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-01-o-quao-popular-e-o-seu-nome_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A segunda função presente no pacote acesso o rank dos nomes mais populares por sexo, década de nascimento e localidade.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rank_sexo &amp;lt;- bind_rows(brnome_rank(sexo = &amp;quot;f&amp;quot;), brnome_rank(sexo = &amp;quot;m&amp;quot;))

rank_sexo %&amp;gt;%
  ggplot(aes(decada_nascimento, rank, fill = frequencia, label = nome)) +
  geom_line(aes(group = nome), alpha = 0.5) +
  geom_label(color = &amp;quot;black&amp;quot;, size = 3) +
  facet_wrap(~sexo, labeller = labeller(sexo = c(&amp;quot;F&amp;quot; = &amp;quot;Feminino&amp;quot;, &amp;quot;M&amp;quot; = &amp;quot;Masculino&amp;quot;))) +
  labs(x = &amp;quot;Décade de nascimento&amp;quot;, y = &amp;quot;Ranking&amp;quot;, fill = &amp;quot;Frequência&amp;quot;) +
  scale_y_reverse(breaks = 1:20) +
  scale_fill_distiller(
    palette = &amp;quot;PuBuGn&amp;quot;, direction = 1, 
    labels = scales::unit_format(unit = &amp;quot;k&amp;quot;, scale = 1e-3)
  ) +
  theme_bw(18) +
  theme(legend.position = &amp;quot;bottom&amp;quot;, legend.justification = &amp;quot;right&amp;quot;) +
  guides(fill = guide_colorbar(barwidth = 20, title.position = &amp;quot;top&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-01-o-quao-popular-e-o-seu-nome_files/figure-html/unnamed-chunk-13-1.svg&#34; width=&#34;1536&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A consulta do rank também pode ser feita por localidade e década, como por exemplo os nomes mais comuns em Cuiabá na década de 1990.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;brnome_rank(sexo = &amp;quot;f&amp;quot;, localidade_cod = 5103403, decada_nascimento = 1990) %&amp;gt;% 
  select(nome, localidade_nome, frequencia, rank)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 20 x 4
##    nome      localidade_nome frequencia  rank
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;                &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1 ANA       Cuiabá                1591     1
##  2 JESSICA   Cuiabá                 932     2
##  3 CAMILA    Cuiabá                 677     3
##  4 BRUNA     Cuiabá                 667     4
##  5 AMANDA    Cuiabá                 645     5
##  6 ALINE     Cuiabá                 641     6
##  7 LETICIA   Cuiabá                 630     7
##  8 MARIA     Cuiabá                 625     8
##  9 FERNANDA  Cuiabá                 521     9
## 10 LUANA     Cuiabá                 491    10
## 11 LARISSA   Cuiabá                 432    11
## 12 MARIANA   Cuiabá                 409    12
## 13 JULIANA   Cuiabá                 381    13
## 14 GABRIELA  Cuiabá                 370    14
## 15 PATRICIA  Cuiabá                 366    15
## 16 NATALIA   Cuiabá                 354    16
## 17 VANESSA   Cuiabá                 341    17
## 18 RAFAELA   Cuiabá                 335    18
## 19 PAMELA    Cuiabá                 321    19
## 20 JAQUELINE Cuiabá                 310    20&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para finalizar, vamos fazer um gráfico com os nomes mais frequentes em forma de nuvem de palavras.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top_nomes &amp;lt;- rank_sexo %&amp;gt;% 
  group_by(nome) %&amp;gt;% 
  summarise(frequencia = sum(frequencia))

set.seed(1)
wordcloud(top_nomes$nome, top_nomes$frequencia, scale=c(8, 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-01-o-quao-popular-e-o-seu-nome_files/figure-html/unnamed-chunk-15-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessioninfo::session_info(c(&amp;quot;readr&amp;quot;, &amp;quot;dplyr&amp;quot;, &amp;quot;purrr&amp;quot;, &amp;quot;tidyr&amp;quot;, &amp;quot;ggplot2&amp;quot;, &amp;quot;forcats&amp;quot;, &amp;quot;brmap&amp;quot;, &amp;quot;brnome&amp;quot;, &amp;quot;wordcloud&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - Session info ----------------------------------------------------------
##  setting  value                       
##  version  R version 3.5.1 (2018-07-02)
##  os       Windows 10 x64              
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  ctype    Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2019-01-20                  
## 
## - Packages --------------------------------------------------------------
##  package      * version    date       lib
##  assertthat     0.2.0      2017-04-11 [1]
##  BH             1.66.0-1   2018-02-13 [1]
##  bindr          0.1.1      2018-03-13 [1]
##  bindrcpp     * 0.2.2      2018-03-29 [1]
##  brmap        * 0.0.5      2018-09-16 [1]
##  brnome       * 0.0.0.9000 2019-01-01 [1]
##  class          7.3-14     2015-08-30 [2]
##  classInt       0.3-1      2018-12-18 [1]
##  cli            1.0.1      2018-09-25 [1]
##  clipr          0.4.1      2018-06-23 [1]
##  colorspace     1.3-2      2016-12-14 [1]
##  crayon         1.3.4      2017-09-16 [1]
##  curl           3.2        2018-03-28 [1]
##  DBI            1.0.0      2018-05-02 [1]
##  digest         0.6.18     2018-10-10 [1]
##  dplyr        * 0.7.8      2018-11-10 [1]
##  e1071          1.7-0      2018-07-28 [1]
##  fansi          0.4.0      2018-10-05 [1]
##  forcats      * 0.3.0      2018-02-19 [1]
##  ggplot2      * 3.1.0      2018-10-25 [1]
##  glue           1.3.0      2018-07-17 [1]
##  gtable         0.2.0      2016-02-26 [1]
##  hms            0.4.2      2018-03-10 [1]
##  httr           1.4.0      2018-12-11 [1]
##  jsonlite       1.6        2018-12-07 [1]
##  labeling       0.3        2014-08-23 [1]
##  lattice        0.20-35    2017-03-25 [2]
##  lazyeval       0.2.1      2017-10-29 [1]
##  magrittr       1.5        2014-11-22 [1]
##  MASS           7.3-50     2018-04-30 [2]
##  Matrix         1.2-14     2018-04-13 [2]
##  mgcv           1.8-24     2018-06-23 [2]
##  mime           0.6        2018-10-05 [1]
##  munsell        0.5.0      2018-06-12 [1]
##  nlme           3.1-137    2018-04-07 [2]
##  openssl        1.1        2018-11-15 [1]
##  pillar         1.3.1      2018-12-15 [1]
##  pkgconfig      2.0.2      2018-08-16 [1]
##  plogr          0.2.0      2018-03-25 [1]
##  plyr           1.8.4      2016-06-08 [1]
##  purrr        * 0.2.5      2018-05-29 [1]
##  R6             2.3.0      2018-10-04 [1]
##  RColorBrewer * 1.1-2      2014-12-07 [1]
##  Rcpp           1.0.0      2018-11-07 [1]
##  readr        * 1.3.1      2018-12-21 [1]
##  reshape2       1.4.3      2017-12-11 [1]
##  rlang          0.3.0.1    2018-10-25 [1]
##  rvest          0.3.2      2016-06-17 [1]
##  scales         1.0.0      2018-08-09 [1]
##  selectr        0.4-1      2018-04-06 [1]
##  sf           * 0.7-2      2018-12-20 [1]
##  stringi        1.2.4      2018-07-20 [1]
##  stringr        1.3.1      2018-05-10 [1]
##  tibble         1.4.2      2018-01-22 [1]
##  tidyr        * 0.8.2      2018-10-28 [1]
##  tidyselect     0.2.5      2018-10-11 [1]
##  units          0.6-2      2018-12-05 [1]
##  utf8           1.1.4      2018-05-24 [1]
##  viridisLite    0.3.0      2018-02-01 [1]
##  withr          2.1.2      2018-03-15 [1]
##  wordcloud    * 2.6        2018-08-24 [1]
##  xml2           1.2.0      2018-01-24 [1]
##  source                             
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.0)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  Github (italocegatta/brmap@181fc73)
##  local                              
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.0)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.0)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
## 
## [1] C:/Users/Italo/Documents/R/win-library/3.5
## [2] C:/Program Files/R/R-3.5.1/library&lt;/code&gt;&lt;/pre&gt;

      </content:encoded>
    </item>
    
    <item>
      <title>Risco de incêndio pela Fórmula de Monte Alegre</title>
      <link>/risco-de-incendio-pela-formula-de-monte-alegre/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/risco-de-incendio-pela-formula-de-monte-alegre/</guid>
      <description>No setor florestal o fogo é uma questão recorrente e preocupante. Utilizar um índice de risco ou perigo de incêndio ajuda, no mínimo, no planejamento e no alerta para quem mora no entorno de maciços florestais como parques, hortos e plantios florestais.
A Fórmula de Monte Alegre (FMA) é um índice bastante simples, foi proposta em 1972 por Soares (1972) e utiliza apenas a umidade relativa do ar às 13h e a precipitação para calcular o risco de incêndio.</description>
      <content:encoded>
        


&lt;p&gt;No setor florestal o fogo é uma questão recorrente e preocupante. Utilizar um índice de risco ou perigo de incêndio ajuda, no mínimo, no planejamento e no alerta para quem mora no entorno de maciços florestais como parques, hortos e plantios florestais.&lt;/p&gt;
&lt;p&gt;A Fórmula de Monte Alegre (FMA) é um índice bastante simples, foi proposta em 1972 por &lt;span class=&#34;citation&#34;&gt;Soares (1972)&lt;/span&gt; e utiliza apenas a umidade relativa do ar às 13h e a precipitação para calcular o risco de incêndio. É um índice que possui 5 classes de risco e é cumulativo, portanto precisa ser calculado todos os dias.&lt;/p&gt;
&lt;p&gt;O objetivo deste post é implementar a FMA utilizando dados de 1988 à 2017 da estação meteorológica convencional da &lt;a href=&#34;http://www.esalq.usp.br/departamentos/leb/postocon.html&#34;&gt;ESALQ em Piracicaba&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, tidyr, forcats, lubridate, ggplot2, ggridges)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;base &amp;lt;- read_csv2(
  &amp;quot;https://raw.githubusercontent.com/italocegatta/italocegatta.github.io_source/master/content/dados/posto_esalq_dia.csv&amp;quot;,
  col_types = cols(.default = col_number(), data = col_character())
)

base&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10,961 x 3
##    data         ppt ur_med
##    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 01/01/1988   0       62
##  2 02/01/1988   0       65
##  3 03/01/1988   0       65
##  4 04/01/1988   0       69
##  5 05/01/1988  33.9     74
##  6 06/01/1988  66       90
##  7 07/01/1988   0       78
##  8 08/01/1988   0.5     88
##  9 09/01/1988  17.1     83
## 10 10/01/1988   7.8     83
## # ... with 10,951 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O primeiro passo é estimar a umidade relativa às 13h, uma vez que é este valor que a FMA considera para o cálculo. Utilizaremos a equação ajustada por &lt;span class=&#34;citation&#34;&gt;Alvares et al. (2014)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;base_fma &amp;lt;- base %&amp;gt;%
  mutate(
    data = dmy(data),
    ur13 = (8.77 * exp(0.024 * ur_med)) - 2.943
  ) %&amp;gt;% 
  select(data, ppt, ur13)

base_fma&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10,961 x 3
##    data         ppt  ur13
##    &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 1988-01-01   0    35.9
##  2 1988-01-02   0    38.8
##  3 1988-01-03   0    38.8
##  4 1988-01-04   0    43.0
##  5 1988-01-05  33.9  48.9
##  6 1988-01-06  66    73.1
##  7 1988-01-07   0    54.1
##  8 1988-01-08   0.5  69.5
##  9 1988-01-09  17.1  61.3
## 10 1988-01-10   7.8  61.3
## # ... with 10,951 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora vamos fazer uma breve análise dos dados brutos. Começando pela chuva, podemos calcular o número médio de dias de chuva forte e fraca neste período. Entre julho e agosto há poucas chuvas em Piracicaba e isso já sugere que neste período o risco de incêndio deve ser alto.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;base_fma %&amp;gt;%
  mutate(ano = year(data), mes = month(data)) %&amp;gt;% 
  mutate(
    d_1 = ifelse(ppt &amp;gt; 1 &amp;amp; ppt &amp;lt;= 5, 1, 0),
    d_5 = ifelse(ppt &amp;gt; 5 , 1, 0)
  ) %&amp;gt;% 
  group_by(ano, mes) %&amp;gt;% 
  summarise_at(vars(d_1, d_5), sum, na.rm = TRUE) %&amp;gt;% 
  group_by(mes) %&amp;gt;% 
  summarise_at(vars(d_1, d_5), ~round(mean(.))) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  rename(`&amp;lt;5` = d_1, `&amp;gt;5` = d_5) %&amp;gt;% 
  gather(nivel, d_chuva, `&amp;lt;5`:`&amp;gt;5`) %&amp;gt;% 
  mutate(
    d_chuva = ifelse(d_chuva == 0, NA, d_chuva),
    nivel = fct_relevel(nivel, &amp;quot;&amp;lt;5&amp;quot; , &amp;quot;&amp;gt;5&amp;quot;)
  ) %&amp;gt;% 
  ggplot(aes(mes, d_chuva, fill = nivel)) +
    geom_col(alpha = 0.8) +
    labs(
      x = &amp;quot;Mês do ano&amp;quot;,
      y = &amp;quot;Nº de dias de chuva (#)&amp;quot;,
      fill = NULL
    ) +
    scale_x_continuous(breaks = 1:12, labels = format(ISOdate(2000, 1:12, 1), &amp;quot;%b&amp;quot;)) +
    scale_y_continuous(breaks = seq(0, 30, 2), expand = expand_scale(mult = c(0.01, .1))) +
    scale_fill_manual(
      values = c(&amp;quot;#4292c6&amp;quot;, &amp;quot;#084594&amp;quot;),
      labels = c(&amp;quot;Chuva fraca (&amp;lt;5 mm)&amp;quot;,&amp;quot;Chuva forte (&amp;gt;5 mm)&amp;quot;)
    ) +
    theme_bw(16) +
    theme(legend.position = &amp;quot;top&amp;quot;, panel.grid.minor.x = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-07-15-risco-de-incendio-pela-formula-de-monte-alegre_files/figure-html/unnamed-chunk-4-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Olhando para a distribuição da umidade relativa em cada mês, podemos ver que em junho a mediana ainda está próximo dos 50% de umidade. E só em julho que os dias mais secos começam a ter mais frequência e essa tendência aumenta até setembro, depois retorna gradativamente até a mediana de 57% de umidade em dezembro.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;base_fma %&amp;gt;% 
  filter(!is.na(ur13)) %&amp;gt;% 
  mutate(mes = factor(month(data))) %&amp;gt;% 
  ggplot(aes(ur13, mes)) +
    geom_density_ridges(quantile_lines = TRUE, quantiles = 2, fill = &amp;quot;#016c59&amp;quot;, alpha = 0.9) +
    labs(x = &amp;quot;Umidade Relativa às 13h (%)&amp;quot;, y = &amp;quot;Mês do ano&amp;quot;) +
    scale_x_continuous(breaks = seq(10, 100, 10)) +
    scale_y_discrete(labels = format(ISOdate(2000, 1:12, 1), &amp;quot;%b&amp;quot;)) +
    theme_bw(16)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-07-15-risco-de-incendio-pela-formula-de-monte-alegre_files/figure-html/unnamed-chunk-5-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Sobre a Fórmula de Monte Alegre, o contexto que motivou seu desenvolvimento foi bastante trágico. Em 1963 um grande incêndio atingiu o estado do Paraná, com centenas de mortes e cerca de 2 milhões de hectares de florestas queimadas. Em 1972 o Professor Ronaldo Soares, da UFPR, defendeu sua tese de mestrado propondo a Fórmula de Monte Alegre com base em registros de incêndios florestais coletados a partir de 1965 na fazenda Monte Alegre (Klabin), em Telêmaco Borba-PR.&lt;/p&gt;
&lt;p&gt;A cálculo do índice é bastante simples, basta calcular o valor FMA do dia corrente e somar com o valor do dia anterior. O FMA é calculado através da seguinte expressão:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.sciweavers.org/tex2img.php?eq=FMA%20%3D%20%20%5Csum_%7Bi%3D1%7D%5En%20%20%5Cfrac%7B100%7D%7BURi_%7B13h%7D%7D%20&amp;bc=White&amp;fc=Black&amp;im=jpg&amp;fs=12&amp;ff=arev&amp;edit=0&#34; align=&#34;center&#34; border=&#34;0&#34; alt=&#34;FMA =  \sum_{i=1}^n  \frac{100}{URi_{13h}} &#34; width=&#34;139&#34; height=&#34;62&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Entretanto é preciso aplicar restrições ao valor FMA de acordo com a chuva do dia, seguindo estes parâmetros:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;14%&#34; /&gt;
&lt;col width=&#34;85%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Precipitação&lt;/th&gt;
&lt;th&gt;Restrição&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&amp;lt; 2,5&lt;/td&gt;
&lt;td&gt;Nenhuma&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;2,5 - 4,9&lt;/td&gt;
&lt;td&gt;0,7 * FMAi-1 + FMAi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;5,0 - 9,9&lt;/td&gt;
&lt;td&gt;0,4 * FMAi-1 + FMAi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;10,0 - 12,9&lt;/td&gt;
&lt;td&gt;0,2 * FMAi-1 + FMAi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&amp;gt; 12,9&lt;/td&gt;
&lt;td&gt;Interromper o cálculo anterior (FMAi = 0) e começar novo cálculo no dia seguinte&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;O resultado do índice é apresentado com frequência na forma de classes de risco, obedecendo estes limites:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;FMA&lt;/th&gt;
&lt;th&gt;Grau de perigo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;0 - 1,0&lt;/td&gt;
&lt;td&gt;Nulo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;1,1 - 3,0&lt;/td&gt;
&lt;td&gt;Pequeno&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;3,1 - 8,0&lt;/td&gt;
&lt;td&gt;Médio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;8,1 – 20,0&lt;/td&gt;
&lt;td&gt;Alto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&amp;gt; 20,0&lt;/td&gt;
&lt;td&gt;Muito alto&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Vamos agora declara as funções que vão calcular o FMA e atribuir as classes de risco aos nossos dados.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fma &amp;lt;- function(data, ur, ppt) {
  
  # testa se os dados estão ordenados
  if (any(data != sort(data))) {
    stop(&amp;quot;data precisa estar em ordem crescente&amp;quot;)
  }

  # cria o vetor de resultado  
  n &amp;lt;- length(ur)
  fma_vec &amp;lt;- rep(NA_real_, n)
  
  for (i in seq_len(n)) {
    
    # primeiro valor eh 0   
    if (i == 1) {
      fma_vec[i] &amp;lt;- 0
      next()
    }
    
    # se dia anterior nao tem informacao, valor eh 0
    if (is.na(ur[i - 1])) {
      fma_vec[i] &amp;lt;- 0
      next()
    }
    
    # aplica restricoes da chuva
    fma_vec[i] &amp;lt;- case_when(
      ppt[i] &amp;lt; 2.5 ~ (100 / ur[i]) + fma_vec[i - 1] * 1 ,
      ppt[i] &amp;gt;= 2.5 &amp;amp; ppt[i] &amp;lt; 5  ~ (100 / ur[i]) + fma_vec[i - 1] * 0.7,
      ppt[i] &amp;gt;= 5   &amp;amp; ppt[i] &amp;lt; 10 ~ (100 / ur[i]) + fma_vec[i - 1] * 0.4,
      ppt[i] &amp;gt;= 10  &amp;amp; ppt[i] &amp;lt; 13 ~ (100 / ur[i]) + fma_vec[i - 1] * 0.2,
      ppt[i] &amp;gt;= 13 ~ 0
    )
  }
  
  fma_vec
}

fma_classe &amp;lt;- function(fma, limites = c(1, 3, 8, 20)) {
  
  classe &amp;lt;- case_when(
    fma &amp;lt;= 1 ~ &amp;quot;Nulo&amp;quot;,
    fma &amp;gt; 1 &amp;amp; fma &amp;lt;= 3 ~&amp;quot;Pequeno&amp;quot;,
    fma &amp;gt; 3 &amp;amp; fma &amp;lt;= 8 ~ &amp;quot;Médio&amp;quot;,
    fma &amp;gt; 8 &amp;amp; fma &amp;lt;= 20 ~ &amp;quot;Alto&amp;quot;,
    fma &amp;gt; 20 ~ &amp;quot;Muito Alto&amp;quot;
  )
  
  factor(classe, levels = c(&amp;quot;Nulo&amp;quot;, &amp;quot;Pequeno&amp;quot;, &amp;quot;Médio&amp;quot;, &amp;quot;Alto&amp;quot;, &amp;quot;Muito Alto&amp;quot;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seguindo para o cálculo do índice, vamos criar um novo data frame com o valor FMA e as classes de riscos utilizando as funções que acabamos de criar.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_fma &amp;lt;- base_fma %&amp;gt;% 
  mutate(
    fma = fma(data, ur13, ppt),
    risco = fma_classe(fma)
  )

dados_fma&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10,961 x 5
##    data         ppt  ur13   fma risco  
##    &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  
##  1 1988-01-01   0    35.9  0    Nulo   
##  2 1988-01-02   0    38.8  2.58 Pequeno
##  3 1988-01-03   0    38.8  5.16 Médio  
##  4 1988-01-04   0    43.0  7.48 Médio  
##  5 1988-01-05  33.9  48.9  0    Nulo   
##  6 1988-01-06  66    73.1  0    Nulo   
##  7 1988-01-07   0    54.1  1.85 Pequeno
##  8 1988-01-08   0.5  69.5  3.29 Médio  
##  9 1988-01-09  17.1  61.3  0    Nulo   
## 10 1988-01-10   7.8  61.3  1.63 Pequeno
## # ... with 10,951 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A primeira abordagem que quero mostrar é a evolução do valor FMA ao longo do ano. Considerando o dia do ano ou dia juliano, podemos ver a evolução do valor FMA devido á ausência de chuvas fortes. O máximo dessa “corrida” de risco vai até próximo do dia 290, que corresponde ao meio de outubro.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_fma %&amp;gt;% 
  mutate(
    ano = year(data),
    dia_ano = yday(data)
  ) %&amp;gt;% 
  ggplot(aes(dia_ano, factor(ano), fill = fma)) +
  geom_tile() +
  labs(x = &amp;quot;Dia do ano&amp;quot;, y = &amp;quot;Ano&amp;quot;, fill = &amp;quot;FMA&amp;quot;) +
  scale_fill_viridis_c(option = &amp;quot;viridis&amp;quot;) +
  scale_x_continuous(breaks = seq(20, 360, 20), expand = c(0, 0)) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-07-15-risco-de-incendio-pela-formula-de-monte-alegre_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Calculando a frequência das classes dentro de cada ano, podemos ver que predomina o risco Muito Alto, seguido do risco Alto. O risco nulo, ocorre em aproximadamente 10% dos dias do ano.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_fma  %&amp;gt;% 
  filter(!is.na(risco)) %&amp;gt;% 
  group_by(ano = year(data), risco) %&amp;gt;% 
  tally() %&amp;gt;% 
  ggplot(aes(ano, n, fill = risco)) +
  geom_col(position = &amp;quot;fill&amp;quot;, alpha = 0.8) +
  labs(x = &amp;quot;Ano&amp;quot;, y = &amp;quot;Frequência&amp;quot;, fill = &amp;quot;Risco&amp;quot;) +
  scale_y_continuous(breaks = seq(0.1, 1, 0.1), labels = scales::percent) +
  scale_fill_brewer(palette = &amp;quot;Spectral&amp;quot;, direction = -1) +
  theme_bw(16)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-07-15-risco-de-incendio-pela-formula-de-monte-alegre_files/figure-html/unnamed-chunk-9-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Olhando para a frequência de risco dentro dos meses, fica claro o maior risco próximo do mês de agosto, como sugeriram os gráficos de frequências de chuva e umidade relativa.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_fma  %&amp;gt;% 
  filter(!is.na(risco)) %&amp;gt;% 
  group_by(mes = month(data), risco) %&amp;gt;% 
  tally() %&amp;gt;% 
  ggplot(aes(mes, n, fill = risco)) +
  geom_col(position = &amp;quot;fill&amp;quot;, alpha = 0.8) +
  labs(x = &amp;quot;Mês do ano&amp;quot;, y = &amp;quot;Frequência&amp;quot;, fill = &amp;quot;Risco&amp;quot;) +
  scale_x_continuous(breaks = 1:12, labels = format(ISOdate(2000, 1:12, 1), &amp;quot;%b&amp;quot;)) +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_brewer(palette = &amp;quot;Spectral&amp;quot;, direction = -1) +
  theme_bw(16)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-07-15-risco-de-incendio-pela-formula-de-monte-alegre_files/figure-html/unnamed-chunk-10-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Bom, de maneira geral os gráficos não mostraram muita coisa nova. Todo mundo sabe que nos meses mais secos do ano o risco de incêndio é maior. De fato, o índice apenas dá um respaldo quantitativo para o senso comum. Uma vez calculado o índice, é possível confrontar com dados reais de incêndios e propor novos valores para as classes de risco com o objetivo de deixá-lo mais assertivo para uma certa região.&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessioninfo::session_info(c(&amp;quot;readr&amp;quot;, &amp;quot;dplyr&amp;quot;, &amp;quot;ggplot2&amp;quot;, &amp;quot;tidyr&amp;quot;, &amp;quot;forcats&amp;quot;, &amp;quot;lubridate&amp;quot;, &amp;quot;ggridges&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - Session info ----------------------------------------------------------
##  setting  value                       
##  version  R version 3.5.1 (2018-07-02)
##  os       Windows 10 x64              
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  ctype    Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2019-01-01                  
## 
## - Packages --------------------------------------------------------------
##  package      * version  date       lib source        
##  assertthat     0.2.0    2017-04-11 [1] CRAN (R 3.5.1)
##  BH             1.66.0-1 2018-02-13 [1] CRAN (R 3.5.0)
##  bindr          0.1.1    2018-03-13 [1] CRAN (R 3.5.1)
##  bindrcpp     * 0.2.2    2018-03-29 [1] CRAN (R 3.5.1)
##  cli            1.0.1    2018-09-25 [1] CRAN (R 3.5.1)
##  clipr          0.4.1    2018-06-23 [1] CRAN (R 3.5.1)
##  colorspace     1.3-2    2016-12-14 [1] CRAN (R 3.5.1)
##  crayon         1.3.4    2017-09-16 [1] CRAN (R 3.5.1)
##  digest         0.6.18   2018-10-10 [1] CRAN (R 3.5.1)
##  dplyr        * 0.7.8    2018-11-10 [1] CRAN (R 3.5.1)
##  fansi          0.4.0    2018-10-05 [1] CRAN (R 3.5.1)
##  forcats      * 0.3.0    2018-02-19 [1] CRAN (R 3.5.1)
##  ggplot2      * 3.1.0    2018-10-25 [1] CRAN (R 3.5.1)
##  ggridges     * 0.5.1    2018-09-27 [1] CRAN (R 3.5.2)
##  glue           1.3.0    2018-07-17 [1] CRAN (R 3.5.1)
##  gtable         0.2.0    2016-02-26 [1] CRAN (R 3.5.1)
##  hms            0.4.2    2018-03-10 [1] CRAN (R 3.5.1)
##  labeling       0.3      2014-08-23 [1] CRAN (R 3.5.0)
##  lattice        0.20-35  2017-03-25 [2] CRAN (R 3.5.1)
##  lazyeval       0.2.1    2017-10-29 [1] CRAN (R 3.5.1)
##  lubridate    * 1.7.4    2018-04-11 [1] CRAN (R 3.5.1)
##  magrittr       1.5      2014-11-22 [1] CRAN (R 3.5.1)
##  MASS           7.3-50   2018-04-30 [2] CRAN (R 3.5.1)
##  Matrix         1.2-14   2018-04-13 [2] CRAN (R 3.5.1)
##  mgcv           1.8-24   2018-06-23 [2] CRAN (R 3.5.1)
##  munsell        0.5.0    2018-06-12 [1] CRAN (R 3.5.1)
##  nlme           3.1-137  2018-04-07 [2] CRAN (R 3.5.1)
##  pillar         1.3.1    2018-12-15 [1] CRAN (R 3.5.2)
##  pkgconfig      2.0.2    2018-08-16 [1] CRAN (R 3.5.1)
##  plogr          0.2.0    2018-03-25 [1] CRAN (R 3.5.1)
##  plyr           1.8.4    2016-06-08 [1] CRAN (R 3.5.1)
##  purrr          0.2.5    2018-05-29 [1] CRAN (R 3.5.1)
##  R6             2.3.0    2018-10-04 [1] CRAN (R 3.5.1)
##  RColorBrewer   1.1-2    2014-12-07 [1] CRAN (R 3.5.0)
##  Rcpp           1.0.0    2018-11-07 [1] CRAN (R 3.5.1)
##  readr        * 1.3.1    2018-12-21 [1] CRAN (R 3.5.2)
##  reshape2       1.4.3    2017-12-11 [1] CRAN (R 3.5.1)
##  rlang          0.3.0.1  2018-10-25 [1] CRAN (R 3.5.1)
##  scales         1.0.0    2018-08-09 [1] CRAN (R 3.5.1)
##  stringi        1.2.4    2018-07-20 [1] CRAN (R 3.5.1)
##  stringr        1.3.1    2018-05-10 [1] CRAN (R 3.5.1)
##  tibble         1.4.2    2018-01-22 [1] CRAN (R 3.5.1)
##  tidyr        * 0.8.2    2018-10-28 [1] CRAN (R 3.5.1)
##  tidyselect     0.2.5    2018-10-11 [1] CRAN (R 3.5.1)
##  utf8           1.1.4    2018-05-24 [1] CRAN (R 3.5.1)
##  viridisLite    0.3.0    2018-02-01 [1] CRAN (R 3.5.1)
##  withr          2.1.2    2018-03-15 [1] CRAN (R 3.5.1)
## 
## [1] C:/Users/Italo/Documents/R/win-library/3.5
## [2] C:/Program Files/R/R-3.5.1/library&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;referencias&#34; class=&#34;section level1 unnumbered&#34;&gt;
&lt;h1&gt;Referências&lt;/h1&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-alvares2014&#34;&gt;
&lt;p&gt;Alvares, Clayton Alcarde, Italo Ramos Cegatta, Lucas Augusto Abra Vieira, Rafaela de Freitas Pavani, Eduardo Moré Mattos, Paulo Cesar Sentelhas, José Luiz Stape, and Ronaldo Viana Soares. 2014. “Perigo de Incêndio Florestal: Aplicação Da Fórmula de Monte Alegre E Avaliação Do Histórico Para Piracicaba, Sp.” &lt;em&gt;Scientia Forestalis, Piracicaba&lt;/em&gt; 42 (104): 511–22.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-soares1972&#34;&gt;
&lt;p&gt;Soares, Ronaldo Viana. 1972. “Determinação de Um índice de Perigo de Incêndio Para a Região Centro Paranaense, Brasil. Turrialba, Costa Rica, Catie/Iica,. 72 P.” PhD thesis, Tese de Mestrado.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </content:encoded>
    </item>
    
    <item>
      <title>Qual Estado tem mais pau-rodado?</title>
      <link>/qual-estado-tem-mais-pau-rodado/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/qual-estado-tem-mais-pau-rodado/</guid>
      <description>Em Cuiabá, cidade que nasci e cresci, pau-rodado é um substantivo que define pessoas que nasceram em outro Estado mas moram em Cuiabá e ali construíram suas vidas. Aliás, Cuiabá sempre foi conhecida por ser uma Cidade super acolhedora e talvez por isso todos encaram o dito pau-rodado de uma forma engraçada e sem qualquer sentido pejorativo.
Muito bem, meu interesse com este post é analisar o comportamento dos fluxos migratórios entre Estados e assim encontrar os Estados que tem mais e menos pau-rodado em sua população residente.</description>
      <content:encoded>
        


&lt;p&gt;Em Cuiabá, cidade que nasci e cresci, &lt;em&gt;pau-rodado&lt;/em&gt; é um substantivo que define pessoas que nasceram em outro Estado mas moram em Cuiabá e ali construíram suas vidas. Aliás, Cuiabá sempre foi conhecida por ser uma Cidade super acolhedora e talvez por isso todos encaram o dito &lt;em&gt;pau-rodado&lt;/em&gt; de uma forma engraçada e sem qualquer sentido pejorativo.&lt;/p&gt;
&lt;p&gt;Muito bem, meu interesse com este post é analisar o comportamento dos fluxos migratórios entre Estados e assim encontrar os Estados que tem mais e menos &lt;em&gt;pau-rodado&lt;/em&gt; em sua população residente. Serei breve e não vamos abordar todos os Estados, mas se você tiver curiosidade poderá aproveitar o código para uma análise mais ampla.&lt;/p&gt;
&lt;p&gt;A motivação partiu de uma matéria do &lt;a href=&#34;https://www.nexojornal.com.br/grafico/2017/12/01/Fluxos-migrat%C3%B3rios-a-distribui%C3%A7%C3%A3o-da-popula%C3%A7%C3%A3o-de-cada-estado-pelo-pa%C3%ADs&#34;&gt;Nexo Jornal&lt;/a&gt; sobre este tema, porém ao nível estadual. Depois de algumas horas tentando decifrar o site do IBGE, cheguei na &lt;a href=&#34;https://sidra.ibge.gov.br/tabela/1852&#34;&gt;página&lt;/a&gt; que informa a população residente, por lugar de nascimento e unidade da federação.&lt;/p&gt;
&lt;p&gt;Então vamos começar a análise carregando os pacotes do R necessários para este post.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, tidyr, forcats, sf, geosphere, brmap, ggplot2, ggrepel, geofacet)
pacman::p_load_gh(&amp;quot;italocegatta/brmap&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Os dados originais estão disponíveis neste &lt;a href=&#34;https://sidra.ibge.gov.br/tabela/1852&#34;&gt;link&lt;/a&gt;, fiz apenas adequações porque o IBGE insiste em mesclar células nas tabelas disponibilizadas. Já nesta tabela você consegue olhar para o Estado que você mora e analisar quanto dos residentes nasceram em outros Estados. Mas o objetivo é enxergar isso de forma gráfica para ampliar a percepção dos dados.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;base &amp;lt;- read_csv2(&amp;quot;https://raw.githubusercontent.com/italocegatta/italocegatta.github.io_source/master/content/dados/pnad_2015_migracao.csv&amp;quot;)

base&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 27 x 28
##    Estado Rondônia  Acre Amazonas Roraima  Pará Amapá Tocantins Maranhão
##    &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 Rondô~    57.4   1.84     1.9     0.08  0.7  NA        0.02      1.02
##  2 Acre       1.54 87.9      3.89    0.02  0.17 NA        0.02      0.11
##  3 Amazo~     0.46  1.6     87.6     0.23  5.36  0.13     0.06      0.87
##  4 Rorai~     0.65  0.24     5.16   55.6   6.54  0.04     0.570    19.0 
##  5 Pará       0.03  0.02     0.49    0.02 84.6   0.19     1.07      6.89
##  6 Amapá      0.1   0.03     0.2     0.17 20.8  72.7      0.1       3.65
##  7 Tocan~     0.07  0.07     0.02   NA     2.83  0.02    69.5       8.58
##  8 Maran~     0.03  0.01     0.05   NA     1.11  0.01     0.32     92.4 
##  9 Piauí      0.04  0.02     0.04    0.05  0.28 NA        0.11      3.97
## 10 Ceará      0.03  0.04     0.11   NA     0.22  0.01     0.03      0.35
## # ... with 17 more rows, and 19 more variables: Piauí &amp;lt;dbl&amp;gt;, Ceará &amp;lt;dbl&amp;gt;,
## #   `Rio Grande do Norte` &amp;lt;dbl&amp;gt;, Paraíba &amp;lt;dbl&amp;gt;, Pernambuco &amp;lt;dbl&amp;gt;,
## #   Alagoas &amp;lt;dbl&amp;gt;, Sergipe &amp;lt;dbl&amp;gt;, Bahia &amp;lt;dbl&amp;gt;, `Minas Gerais` &amp;lt;dbl&amp;gt;,
## #   `Espírito Santo` &amp;lt;dbl&amp;gt;, `Rio de Janeiro` &amp;lt;dbl&amp;gt;, `São Paulo` &amp;lt;dbl&amp;gt;,
## #   Paraná &amp;lt;dbl&amp;gt;, `Santa Catarina` &amp;lt;dbl&amp;gt;, `Rio Grande do Sul` &amp;lt;dbl&amp;gt;, `Mato
## #   Grosso do Sul` &amp;lt;dbl&amp;gt;, `Mato Grosso` &amp;lt;dbl&amp;gt;, Goiás &amp;lt;dbl&amp;gt;, `Distrito
## #   Federal` &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dados longitudinais como estes ajudam humanos a enxergar os valores de forma mais fácil, mas do ponto de vista de processamento de dados, não dá pra fazer muita coisa com os dados assim. Vamos organizá-los seguindo a filosofia do &lt;a href=&#34;https://italocegatta.github.io/o-conceito-tidy-data&#34;&gt;Tidy data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A nova tabela nos informa a porcentagem da população residente (coluna ‘valor’) para cada Estado, subdividindo os valores por local de nascimento. E agora vai a primeira simplificação: foram selecionados apenas os 6 Estados de nascimento mais representativos para cada Estado de residência.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- base %&amp;gt;% 
  gather(reside, valor, -Estado) %&amp;gt;%
  select(nasce = Estado, reside, valor) %&amp;gt;% 
  replace_na(list(valor = 0)) %&amp;gt;% 
  group_by(nasce) %&amp;gt;% 
  filter(row_number(-valor) &amp;lt;= 6) %&amp;gt;% 
  ungroup()

df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 162 x 3
##    nasce    reside   valor
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 Rondônia Rondônia 57.4 
##  2 Acre     Rondônia  1.54
##  3 Amazonas Rondônia  0.46
##  4 Acre     Acre     87.9 
##  5 Amazonas Acre      1.6 
##  6 Acre     Amazonas  3.89
##  7 Amazonas Amazonas 87.6 
##  8 Roraima  Amazonas  5.16
##  9 Roraima  Roraima  55.6 
## 10 Amazonas Pará      5.36
## # ... with 152 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos nos preparar para a segunda simplificação: selecionar os extremos em termos de população que nasceu e reside no mesmo Estado. Então, RS, CE e PE são os Estados que mais tem moradores nascidos dentro do próprio Estado, enquanto RO, RR e DF tem uma parcela maior de residentes nascidos em outros Estados.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;estados_interesse &amp;lt;- df %&amp;gt;%
  filter(reside == nasce) %&amp;gt;%
  filter(row_number(-valor) &amp;lt;= 3 | row_number(valor) &amp;lt;= 3) %&amp;gt;% 
  arrange(-valor) %&amp;gt;%
  pull(nasce)

estados_interesse&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Rio Grande do Sul&amp;quot; &amp;quot;Ceará&amp;quot;             &amp;quot;Pernambuco&amp;quot;       
## [4] &amp;quot;Rondônia&amp;quot;          &amp;quot;Roraima&amp;quot;           &amp;quot;Distrito Federal&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preparando para o mapa, vamos pegar as coordenadas dos centroides de cada Estado.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;estado_cent &amp;lt;- brmap_estado %&amp;gt;% 
  st_centroid() %&amp;gt;% 
  cbind(., st_coordinates(.)) %&amp;gt;% 
  st_set_geometry(NULL) %&amp;gt;% 
  select(estado = estado_nome, lon = X, lat = Y)

estado_cent&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 estado       lon        lat
## 1             Rondônia -62.84197 -10.913218
## 2                 Acre -70.47328  -9.212886
## 3             Amazonas -64.65314  -4.154177
## 4              Roraima -61.39928   2.084226
## 5                 Pará -53.06424  -3.974791
## 6                Amapá -51.95592   1.443319
## 7            Tocantins -48.32923 -10.150316
## 8             Maranhão -45.27922  -5.061285
## 9                Piauí -42.96862  -7.387530
## 10               Ceará -39.61569  -5.093345
## 11 Rio Grande do Norte -36.67348  -5.839677
## 12             Paraíba -36.83262  -7.121055
## 13          Pernambuco -37.99843  -8.326066
## 14             Alagoas -36.62494  -9.513863
## 15             Sergipe -37.44390 -10.584475
## 16               Bahia -41.72094 -12.475023
## 17        Minas Gerais -44.67343 -18.456187
## 18      Espírito Santo -40.67106 -19.575176
## 19      Rio de Janeiro -42.65238 -22.188741
## 20           São Paulo -48.73391 -22.263472
## 21              Paraná -51.61668 -24.635899
## 22      Santa Catarina -50.47480 -27.247356
## 23   Rio Grande do Sul -53.32029 -29.705681
## 24  Mato Grosso do Sul -54.84563 -20.327310
## 25         Mato Grosso -55.91215 -12.948967
## 26               Goiás -49.62361 -16.042227
## 27    Distrito Federal -47.79736 -15.780692&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E agora, o pulo do gato. Vamos criar as linhas que ligam os Estados entre si e em seguida adicionar à tabela que informa as relações de fluxo. Portanto, para cada relação entre Estado de nascimento/residência temos uma feição de linha e o valor que representa a porcentagem de residentes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;coord &amp;lt;- df %&amp;gt;% 
  left_join(estado_cent, by = c(&amp;quot;nasce&amp;quot; = &amp;quot;estado&amp;quot;)) %&amp;gt;% 
  left_join(estado_cent, by = c(&amp;quot;reside&amp;quot; = &amp;quot;estado&amp;quot;)) %&amp;gt;%
  filter(nasce %in% estados_interesse)

linhas &amp;lt;- gcIntermediate(
  select(coord, lon.x, lat.x), 
  select(coord, lon.y, lat.y), 
  sp = TRUE, addStartEnd = TRUE
  ) %&amp;gt;% 
  st_as_sf()

fluxo_linha &amp;lt;- coord %&amp;gt;% 
  select(nasce, reside, valor) %&amp;gt;% 
  bind_cols(linhas) %&amp;gt;% 
  left_join(estado_cent, by = c(&amp;quot;reside&amp;quot; = &amp;quot;estado&amp;quot;)) %&amp;gt;% 
  mutate(nasce = fct_relevel(nasce, estados_interesse)) %&amp;gt;% 
  st_as_sf()

fluxo_linha&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 36 features and 5 fields
## geometry type:  LINESTRING
## dimension:      XY
## bbox:           xmin: -64.65314 ymin: -29.70568 xmax: -36.62494 ymax: 2.084226
## epsg (SRID):    4326
## proj4string:    +proj=longlat +ellps=WGS84 +no_defs
## # A tibble: 36 x 6
##    nasce    reside  valor   lon    lat                             geometry
##    &amp;lt;fct&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;                    &amp;lt;LINESTRING [Â°]&amp;gt;
##  1 Rondônia Rondôn~ 57.4  -62.8 -10.9  (-62.84197 -10.91322, -62.84197 -10~
##  2 Roraima  Amazon~  5.16 -64.7  -4.15 (-61.39928 2.084226, -61.46308 1.96~
##  3 Roraima  Roraima 55.6  -61.4   2.08 (-61.39928 2.084226, -61.39928 2.08~
##  4 Roraima  Pará     6.54 -53.1  -3.97 (-61.39928 2.084226, -61.23584 1.96~
##  5 Roraima  Maranh~ 19.0  -45.3  -5.06 (-61.39928 2.084226, -61.08344 1.94~
##  6 Distrit~ Maranh~  4.42 -45.3  -5.06 (-47.79736 -15.78069, -47.74601 -15~
##  7 Ceará    Piauí    0.39 -43.0  -7.39 (-39.61569 -5.093345, -39.68117 -5.~
##  8 Distrit~ Piauí    5.08 -43.0  -7.39 (-47.79736 -15.78069, -47.69952 -15~
##  9 Roraima  Ceará    2.76 -39.6  -5.09 (-61.39928 2.084226, -60.97249 1.94~
## 10 Ceará    Ceará   95.8  -39.6  -5.09 (-39.61569 -5.093345, -39.61569 -5.~
## # ... with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para deixar o gráfico um pouco mais bonito, vamos dar cor ao valor que estamos estudando. Mas agora a feição será o polígono que representa o Estado de residentes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fluxo_poligono &amp;lt;- brmap_estado %&amp;gt;% 
  left_join(df, by =  c(&amp;quot;estado_nome&amp;quot; = &amp;quot;reside&amp;quot;)) %&amp;gt;% 
  rename(reside = estado_nome) %&amp;gt;% 
  filter(nasce %in% estados_interesse) %&amp;gt;% 
  mutate(nasce = fct_relevel(nasce, estados_interesse)) %&amp;gt;% 
  select(nasce, reside, valor)

fluxo_poligono&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 36 features and 3 fields
## geometry type:  POLYGON
## dimension:      XY
## bbox:           xmin: -73.80156 ymin: -33.75118 xmax: -34.79288 ymax: 5.271841
## epsg (SRID):    4674
## proj4string:    +proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs
## # A tibble: 36 x 4
##    nasce       reside  valor                                       geometry
##    &amp;lt;fct&amp;gt;       &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt;                                 &amp;lt;POLYGON [Â°]&amp;gt;
##  1 Rondônia    Rondôn~ 57.4  ((-62.86662 -7.975868, -62.86017 -7.982323, -~
##  2 Roraima     Amazon~  5.16 ((-67.32609 2.029714, -67.31682 2.00125, -67.~
##  3 Roraima     Roraima 55.6  ((-60.20051 5.264343, -60.19828 5.260453, -60~
##  4 Roraima     Pará     6.54 ((-54.95431 2.583692, -54.93542 2.518585, -54~
##  5 Roraima     Maranh~ 19.0  ((-45.84073 -1.045485, -45.84099 -1.046971, -~
##  6 Distrito F~ Maranh~  4.42 ((-45.84073 -1.045485, -45.84099 -1.046971, -~
##  7 Ceará       Piauí    0.39 ((-41.74605 -2.803497, -41.74241 -2.805697, -~
##  8 Distrito F~ Piauí    5.08 ((-41.74605 -2.803497, -41.74241 -2.805697, -~
##  9 Roraima     Ceará    2.76 ((-40.49717 -2.784509, -40.49173 -2.788106, -~
## 10 Ceará       Ceará   95.8  ((-40.49717 -2.784509, -40.49173 -2.788106, -~
## # ... with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pronto, já temos todos os dados que fazer o gráfico de interesse. Lembrando que optamos por dar destaque a 6 Estados e para cada um deles, os 6 Estados de nascimento que mais representam a população de residentes. Sim, é um tanto complexo. Eu fiquei algumas horas para poder criar o código e entender o que estava processando.&lt;/p&gt;
&lt;p&gt;Como exemplo vamos interpretar as informações de Roraima: do total de residentes, 55.6% nasceram no próprio Estado de Roraima; 5.2%, 6.5% e 19% nasceram no Amazonas, Pará e Maranhão, respectivamente.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_sf(data = brmap_estado, color = &amp;quot;white&amp;quot;, fill = &amp;quot;grey80&amp;quot;, size = 0.3) +
  geom_sf(data = fluxo_poligono, aes(fill = valor), color = &amp;quot;white&amp;quot;, size = 0.3) +
  geom_sf(data = fluxo_linha, color = &amp;quot;cyan&amp;quot;, size = 0.3) +
  geom_label_repel(
    data = fluxo_linha,
    aes(lon, lat, label = round(valor, 1)),
    size = 3, segment.colour = NA
  ) +
  facet_wrap(~nasce) +
  labs(
    title = &amp;quot;População residente (% do total geral)&amp;quot;,
    subtitle = &amp;quot;PNAD/IBGE, 2015&amp;quot;,
    x = NULL, y = NULL
  ) +
  scale_fill_viridis_c(guide = FALSE) +
  coord_sf(datum = NA) +
  theme_void(16)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-03-24-qual-estado-tem-mais-pau-rodado_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Pontos interessantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rondônia e Roraima retém uma proporção parecida da população dentro do próprio Estado, entretanto o pessoal que mora em Rondônia veio do Sul e Sudeste; ao passo que os moradores de Roraima vêm do AM, PA e MA.&lt;/li&gt;
&lt;li&gt;O Distrito Federal não me surpreendeu, grande parte de pessoas nasceram em GO, MG e BA.&lt;/li&gt;
&lt;li&gt;Um número expressivo de pessoas que nasceram em São Paulo e hoje moram no CE e PE… parece que o jogo virou, não é mesmo?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessioninfo::session_info(c(&amp;quot;readr&amp;quot;, &amp;quot;dplyr&amp;quot;, &amp;quot;ggplot2&amp;quot;, &amp;quot;tidyr&amp;quot;, &amp;quot;forcats&amp;quot;, &amp;quot;sf&amp;quot;, &amp;quot;geosphere&amp;quot;, &amp;quot;ggrepel&amp;quot;, &amp;quot;geofacet&amp;quot;, &amp;quot;brmap&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - Session info ----------------------------------------------------------
##  setting  value                       
##  version  R version 3.5.1 (2018-07-02)
##  os       Windows 10 x64              
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  ctype    Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2019-01-01                  
## 
## - Packages --------------------------------------------------------------
##  package       * version     date       lib
##  assertthat      0.2.0       2017-04-11 [1]
##  BH              1.66.0-1    2018-02-13 [1]
##  bindr           0.1.1       2018-03-13 [1]
##  bindrcpp      * 0.2.2       2018-03-29 [1]
##  brmap         * 0.0.5       2018-09-16 [1]
##  class           7.3-14      2015-08-30 [2]
##  classInt        0.3-1       2018-12-18 [1]
##  cli             1.0.1       2018-09-25 [1]
##  clipr           0.4.1       2018-06-23 [1]
##  colorspace      1.3-2       2016-12-14 [1]
##  crayon          1.3.4       2017-09-16 [1]
##  curl            3.2         2018-03-28 [1]
##  DBI             1.0.0       2018-05-02 [1]
##  digest          0.6.18      2018-10-10 [1]
##  dplyr         * 0.7.8       2018-11-10 [1]
##  e1071           1.7-0       2018-07-28 [1]
##  fansi           0.4.0       2018-10-05 [1]
##  forcats       * 0.3.0       2018-02-19 [1]
##  geofacet      * 0.1.9       2018-03-29 [1]
##  geogrid         0.1.1       2018-12-11 [1]
##  geosphere     * 1.5-7       2017-11-05 [1]
##  ggplot2       * 3.1.0       2018-10-25 [1]
##  ggrepel       * 0.8.0       2018-05-09 [1]
##  glue            1.3.0       2018-07-17 [1]
##  gridExtra       2.3         2017-09-09 [1]
##  gtable          0.2.0       2016-02-26 [1]
##  hms             0.4.2       2018-03-10 [1]
##  httr            1.4.0       2018-12-11 [1]
##  imguR           1.0.3       2016-03-29 [1]
##  jpeg            0.1-8       2014-01-23 [1]
##  jsonlite        1.6         2018-12-07 [1]
##  labeling        0.3         2014-08-23 [1]
##  lattice         0.20-35     2017-03-25 [2]
##  lazyeval        0.2.1       2017-10-29 [1]
##  magrittr        1.5         2014-11-22 [1]
##  MASS            7.3-50      2018-04-30 [2]
##  Matrix          1.2-14      2018-04-13 [2]
##  mgcv            1.8-24      2018-06-23 [2]
##  mime            0.6         2018-10-05 [1]
##  munsell         0.5.0       2018-06-12 [1]
##  nlme            3.1-137     2018-04-07 [2]
##  openssl         1.1         2018-11-15 [1]
##  pillar          1.3.1       2018-12-15 [1]
##  pkgconfig       2.0.2       2018-08-16 [1]
##  plogr           0.2.0       2018-03-25 [1]
##  plyr            1.8.4       2016-06-08 [1]
##  png             0.1-7       2013-12-03 [1]
##  purrr           0.2.5       2018-05-29 [1]
##  R6              2.3.0       2018-10-04 [1]
##  RColorBrewer    1.1-2       2014-12-07 [1]
##  Rcpp            1.0.0       2018-11-07 [1]
##  RcppArmadillo   0.9.200.5.0 2018-11-28 [1]
##  readr         * 1.3.1       2018-12-21 [1]
##  reshape2        1.4.3       2017-12-11 [1]
##  rgeos           0.4-2       2018-11-08 [1]
##  rlang           0.3.0.1     2018-10-25 [1]
##  rnaturalearth   0.1.0       2017-03-21 [1]
##  scales          1.0.0       2018-08-09 [1]
##  sf            * 0.7-2       2018-12-20 [1]
##  sp              1.3-1       2018-06-05 [1]
##  stringi         1.2.4       2018-07-20 [1]
##  stringr         1.3.1       2018-05-10 [1]
##  tibble          1.4.2       2018-01-22 [1]
##  tidyr         * 0.8.2       2018-10-28 [1]
##  tidyselect      0.2.5       2018-10-11 [1]
##  units           0.6-2       2018-12-05 [1]
##  utf8            1.1.4       2018-05-24 [1]
##  viridisLite     0.3.0       2018-02-01 [1]
##  withr           2.1.2       2018-03-15 [1]
##  source                             
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.0)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  Github (italocegatta/brmap@181fc73)
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.0)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.0)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.0)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.0)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.2)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
##  CRAN (R 3.5.1)                     
## 
## [1] C:/Users/Italo/Documents/R/win-library/3.5
## [2] C:/Program Files/R/R-3.5.1/library&lt;/code&gt;&lt;/pre&gt;

      </content:encoded>
    </item>
    
    <item>
      <title>Como um cientista de dados pesquisa o carro que quer comprar?</title>
      <link>/como-um-cientista-de-dados-pesquisa-o-carro-que-quer-comprar/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/como-um-cientista-de-dados-pesquisa-o-carro-que-quer-comprar/</guid>
      <description>Estou naquela parte da vida em que se planeja comprar um carro. Como eu sou, acima de todos os sonhos, pão duro, decidir qual marca, modelo, versão e ano do veículo não vai ser fácil. Pensando nisso resolvi escrever um pacote no R para me ajudar a tomar esta decisão. O objetivo deste post é apresentar o pacote e as funções que auxiliam na coleta das informações da tabela FIPE.</description>
      <content:encoded>
        


&lt;p&gt;Estou naquela parte da vida em que se planeja comprar um carro. Como eu sou, acima de todos os sonhos, pão duro, decidir qual marca, modelo, versão e ano do veículo não vai ser fácil. Pensando nisso resolvi escrever um pacote no R para me ajudar a tomar esta decisão. O objetivo deste post é apresentar o pacote e as funções que auxiliam na coleta das informações da tabela &lt;a href=&#34;http://veiculos.fipe.org.br/&#34;&gt;FIPE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para aqueles que já passaram pela etapa de compra ou venda de um carro, provavelmente já consultaram a famosa tabela. Nas palavras do próprio site da FIPE:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Tabela Fipe expressa preços médios de veículos no mercado nacional, servindo apenas como um parâmetro para negociações ou avaliações. Os preços efetivamente praticados variam em função da região, conservação, cor, acessórios ou qualquer outro fator que possa influenciar as condições de oferta e procura por um veículo específico.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A motivação para este pacote foi exclusivamente pessoal e por isso a utilização das funções está bastante restrita. Por isso, se alguém quiser ajudar no desenvolvimento do pacote é só chegar e mandar um &lt;a href=&#34;https://github.com/italocegatta/fipe&#34;&gt;Pull Request&lt;/a&gt; no Github, contribuições serão muito bem-vindas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(dplyr, purrr, stringr, tidyr, forcats, ggplot2)
pacman::p_load_gh(&amp;quot;italocegatta/fipe&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Primeiro vou mostrar as funções e o workflow idealizado para o pacote. Queremos saber, por enquanto, o preço de uma BMW X6 M ano 2015 em julho de 2017.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# acesso aos dados no site da tabela fipe
bmw_x6_m_2015 &amp;lt;- fipe_carro(
  modelo = &amp;quot;x6 m&amp;quot;, marca = &amp;quot;bmw&amp;quot;, 
  ano = 2015,  data_referencia = &amp;quot;2017-07-01&amp;quot;
)

bmw_x6_m_2015&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 5
##   modelo                            marca ano   data_referencia  valor
##   &amp;lt;chr&amp;gt;                             &amp;lt;chr&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;date&amp;gt;           &amp;lt;dbl&amp;gt;
## 1 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. BMW   2015  2017-07-01      368603&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Achamos o preço do carro que eu queria. Apenas R$ 368 mil. Uma pechincha. Obviamente, saber quanto vale uma BMW X6 não faz diferença alguma no meu dia. Um abraço pra quem tem condições de comprar um carro desse sem precisar vender um rim.&lt;/p&gt;
&lt;p&gt;Agora que já conhecemos a função que pega o valor dos carros, vamos ampliar a consulta e justificar as horas que passamos aprendendo a programar. Já sabemos o preço do X6 M em julho/2017, mas e nos meses anteriores? Como foi a depreciação média do carro usado nos últimos meses? E os outros modelos X6, quanto será que estão valendo?&lt;/p&gt;
&lt;p&gt;Digamos que, agora, estas questões podem ser respondidas de forma bem rápida. Calma que eu mostro. Modificando a consulta anterior, iremos simplificar o nome do modelo para apenas x6, assim serão retornadas todas as versões do mesmo. A segunda alteração é a ausência do ano de fabricação, o que significa que serão retornados todos os anos na consulta. E por último, definimos os meses de referência para poder acompanhar a variação do preço ao longo nos anos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bmw_x6 &amp;lt;- fipe_carro(
  modelo = &amp;quot;x6&amp;quot;, marca = &amp;quot;bmw&amp;quot;, 
  data_referencia = seq.Date(as.Date(&amp;quot;2009-01-01&amp;quot;), as.Date(&amp;quot;2017-07-01&amp;quot;), by = &amp;quot;4 months&amp;quot;)
)

bmw_x6&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 480 x 5
##    modelo                            marca ano   data_referencia  valor
##    &amp;lt;chr&amp;gt;                             &amp;lt;chr&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;date&amp;gt;           &amp;lt;dbl&amp;gt;
##  1 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. BMW   0 km  2010-05-01      477030
##  2 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. BMW   0 km  2010-09-01      465300
##  3 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. BMW   0 km  2011-01-01      468543
##  4 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. BMW   0 km  2011-05-01      459500
##  5 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. BMW   0 km  2011-09-01      462000
##  6 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. BMW   0 km  2012-01-01      464510
##  7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. BMW   0 km  2012-05-01      558789
##  8 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. BMW   0 km  2012-09-01      573333
##  9 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. BMW   0 km  2013-01-01      550000
## 10 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut. BMW   0 km  2013-05-01      494950
## # ... with 470 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lembrando que o pacote não possui nenhum banco de dados armazenado, todas as informações são consultadas no site da tabela FIPE no ato da execução da função. Se sua internet não for muito rápida, pode ser que tenha demorado um pouquinho. Mas agora temos o banco de dados desejado. Imagina coletar estes dados, na mão, pelo site oficial!?!&lt;/p&gt;
&lt;p&gt;Bom agora o pacote está apresentado. Pretendo fazer outros posts com estudos de casos mais específicos, portanto vou deixar apenas um gráfico que resume a consulta que acabamos de fazer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bmw_x6 %&amp;gt;%
  #mutate(ano = fct_relevel(ano, &amp;quot;0 km&amp;quot;, after = Inf)) %&amp;gt;% 
  ggplot(aes(data_referencia, valor, color = ano, group = ano)) +
    geom_line(color = &amp;quot;grey30&amp;quot;) +
    geom_point(size = 3) +
    facet_wrap(~modelo) +
    labs(
      x = &amp;quot;Mês de refêrencia&amp;quot;,
      y = &amp;quot;Valor (R$)&amp;quot;,
      color = &amp;quot;Ano do \nmodelo&amp;quot;
    ) +
    scale_y_continuous(breaks = seq(0, 700000, 50000), labels = scales::dollar_format(prefix = NULL, big.mark = &amp;quot;.&amp;quot;)) +
    scale_x_date(date_breaks = &amp;quot;1 year&amp;quot;, date_labels = &amp;quot;%b/%y&amp;quot;) +
    scale_color_viridis_d() +
    theme_bw() +
    theme(legend.position = &amp;quot;top&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-07-29-como-um-cientista-de-dados-pesquisa-o-carro-que-quer-comprar_files/figure-html/unnamed-chunk-4-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessioninfo::session_info(c(&amp;quot;readr&amp;quot;, &amp;quot;dplyr&amp;quot;, &amp;quot;ggplot2&amp;quot;, &amp;quot;purrr&amp;quot;, &amp;quot;stringr&amp;quot;, &amp;quot;tidyr&amp;quot;, &amp;quot;forcats&amp;quot;, &amp;quot;fipe&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - Session info ----------------------------------------------------------
##  setting  value                       
##  version  R version 3.5.1 (2018-07-02)
##  os       Windows 10 x64              
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  ctype    Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2019-02-03                  
## 
## - Packages --------------------------------------------------------------
##  package      * version  date       lib source        
##  askpass        1.1      2019-01-13 [1] CRAN (R 3.5.2)
##  assertthat     0.2.0    2017-04-11 [1] CRAN (R 3.5.1)
##  BH             1.69.0-1 2019-01-07 [1] CRAN (R 3.5.2)
##  bindr          0.1.1    2018-03-13 [1] CRAN (R 3.5.1)
##  bindrcpp     * 0.2.2    2018-03-29 [1] CRAN (R 3.5.1)
##  cli            1.0.1    2018-09-25 [1] CRAN (R 3.5.1)
##  clipr          0.5.0    2019-01-11 [1] CRAN (R 3.5.2)
##  colorspace     1.4-0    2019-01-13 [1] CRAN (R 3.5.2)
##  crayon         1.3.4    2017-09-16 [1] CRAN (R 3.5.1)
##  curl           3.3      2019-01-10 [1] CRAN (R 3.5.2)
##  digest         0.6.18   2018-10-10 [1] CRAN (R 3.5.1)
##  dplyr        * 0.7.8    2018-11-10 [1] CRAN (R 3.5.1)
##  fansi          0.4.0    2018-10-05 [1] CRAN (R 3.5.1)
##  fipe         * 0.0.1    2019-02-03 [1] local         
##  forcats      * 0.3.0    2018-02-19 [1] CRAN (R 3.5.1)
##  ggplot2      * 3.1.0    2018-10-25 [1] CRAN (R 3.5.1)
##  glue           1.3.0    2018-07-17 [1] CRAN (R 3.5.1)
##  gtable         0.2.0    2016-02-26 [1] CRAN (R 3.5.1)
##  hms            0.4.2    2018-03-10 [1] CRAN (R 3.5.1)
##  httr           1.4.0    2018-12-11 [1] CRAN (R 3.5.2)
##  jsonlite       1.6      2018-12-07 [1] CRAN (R 3.5.2)
##  labeling       0.3      2014-08-23 [1] CRAN (R 3.5.0)
##  lattice        0.20-35  2017-03-25 [2] CRAN (R 3.5.1)
##  lazyeval       0.2.1    2017-10-29 [1] CRAN (R 3.5.1)
##  lubridate      1.7.4    2018-04-11 [1] CRAN (R 3.5.1)
##  magrittr       1.5      2014-11-22 [1] CRAN (R 3.5.1)
##  MASS           7.3-50   2018-04-30 [2] CRAN (R 3.5.1)
##  Matrix         1.2-14   2018-04-13 [2] CRAN (R 3.5.1)
##  mgcv           1.8-24   2018-06-23 [2] CRAN (R 3.5.1)
##  mime           0.6      2018-10-05 [1] CRAN (R 3.5.1)
##  munsell        0.5.0    2018-06-12 [1] CRAN (R 3.5.1)
##  nlme           3.1-137  2018-04-07 [2] CRAN (R 3.5.1)
##  openssl        1.2.1    2019-01-17 [1] CRAN (R 3.5.2)
##  pillar         1.3.1    2018-12-15 [1] CRAN (R 3.5.2)
##  pkgconfig      2.0.2    2018-08-16 [1] CRAN (R 3.5.1)
##  plogr          0.2.0    2018-03-25 [1] CRAN (R 3.5.1)
##  plyr           1.8.4    2016-06-08 [1] CRAN (R 3.5.1)
##  purrr        * 0.3.0    2019-01-27 [1] CRAN (R 3.5.2)
##  R6             2.3.0    2018-10-04 [1] CRAN (R 3.5.1)
##  RColorBrewer   1.1-2    2014-12-07 [1] CRAN (R 3.5.0)
##  Rcpp           1.0.0    2018-11-07 [1] CRAN (R 3.5.1)
##  readr          1.3.1    2018-12-21 [1] CRAN (R 3.5.2)
##  reshape2       1.4.3    2017-12-11 [1] CRAN (R 3.5.1)
##  rlang          0.3.1    2019-01-08 [1] CRAN (R 3.5.2)
##  scales         1.0.0    2018-08-09 [1] CRAN (R 3.5.1)
##  stringi        1.2.4    2018-07-20 [1] CRAN (R 3.5.1)
##  stringr      * 1.3.1    2018-05-10 [1] CRAN (R 3.5.1)
##  sys            2.1      2018-11-13 [1] CRAN (R 3.5.2)
##  tibble         2.0.1    2019-01-12 [1] CRAN (R 3.5.2)
##  tidyr        * 0.8.2    2018-10-28 [1] CRAN (R 3.5.1)
##  tidyselect     0.2.5    2018-10-11 [1] CRAN (R 3.5.1)
##  utf8           1.1.4    2018-05-24 [1] CRAN (R 3.5.1)
##  viridisLite    0.3.0    2018-02-01 [1] CRAN (R 3.5.1)
##  withr          2.1.2    2018-03-15 [1] CRAN (R 3.5.1)
## 
## [1] C:/Users/Italo/Documents/R/win-library/3.5
## [2] C:/Program Files/R/R-3.5.1/library&lt;/code&gt;&lt;/pre&gt;

      </content:encoded>
    </item>
    
    <item>
      <title>Ajuste de um modelo linear para vários fatores</title>
      <link>/ajuste-de-um-modelo-linear-para-varios-fatores/</link>
      <pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/ajuste-de-um-modelo-linear-para-varios-fatores/</guid>
      <description>Ajustar um modelo linear ou não linear é algo relativamente simples no R. Mas em muitos casos precisamos ajustá-lo para vários fatores e dependendo da quantidade isso se torna uma tarefa chata. Se você, assim como eu, já precisou fazer isso no Excel, sabe o que é perder mais que uma tarde copiando e colando informações entres abas e planilhas.
Mas felizmente existe uma máxima muito interessante entre programadores que é:</description>
      <content:encoded>
        


&lt;p&gt;Ajustar um modelo linear ou não linear é algo relativamente simples no R. Mas em muitos casos precisamos ajustá-lo para vários fatores e dependendo da quantidade isso se torna uma tarefa chata. Se você, assim como eu, já precisou fazer isso no Excel, sabe o que é perder mais que uma tarde copiando e colando informações entres abas e planilhas.&lt;br /&gt;
&lt;!-- more --&gt;&lt;/p&gt;
&lt;p&gt;Mas felizmente existe uma máxima muito interessante entre programadores que é:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t Repeat Yourself (DRY)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Depois que eu percebi o quanto a repetição humana gera erros, abracei totalmente o conceito DRY. Acreditem, vocês serão muito mais felizes e eficientes deixando o computador fazer as tarefas repetitivas e chatas.&lt;/p&gt;
&lt;p&gt;Para exemplificar, vamos fazer algo muito comum nas ciências florestais, que é predizer as alturas das árvores. Medir a altura da árvore é uma atividade laboriosa, e há muito tempo se sabe que a altura total das árvores possui alta correlação com o seu diâmetro.&lt;/p&gt;
&lt;p&gt;Utilizaremos mais uma vez os dados do &lt;a href=&#34;www.projetotume.com&#34;&gt;Projeto TUME&lt;/a&gt;, referente a medição de 24 meses do TUME 55 plantado no Mato Grosso do Sul.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, tidyr, broom, purrr, ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados &amp;lt;- read_csv2(
  &amp;quot;https://github.com/italocegatta/italocegatta.github.io_source/raw/master/content/dados/tume_55_24.csv&amp;quot;
)

dados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,881 x 9
##    N_tume I_meses Esp          Parc_m2 N_arv DAP_cm   H_m   Cod  Cod2
##     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1     55      24 E_botryoides     600     1    4.1   6.5    NA    NA
##  2     55      24 E_botryoides     600     2    9.7   8      NA    NA
##  3     55      24 E_botryoides     600     3   NA    NA       5    NA
##  4     55      24 E_botryoides     600     4    7.6   7.5     2    NA
##  5     55      24 E_botryoides     600     5    3.8   5      NA    NA
##  6     55      24 E_botryoides     600     6   NA    NA       1    NA
##  7     55      24 E_botryoides     600     7   12.6   9       6    NA
##  8     55      24 E_botryoides     600     8   NA    NA       1    NA
##  9     55      24 E_botryoides     600     9    7     8      NA    NA
## 10     55      24 E_botryoides     600    10    7.5   7.5    NA    NA
## # ... with 1,871 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nosso objetivo é simples: ajustar um modelo hipsométrico para cada espécie e em seguida predizer as alturas das árvores. A Figura &lt;a href=&#34;#fig:9-dap-h&#34;&gt;1&lt;/a&gt; mostra a relação que teríamos se fosse ajustado apenas um modelo para todas as espécies.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(DAP_cm, H_m)) +
  geom_point(alpha=0.4) +
  geom_smooth(method=&amp;quot;lm&amp;quot;) +
  theme_bw(16)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:9-dap-h&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-08-27-ajuste-de-um-modelo-linear-para-varios-fatores_files/figure-html/9-dap-h-1.svg&#34; alt=&#34;Relação entre o diâmetro e a altura sem distinção de espécie.&#34; width=&#34;960&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Relação entre o diâmetro e a altura sem distinção de espécie.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Mas na prática, a relação diâmetro-altura é diferente entre espécie, como pode ser notado na Figura &lt;a href=&#34;#fig:9-dap-h-spp&#34;&gt;2&lt;/a&gt;. Talvez fique mais evidente a diferença observando os coeficientes dos modelos que serão ajustados a seguir.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(DAP_cm, H_m)) +
  geom_point(alpha=0.4) +
  geom_smooth(method=&amp;quot;lm&amp;quot;) +
  facet_wrap(~Esp) +
  theme_bw(16)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:9-dap-h-spp&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-08-27-ajuste-de-um-modelo-linear-para-varios-fatores_files/figure-html/9-dap-h-spp-1.svg&#34; alt=&#34;Relação entre o diâmetro e a altura por espécie.&#34; width=&#34;960&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  2: Relação entre o diâmetro e a altura por espécie.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A primeira etapa é entender que um data.frame pode conter vários tipos de elementos, como números, caracteres, listas e também outros data.frames. Para isso utilizaremos a função &lt;code&gt;nest()&lt;/code&gt; do pacote &lt;code&gt;tidyr&lt;/code&gt; e aninharemos os dados em função das espécies.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados %&amp;gt;%
  group_by(Esp) %&amp;gt;% 
  nest()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 24 x 2
##    Esp                     data             
##    &amp;lt;chr&amp;gt;                   &amp;lt;list&amp;gt;           
##  1 E_botryoides            &amp;lt;tibble [80 x 8]&amp;gt;
##  2 E_brassiana             &amp;lt;tibble [80 x 8]&amp;gt;
##  3 E_camaldulensis         &amp;lt;tibble [80 x 8]&amp;gt;
##  4 E_citriodora            &amp;lt;tibble [80 x 8]&amp;gt;
##  5 E_cloeziana             &amp;lt;tibble [51 x 8]&amp;gt;
##  6 E_dunnii_urophylla      &amp;lt;tibble [80 x 8]&amp;gt;
##  7 E_exserta               &amp;lt;tibble [80 x 8]&amp;gt;
##  8 E_grandis_AT            &amp;lt;tibble [80 x 8]&amp;gt;
##  9 E_grandis_camaldulensis &amp;lt;tibble [80 x 8]&amp;gt;
## 10 E_grandis_CH            &amp;lt;tibble [80 x 8]&amp;gt;
## # ... with 14 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora podemos ajustar um modelo de regressão para cada espécie utilizando a função &lt;code&gt;map&lt;/code&gt;,do pacote &lt;code&gt;purrr&lt;/code&gt;. Podemos ainda extrair as informações desses modelos com as funções &lt;code&gt;glance&lt;/code&gt;, &lt;code&gt;tidy&lt;/code&gt; e &lt;code&gt;augment&lt;/code&gt;, do pacote &lt;code&gt;broom&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_modl &amp;lt;- dados %&amp;gt;%
  group_by(Esp) %&amp;gt;% 
  nest() %&amp;gt;% 
  mutate(
    ajuste = data %&amp;gt;% map(~ lm(log(H_m) ~ I(1/DAP_cm), data = .)),
    resumo = map(ajuste, glance),
    coef = map(ajuste, tidy),
    resid = map(ajuste, augment)
  )

dados_modl&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 24 x 6
##    Esp             data         ajuste   resumo      coef       resid      
##    &amp;lt;chr&amp;gt;           &amp;lt;list&amp;gt;       &amp;lt;list&amp;gt;   &amp;lt;list&amp;gt;      &amp;lt;list&amp;gt;     &amp;lt;list&amp;gt;     
##  1 E_botryoides    &amp;lt;tibble [80~ &amp;lt;S3: lm&amp;gt; &amp;lt;tibble [1~ &amp;lt;tibble [~ &amp;lt;tibble [6~
##  2 E_brassiana     &amp;lt;tibble [80~ &amp;lt;S3: lm&amp;gt; &amp;lt;tibble [1~ &amp;lt;tibble [~ &amp;lt;tibble [6~
##  3 E_camaldulensis &amp;lt;tibble [80~ &amp;lt;S3: lm&amp;gt; &amp;lt;tibble [1~ &amp;lt;tibble [~ &amp;lt;tibble [7~
##  4 E_citriodora    &amp;lt;tibble [80~ &amp;lt;S3: lm&amp;gt; &amp;lt;tibble [1~ &amp;lt;tibble [~ &amp;lt;tibble [6~
##  5 E_cloeziana     &amp;lt;tibble [51~ &amp;lt;S3: lm&amp;gt; &amp;lt;tibble [1~ &amp;lt;tibble [~ &amp;lt;tibble [3~
##  6 E_dunnii_uroph~ &amp;lt;tibble [80~ &amp;lt;S3: lm&amp;gt; &amp;lt;tibble [1~ &amp;lt;tibble [~ &amp;lt;tibble [7~
##  7 E_exserta       &amp;lt;tibble [80~ &amp;lt;S3: lm&amp;gt; &amp;lt;tibble [1~ &amp;lt;tibble [~ &amp;lt;tibble [7~
##  8 E_grandis_AT    &amp;lt;tibble [80~ &amp;lt;S3: lm&amp;gt; &amp;lt;tibble [1~ &amp;lt;tibble [~ &amp;lt;tibble [7~
##  9 E_grandis_cama~ &amp;lt;tibble [80~ &amp;lt;S3: lm&amp;gt; &amp;lt;tibble [1~ &amp;lt;tibble [~ &amp;lt;tibble [6~
## 10 E_grandis_CH    &amp;lt;tibble [80~ &amp;lt;S3: lm&amp;gt; &amp;lt;tibble [1~ &amp;lt;tibble [~ &amp;lt;tibble [6~
## # ... with 14 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Da mesma forma que aninhamos os dados por espécie, podemos retorná-los para o formato original, mas agora mostrando apenas as informações que realmente interessam.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_modl %&amp;gt;%
  select(Esp, resumo) %&amp;gt;% 
  unnest(resumo)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 24 x 12
##    Esp   r.squared adj.r.squared  sigma statistic  p.value    df logLik
##    &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 E_bo~     0.787         0.783 0.136      236.  3.85e-23     2   38.9
##  2 E_br~     0.703         0.698 0.160      140.  3.26e-17     2   26.2
##  3 E_ca~     0.719         0.716 0.128      195.  1.14e-22     2   50.8
##  4 E_ci~     0.602         0.596 0.102      101.  4.98e-15     2   60.4
##  5 E_cl~     0.260         0.234 0.167       10.2 3.42e- 3     2   12.5
##  6 E_du~     0.720         0.716 0.161      180.  5.03e-21     2   30.3
##  7 E_ex~     0.590         0.584 0.196       99.2 5.52e-15     2   16.1
##  8 E_gr~     0.747         0.744 0.0772     225.  2.12e-24     2   90.1
##  9 E_gr~     0.829         0.827 0.161      325.  2.11e-27     2   29.2
## 10 E_gr~     0.776         0.773 0.105      233.  1.75e-23     2   58.8
## # ... with 14 more rows, and 4 more variables: AIC &amp;lt;dbl&amp;gt;, BIC &amp;lt;dbl&amp;gt;,
## #   deviance &amp;lt;dbl&amp;gt;, df.residual &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_modl %&amp;gt;%
  select(Esp, coef ) %&amp;gt;% 
  unnest(coef)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 48 x 6
##    Esp             term        estimate std.error statistic  p.value
##    &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 E_botryoides    (Intercept)     2.63    0.0422     62.3  5.04e-59
##  2 E_botryoides    I(1/DAP_cm)    -4.13    0.269     -15.4  3.85e-23
##  3 E_brassiana     (Intercept)     2.01    0.0511     39.4  4.39e-44
##  4 E_brassiana     I(1/DAP_cm)    -2.37    0.201     -11.8  3.26e-17
##  5 E_camaldulensis (Intercept)     2.73    0.0461     59.2  2.33e-65
##  6 E_camaldulensis I(1/DAP_cm)    -4.79    0.343     -14.0  1.14e-22
##  7 E_citriodora    (Intercept)     2.55    0.0551     46.3  1.31e-52
##  8 E_citriodora    I(1/DAP_cm)    -3.80    0.378     -10.1  4.98e-15
##  9 E_cloeziana     (Intercept)     2.32    0.116      20.1  1.50e-18
## 10 E_cloeziana     I(1/DAP_cm)    -2.84    0.892      -3.19 3.42e- 3
## # ... with 38 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_modl %&amp;gt;%
  select(Esp, resid) %&amp;gt;% 
  unnest(resid)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,633 x 11
##    Esp   .rownames log.H_m. I.1.DAP_cm. .fitted .se.fit   .resid   .hat
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 E_bo~ 1             1.87      0.244     1.63  0.0317  0.246   0.0539
##  2 E_bo~ 2             2.08      0.103     2.21  0.0201 -0.128   0.0217
##  3 E_bo~ 4             2.01      0.132     2.09  0.0171 -0.0751  0.0158
##  4 E_bo~ 5             1.61      0.263     1.55  0.0361  0.0628  0.0702
##  5 E_bo~ 7             2.20      0.0794    2.31  0.0242 -0.108   0.0315
##  6 E_bo~ 9             2.08      0.143     2.04  0.0168  0.0360  0.0152
##  7 E_bo~ 10            2.01      0.133     2.08  0.0170 -0.0678  0.0156
##  8 E_bo~ 13            1.61      0.167     1.95  0.0178 -0.336   0.0171
##  9 E_bo~ 14            2.30      0.0980    2.23  0.0209  0.0741  0.0234
## 10 E_bo~ 15            2.14      0.120     2.14  0.0180  0.00425 0.0173
## # ... with 1,623 more rows, and 3 more variables: .sigma &amp;lt;dbl&amp;gt;,
## #   .cooksd &amp;lt;dbl&amp;gt;, .std.resid &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Após o ajuste do modelo, temos de predizer as alturas. O único adendo para esse comando é que precisamos fazer em duas etapas, uma utilizando a função &lt;code&gt;predict&lt;/code&gt; e outra para trazer o valor predito para a escala natural, pois o modelo foi ajustado na escala logarítmica.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_pred &amp;lt;- dados_modl %&amp;gt;% 
  mutate(
    hpred = map2(ajuste, data, predict),
    hpred = map(hpred, exp)
  ) %&amp;gt;%
  select(Esp, data, hpred)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por fim, temos de volta um data.frame com as alturas preditas. Por mais que o ajuste tenha ficado razoável, na prática a construção de modelos de relação hipsométrica envolvem outras etapas e um maior rigor em termos estatísticos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_compl &amp;lt;- dados_pred %&amp;gt;%
  unnest(hpred, data)

dados_compl&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,881 x 10
##    Esp          hpred N_tume I_meses Parc_m2 N_arv DAP_cm   H_m   Cod  Cod2
##    &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 E_botryoides  5.08     55      24     600     1    4.1   6.5    NA    NA
##  2 E_botryoides  9.09     55      24     600     2    9.7   8      NA    NA
##  3 E_botryoides NA        55      24     600     3   NA    NA       5    NA
##  4 E_botryoides  8.08     55      24     600     4    7.6   7.5     2    NA
##  5 E_botryoides  4.70     55      24     600     5    3.8   5      NA    NA
##  6 E_botryoides NA        55      24     600     6   NA    NA       1    NA
##  7 E_botryoides 10.0      55      24     600     7   12.6   9       6    NA
##  8 E_botryoides NA        55      24     600     8   NA    NA       1    NA
##  9 E_botryoides  7.72     55      24     600     9    7     8      NA    NA
## 10 E_botryoides  8.03     55      24     600    10    7.5   7.5    NA    NA
## # ... with 1,871 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessioninfo::session_info(c(&amp;quot;readr&amp;quot;, &amp;quot;dplyr&amp;quot;, &amp;quot;ggplot2&amp;quot;, &amp;quot;tidyr&amp;quot;, &amp;quot;broom&amp;quot;, &amp;quot;purrr&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - Session info ----------------------------------------------------------
##  setting  value                       
##  version  R version 3.5.1 (2018-07-02)
##  os       Windows 10 x64              
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  ctype    Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2018-12-31                  
## 
## - Packages --------------------------------------------------------------
##  package      * version  date       lib source        
##  assertthat     0.2.0    2017-04-11 [1] CRAN (R 3.5.1)
##  backports      1.1.2    2017-12-13 [1] CRAN (R 3.5.0)
##  BH             1.66.0-1 2018-02-13 [1] CRAN (R 3.5.0)
##  bindr          0.1.1    2018-03-13 [1] CRAN (R 3.5.1)
##  bindrcpp     * 0.2.2    2018-03-29 [1] CRAN (R 3.5.1)
##  broom        * 0.5.0    2018-07-17 [1] CRAN (R 3.5.1)
##  cli            1.0.1    2018-09-25 [1] CRAN (R 3.5.1)
##  clipr          0.4.1    2018-06-23 [1] CRAN (R 3.5.1)
##  colorspace     1.3-2    2016-12-14 [1] CRAN (R 3.5.1)
##  crayon         1.3.4    2017-09-16 [1] CRAN (R 3.5.1)
##  digest         0.6.18   2018-10-10 [1] CRAN (R 3.5.1)
##  dplyr        * 0.7.8    2018-11-10 [1] CRAN (R 3.5.1)
##  fansi          0.4.0    2018-10-05 [1] CRAN (R 3.5.1)
##  ggplot2      * 3.1.0    2018-10-25 [1] CRAN (R 3.5.1)
##  glue           1.3.0    2018-07-17 [1] CRAN (R 3.5.1)
##  gtable         0.2.0    2016-02-26 [1] CRAN (R 3.5.1)
##  hms            0.4.2    2018-03-10 [1] CRAN (R 3.5.1)
##  labeling       0.3      2014-08-23 [1] CRAN (R 3.5.0)
##  lattice        0.20-35  2017-03-25 [2] CRAN (R 3.5.1)
##  lazyeval       0.2.1    2017-10-29 [1] CRAN (R 3.5.1)
##  magrittr       1.5      2014-11-22 [1] CRAN (R 3.5.1)
##  MASS           7.3-50   2018-04-30 [2] CRAN (R 3.5.1)
##  Matrix         1.2-14   2018-04-13 [2] CRAN (R 3.5.1)
##  mgcv           1.8-24   2018-06-23 [2] CRAN (R 3.5.1)
##  munsell        0.5.0    2018-06-12 [1] CRAN (R 3.5.1)
##  nlme           3.1-137  2018-04-07 [2] CRAN (R 3.5.1)
##  pillar         1.3.1    2018-12-15 [1] CRAN (R 3.5.2)
##  pkgconfig      2.0.2    2018-08-16 [1] CRAN (R 3.5.1)
##  plogr          0.2.0    2018-03-25 [1] CRAN (R 3.5.1)
##  plyr           1.8.4    2016-06-08 [1] CRAN (R 3.5.1)
##  purrr        * 0.2.5    2018-05-29 [1] CRAN (R 3.5.1)
##  R6             2.3.0    2018-10-04 [1] CRAN (R 3.5.1)
##  RColorBrewer   1.1-2    2014-12-07 [1] CRAN (R 3.5.0)
##  Rcpp           1.0.0    2018-11-07 [1] CRAN (R 3.5.1)
##  readr        * 1.2.1    2018-11-22 [1] CRAN (R 3.5.1)
##  reshape2       1.4.3    2017-12-11 [1] CRAN (R 3.5.1)
##  rlang          0.3.0.1  2018-10-25 [1] CRAN (R 3.5.1)
##  scales         1.0.0    2018-08-09 [1] CRAN (R 3.5.1)
##  stringi        1.2.4    2018-07-20 [1] CRAN (R 3.5.1)
##  stringr        1.3.1    2018-05-10 [1] CRAN (R 3.5.1)
##  tibble         1.4.2    2018-01-22 [1] CRAN (R 3.5.1)
##  tidyr        * 0.8.2    2018-10-28 [1] CRAN (R 3.5.1)
##  tidyselect     0.2.5    2018-10-11 [1] CRAN (R 3.5.1)
##  utf8           1.1.4    2018-05-24 [1] CRAN (R 3.5.1)
##  viridisLite    0.3.0    2018-02-01 [1] CRAN (R 3.5.1)
##  withr          2.1.2    2018-03-15 [1] CRAN (R 3.5.1)
## 
## [1] C:/Users/Italo/Documents/R/win-library/3.5
## [2] C:/Program Files/R/R-3.5.1/library&lt;/code&gt;&lt;/pre&gt;

      </content:encoded>
    </item>
    
    <item>
      <title>Os gráficos que explicam nossos dados (boxplot)</title>
      <link>/os-graficos-que-explicam-nossos-dados-boxplot/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/os-graficos-que-explicam-nossos-dados-boxplot/</guid>
      <description>Nossos dados merecem ser apresentados de forma clara, atraente e inspiradora. Não há nada mais frustrante que dar duro no campo para coletar os dados e depois apresentá-los numa simples tabela de resumos. Podemos e devemos fazer mais, certo?
Vou começar agora uma série de posts sobre tipos de gráficos. Como disse no primeiro post desse blog, minha intenção é documentar os scripts que escrevi durante a graduação, portanto os gráficos que vou apresentar se resumem aos que tive de fazer por conta de alguma demanda específica.</description>
      <content:encoded>
        


&lt;p&gt;Nossos dados merecem ser apresentados de forma clara, atraente e inspiradora. Não há nada mais frustrante que dar duro no campo para coletar os dados e depois apresentá-los numa simples tabela de resumos. Podemos e devemos fazer mais, certo?&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Vou começar agora uma série de posts sobre tipos de gráficos. Como disse no primeiro post desse &lt;a href=&#34;https://italocegatta.github.io/sobre-esse-blog.html&#34;&gt;blog&lt;/a&gt;, minha intenção é documentar os scripts que escrevi durante a graduação, portanto os gráficos que vou apresentar se resumem aos que tive de fazer por conta de alguma demanda específica.&lt;/p&gt;
&lt;p&gt;Para iniciar, escolhi o gráfico boxplot. É um gráfico muito útil para entender a variabilidade das nossas observações. No boxplot temos 5 informações básicas: valor mínimo, primeiro quartil, mediana, terceiro quartil e valor máximo. Há ainda a notificação de &lt;em&gt;outliers&lt;/em&gt;, quando a observação é maior ou menor que 1,5 vezes a distância interquartílica.&lt;/p&gt;
&lt;p&gt;Vamos trabalhar com os dados que apresentei no post anterior sobre &lt;a href=&#34;https://italocegatta.github.io/o-conceito-tidy-data.html&#34;&gt;tidy data&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(pacman)
p_load(readr, dplyr, tidyr, ggplot2, ggthemes)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados &amp;lt;- read_csv2(
  &amp;quot;https://raw.githubusercontent.com/italocegatta/italocegatta.github.io_source/master/content/dados/base_vespa.csv&amp;quot;
)

dados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,100 x 5
##    Tratamento Individuo Coleta Local   Galhas
##    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 Actara d1          1      1 Peciolo      1
##  2 Actara d1          2      1 Peciolo     NA
##  3 Actara d1          3      1 Peciolo     NA
##  4 Actara d1          4      1 Peciolo     NA
##  5 Actara d1          5      1 Peciolo     NA
##  6 Actara d1          6      1 Peciolo     NA
##  7 Actara d1          7      1 Peciolo     NA
##  8 Actara d1          8      1 Peciolo     NA
##  9 Actara d1          9      1 Peciolo     NA
## 10 Actara d1         10      1 Peciolo     NA
## # ... with 2,090 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Primeiro vamos processar os dados da última medição (Coleta 5) para verificar o nº total de galhas de cada tratamento, desconsiderando o local da galha. Nesse caso estou considerando apenas as mudas que foram atacadas e tiveram o desenvolvimento de galhas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# seleciona apenas as Coletas de numero 5, em seguida monta um fator de 
# agrupamento em função de Tratamento e Individuo. Aplica a soma de todas as
# observações (Galhas) de acordo com o fator de agrupamento. Troca os valores
# 0 (quando não há galhas) por NA.

total &amp;lt;- dados %&amp;gt;%
  filter(Coleta == 5) %&amp;gt;%
  group_by(Tratamento, Individuo) %&amp;gt;%
  summarise(Galhas = sum(Galhas, na.rm=T)) %&amp;gt;%
  mutate(Galhas = replace(Galhas, Galhas == 0, NA))

total&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 140 x 3
## # Groups:   Tratamento [7]
##    Tratamento Individuo Galhas
##    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 Actara d1          1     11
##  2 Actara d1          2     NA
##  3 Actara d1          3      4
##  4 Actara d1          4     NA
##  5 Actara d1          5     NA
##  6 Actara d1          6     NA
##  7 Actara d1          7     30
##  8 Actara d1          8     NA
##  9 Actara d1          9     NA
## 10 Actara d1         10     NA
## # ... with 130 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O boxplot é um gráfico unidimensional, ou seja, precisamos de apenas uma variável para construí-lo. Entretanto, podemos usar variáveis categóricas para servir de agrupamento e replicar o gráfico para todos os níveis da variável. Por exemplo, no nosso banco de dados temos &lt;code&gt;Galhas&lt;/code&gt; como variável quantitativa e &lt;code&gt;Tratamento&lt;/code&gt;, &lt;code&gt;Coleta&lt;/code&gt; e &lt;code&gt;Local&lt;/code&gt; como variável qualitativa.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total, aes(&amp;quot;Total&amp;quot;, Galhas)) +
  geom_boxplot(fill = &amp;quot;grey60&amp;quot;, alpha = 0.8) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:4-boxplot-total&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-06-os-graficos-que-explicam-nossos-dados-boxplot_files/figure-html/4-boxplot-total-1.svg&#34; alt=&#34;Boxplot que mostra o nº de galhas de todos os tratamentos.&#34; width=&#34;960&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Boxplot que mostra o nº de galhas de todos os tratamentos.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A Figura &lt;a href=&#34;#fig:4-boxplot-total&#34;&gt;1&lt;/a&gt; dá uma visão geral de todas as observações em um único boxplot, mas não nos explica muita coisa. No caso da Figura &lt;a href=&#34;#fig:4-boxplot-trat&#34;&gt;2&lt;/a&gt;, &lt;code&gt;Tratamento&lt;/code&gt; tratamento é uma variável categórica e nos permite subdividir os boxplots para todos os níveis e assim podemos compará-los.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total, aes(Tratamento, Galhas)) +
  geom_boxplot(fill = &amp;quot;grey60&amp;quot;, alpha = 0.8) +
  theme_bw(16)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:4-boxplot-trat&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-06-os-graficos-que-explicam-nossos-dados-boxplot_files/figure-html/4-boxplot-trat-1.svg&#34; alt=&#34;Boxplot que mostra o nº de galhas em função de cada tratamento.&#34; width=&#34;960&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  2: Boxplot que mostra o nº de galhas em função de cada tratamento.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note que no tratamento &lt;em&gt;Actara d1&lt;/em&gt;, há um indivíduo discrepante (&lt;em&gt;outlier&lt;/em&gt;) que se destaca com 30 galhas. Note também a grande variabilidade entre os tratamentos, muito comum em experimentos envolvendo insetos. Normalmente o coeficiente de variação é extremamente alto e dificilmente há homogeneidade de variância. Um comentário interessante sobre o boxplot é que a caixa, valores entre o 1º e 3º quartil, corresponde a 50% das observações.&lt;/p&gt;
&lt;p&gt;Podemos também avaliar a variabilidade do nº de galhas por local. Para isso vamos incluir a variável &lt;code&gt;Local&lt;/code&gt; no agrupamento (Figura &lt;a href=&#34;#fig:4-boxplot-local&#34;&gt;3&lt;/a&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Adiciona mais um fator de agrupamento para o resumo. Nesse caso cada
# indivíduo terá o nº de galhas explicito em cada local.

local &amp;lt;- dados %&amp;gt;%
  filter(Coleta == 5) %&amp;gt;%
  group_by(Tratamento, Individuo, Local) %&amp;gt;%
  summarise(Galhas = sum(Galhas, na.rm=T)) %&amp;gt;%
  mutate(Galhas = replace(Galhas, Galhas == 0, NA))

local&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 420 x 4
## # Groups:   Tratamento, Individuo [140]
##    Tratamento Individuo Local   Galhas
##    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 Actara d1          1 Caule        2
##  2 Actara d1          1 Nervura      3
##  3 Actara d1          1 Peciolo      6
##  4 Actara d1          2 Caule       NA
##  5 Actara d1          2 Nervura     NA
##  6 Actara d1          2 Peciolo     NA
##  7 Actara d1          3 Caule        1
##  8 Actara d1          3 Nervura      1
##  9 Actara d1          3 Peciolo      2
## 10 Actara d1          4 Caule       NA
## # ... with 410 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(local, aes(Tratamento, Galhas, fill = Local)) +
  geom_boxplot(alpha = 0.8) +
  scale_fill_brewer(palette = &amp;quot;Spectral&amp;quot;) +
  theme_bw(16)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:4-boxplot-local&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-06-os-graficos-que-explicam-nossos-dados-boxplot_files/figure-html/4-boxplot-local-1.svg&#34; alt=&#34;Boxplot que mostra o nº de galhas por local e tratamento.&#34; width=&#34;960&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  3: Boxplot que mostra o nº de galhas por local e tratamento.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Uma outra perspectiva é avaliar a evolução do total de galhas por coleta. Para isto basta incluir a variável &lt;code&gt;Coleta&lt;/code&gt; no agrupamento (Figura &lt;a href=&#34;#fig:4-boxplot-coleta&#34;&gt;4&lt;/a&gt;). Para facilitar a visualização, vou excluir a primeira coleta. Podemos ainda adicionar os pontos que representam as observações para poder identificar quantas observações tem cada tratamento.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;total_coleta &amp;lt;- dados %&amp;gt;%
  filter(Coleta != 1 ) %&amp;gt;%
  group_by(Tratamento, Coleta, Individuo) %&amp;gt;%
  summarise(Galhas = sum(Galhas, na.rm=T)) %&amp;gt;%
  mutate(Galhas = replace(Galhas, Galhas == 0, NA))

total_coleta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 560 x 4
## # Groups:   Tratamento, Coleta [28]
##    Tratamento Coleta Individuo Galhas
##    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 Actara d1       2         1      3
##  2 Actara d1       2         2     NA
##  3 Actara d1       2         3     NA
##  4 Actara d1       2         4     NA
##  5 Actara d1       2         5     NA
##  6 Actara d1       2         6     NA
##  7 Actara d1       2         7      2
##  8 Actara d1       2         8     NA
##  9 Actara d1       2         9     NA
## 10 Actara d1       2        10     NA
## # ... with 550 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total_coleta, aes(Tratamento, Galhas)) +
  geom_boxplot(fill = &amp;quot;grey60&amp;quot;, alpha = 0.8, outlier.color = NA) +
  geom_jitter(alpha = 0.4) +
  facet_wrap(~Coleta) +
  theme_bw(16) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:4-boxplot-coleta&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-06-os-graficos-que-explicam-nossos-dados-boxplot_files/figure-html/4-boxplot-coleta-1.svg&#34; alt=&#34;Boxplot que mostra a dispersão do total de galhas por tratamento e coletas.&#34; width=&#34;960&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  4: Boxplot que mostra a dispersão do total de galhas por tratamento e coletas.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;É importante destacar que o gráfico da Figura &lt;a href=&#34;#fig:4-boxplot-coleta&#34;&gt;4&lt;/a&gt; não é adequado para esse tipo de informação. Nesse caso seria mais interessante um gráfico de linhas em que cada linha representa um tratamento (veremos esse gráfico em um futuro post).&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - Session info ----------------------------------------------------------
##  setting  value                       
##  version  R version 3.5.1 (2018-07-02)
##  os       Windows 10 x64              
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  ctype    Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2018-12-30                  
## 
## - Packages --------------------------------------------------------------
##  package      * version    date       lib source                        
##  assertthat     0.2.0      2017-04-11 [1] CRAN (R 3.5.1)                
##  backports      1.1.2      2017-12-13 [1] CRAN (R 3.5.0)                
##  base64enc      0.1-3      2015-07-28 [1] CRAN (R 3.5.0)                
##  bindr          0.1.1      2018-03-13 [1] CRAN (R 3.5.1)                
##  bindrcpp     * 0.2.2      2018-03-29 [1] CRAN (R 3.5.1)                
##  blogdown       0.9        2018-10-23 [1] CRAN (R 3.5.2)                
##  bookdown       0.9        2018-12-21 [1] CRAN (R 3.5.2)                
##  callr          3.0.0      2018-08-24 [1] CRAN (R 3.5.1)                
##  cli            1.0.1      2018-09-25 [1] CRAN (R 3.5.1)                
##  colorspace     1.3-2      2016-12-14 [1] CRAN (R 3.5.1)                
##  crayon         1.3.4      2017-09-16 [1] CRAN (R 3.5.1)                
##  curl           3.2        2018-03-28 [1] CRAN (R 3.5.1)                
##  desc           1.2.0      2018-05-01 [1] CRAN (R 3.5.1)                
##  devtools       2.0.1      2018-10-26 [1] CRAN (R 3.5.1)                
##  digest         0.6.18     2018-10-10 [1] CRAN (R 3.5.1)                
##  dplyr        * 0.7.8      2018-11-10 [1] CRAN (R 3.5.1)                
##  evaluate       0.12       2018-10-09 [1] CRAN (R 3.5.1)                
##  fansi          0.4.0      2018-10-05 [1] CRAN (R 3.5.1)                
##  fs             1.2.6      2018-08-23 [1] CRAN (R 3.5.1)                
##  ggplot2      * 3.1.0      2018-10-25 [1] CRAN (R 3.5.1)                
##  ggthemes     * 4.0.1      2018-08-24 [1] CRAN (R 3.5.1)                
##  glue           1.3.0      2018-07-17 [1] CRAN (R 3.5.1)                
##  gtable         0.2.0      2016-02-26 [1] CRAN (R 3.5.1)                
##  highr          0.7        2018-06-09 [1] CRAN (R 3.5.1)                
##  hms            0.4.2      2018-03-10 [1] CRAN (R 3.5.1)                
##  htmltools      0.3.6      2017-04-28 [1] CRAN (R 3.5.1)                
##  knitr          1.20       2018-02-20 [1] CRAN (R 3.5.1)                
##  labeling       0.3        2014-08-23 [1] CRAN (R 3.5.0)                
##  lazyeval       0.2.1      2017-10-29 [1] CRAN (R 3.5.1)                
##  magrittr       1.5        2014-11-22 [1] CRAN (R 3.5.1)                
##  memoise        1.1.0      2017-04-21 [1] CRAN (R 3.5.1)                
##  munsell        0.5.0      2018-06-12 [1] CRAN (R 3.5.1)                
##  pacman       * 0.5.0      2018-10-22 [1] CRAN (R 3.5.1)                
##  pillar         1.3.0      2018-07-14 [1] CRAN (R 3.5.1)                
##  pkgbuild       1.0.2      2018-10-16 [1] CRAN (R 3.5.1)                
##  pkgconfig      2.0.2      2018-08-16 [1] CRAN (R 3.5.1)                
##  pkgload        1.0.2      2018-10-29 [1] CRAN (R 3.5.1)                
##  plyr           1.8.4      2016-06-08 [1] CRAN (R 3.5.1)                
##  prettyunits    1.0.2      2015-07-13 [1] CRAN (R 3.5.1)                
##  processx       3.2.0      2018-08-16 [1] CRAN (R 3.5.1)                
##  ps             1.2.1      2018-11-06 [1] CRAN (R 3.5.1)                
##  purrr          0.2.5      2018-05-29 [1] CRAN (R 3.5.1)                
##  R6             2.3.0      2018-10-04 [1] CRAN (R 3.5.1)                
##  RColorBrewer   1.1-2      2014-12-07 [1] CRAN (R 3.5.0)                
##  Rcpp           1.0.0      2018-11-07 [1] CRAN (R 3.5.1)                
##  readr        * 1.2.1      2018-11-22 [1] CRAN (R 3.5.1)                
##  remotes        2.0.2      2018-10-30 [1] CRAN (R 3.5.1)                
##  rlang          0.3.0.1    2018-10-25 [1] CRAN (R 3.5.1)                
##  rmarkdown      1.10       2018-06-11 [1] CRAN (R 3.5.1)                
##  rprojroot      1.3-2      2018-01-03 [1] CRAN (R 3.5.1)                
##  scales         1.0.0      2018-08-09 [1] CRAN (R 3.5.1)                
##  sessioninfo    1.1.1      2018-11-05 [1] CRAN (R 3.5.1)                
##  stringi        1.2.4      2018-07-20 [1] CRAN (R 3.5.1)                
##  stringr        1.3.1      2018-05-10 [1] CRAN (R 3.5.1)                
##  testthat       2.0.1      2018-10-13 [1] CRAN (R 3.5.1)                
##  tibble         1.4.2      2018-01-22 [1] CRAN (R 3.5.1)                
##  tidyr        * 0.8.2      2018-10-28 [1] CRAN (R 3.5.1)                
##  tidyselect     0.2.5      2018-10-11 [1] CRAN (R 3.5.1)                
##  usethis        1.4.0.9000 2018-09-29 [1] Github (r-lib/usethis@1e3c6a6)
##  utf8           1.1.4      2018-05-24 [1] CRAN (R 3.5.1)                
##  withr          2.1.2      2018-03-15 [1] CRAN (R 3.5.1)                
##  xfun           0.4        2018-10-23 [1] CRAN (R 3.5.1)                
##  yaml           2.2.0      2018-07-25 [1] CRAN (R 3.5.1)                
## 
## [1] C:/Users/Italo/Documents/R/win-library/3.5
## [2] C:/Program Files/R/R-3.5.1/library&lt;/code&gt;&lt;/pre&gt;

      </content:encoded>
    </item>
    
    <item>
      <title>O conceito tidy data</title>
      <link>/o-conceito-tidy-data/</link>
      <pubDate>Sat, 30 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/o-conceito-tidy-data/</guid>
      <description>A ideia central desse post é bem simples: dados bem organizados valem a pena e economizam seu tempo!
Em minha primeira iniciação científica (quando comecei a trabalhar com o R), propus um experimento para avaliar a eficiência de 2 inseticidas para o controle de uma praga que ataca mudas de eucalipto (Cegatta and Villegas 2013). Eu estava no primeiro ano da faculdade, sabia muito pouco de Excel e nada de R.</description>
      <content:encoded>
        


&lt;p&gt;A ideia central desse post é bem simples: dados bem organizados valem a pena e economizam seu tempo!&lt;/p&gt;
&lt;p&gt;Em minha primeira iniciação científica (quando comecei a trabalhar com o R), propus um experimento para avaliar a eficiência de 2 inseticidas para o controle de uma praga que ataca mudas de eucalipto &lt;span class=&#34;citation&#34;&gt;(Cegatta and Villegas &lt;a href=&#34;#ref-cegatta_eficiencia_2013&#34;&gt;2013&lt;/a&gt;)&lt;/span&gt;. Eu estava no primeiro ano da faculdade, sabia muito pouco de Excel e nada de R.&lt;/p&gt;
&lt;p&gt;Neste post vou retomar os dados brutos desse experimento e organizá-los de uma forma eficiente, pois na época não o fiz.&lt;/p&gt;
&lt;p&gt;No experimento tivemos 5 coletas sucessivas de dados para acompanhar a evolução do número de galhas em mudas de eucalipto com diferentes tratamentos de inseticidas. Galha é uma reação da planta que tem diversas causas, nesse caso específico, é devido à postura de uma vespa em busca de abrigo para seus ovos.&lt;/p&gt;
&lt;br&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:fig-base&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;http://i.imgur.com/JsYqVH7.png&#34; alt=&#34;Dados brutos. Como não organizar seu banco de dados.&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Dados brutos. Como não organizar seu banco de dados.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A estrutura do banco de dados que obtive no fim do experimento está apresentada na Figura &lt;a href=&#34;#fig:fig-base&#34;&gt;1&lt;/a&gt;. Para a época, foi o melhor que consegui fazer e pela inexperiência cometi os seguintes erros:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Uso de caracteres especiais.&lt;/li&gt;
&lt;li&gt;Uso de espaço entre as palavras.&lt;/li&gt;
&lt;li&gt;Células mescladas.&lt;/li&gt;
&lt;li&gt;Observações (Nº de galhas no pecíolo, nervura e caule) organizadas em colunas.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;O uso de caracteres especiais não é recomentado em muitas ocasiões, essa dica vale para quase tudo que envolve computação. O mesmo se aplica para os espaços entre as palavras, mas podemos ser mais flexíveis neste caso. Mesclar uma célula será o seu maior problema em uma planilha eletrônica, cuidado com isso! Recomendo mesclar células em raríssimas exceções, como formatação de tabelas em Word ou PowerPoint. O meu último erro foi o maior deles, confundi observações com variáveis. Em minha defesa, o inexperiente Ítalo tentou organizar os dados em um layout de fácil visualização. Veja que é fácil acompanhar a evolução das galhas ao longo do tempo. Para a percepção humana, organização de dados no formato longitudinal é muito prática e rápida. Mas temos que pensar em como o computador trabalha e como ele faz todos os cálculos que precisamos. No fim, eu consegui fazer tudo que eu queria com os dados nesse formato, mas acredite, foi sofrível e muito ineficiente.&lt;/p&gt;
&lt;p&gt;O conceito tidy data está muito bem descrito por &lt;span class=&#34;citation&#34;&gt;Wickham (&lt;a href=&#34;#ref-wickham_tidy_2014&#34;&gt;2014&lt;/a&gt;)&lt;/span&gt;, onde ele apresenta o pacote &lt;a href=&#34;https://cran.r-project.org/web/packages/tidyr/index.html&#34;&gt;tidyr&lt;/a&gt; que contém uma gama de funções muito úteis para esse fim. Wickham também dedicou um capítulo específico sobre esse conceito em seu &lt;a href=&#34;http://r4ds.had.co.nz/&#34;&gt;livro&lt;/a&gt; &lt;span class=&#34;citation&#34;&gt;(Grolemund and Wickham &lt;a href=&#34;#ref-grolemund_r_2016&#34;&gt;2016&lt;/a&gt;)&lt;/span&gt;. Por tidy data, entendemos que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variáveis estão dispostas em colunas.&lt;/li&gt;
&lt;li&gt;Observações estão dispostas em linhas.&lt;/li&gt;
&lt;li&gt;Os valores atribuídos às variáveis em cada observação formam a tabela.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Agora vamos aplicar esse conceito ao meu banco de dados. Podemos fazer isso de várias formas, vai depender de como iremos entrar com os dados no R. Vou mostrar 2 métodos que penso ser os mais práticos e genéricos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Pacotes utilizados neste post
if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readxl, dplyr, tidyr, httr)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;metodo-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Método 1&lt;/h1&gt;
&lt;p&gt;Partindo da base de dados original, fiz uma pequena alteração separando em cada aba as coletas que foram realizadas (Figura &lt;a href=&#34;#fig:fig-entrada1&#34;&gt;2&lt;/a&gt;).&lt;/p&gt;
&lt;br&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:fig-entrada1&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;http://i.imgur.com/3AsFpmQ.png&#34; alt=&#34;Modificação do banco de dados original para ser importado no R. Divisão das coletas em abas.&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  2: Modificação do banco de dados original para ser importado no R. Divisão das coletas em abas.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Como são apenas 4 abas, podemos importá-las usando um comando por linha.&lt;/p&gt;
&lt;p&gt;Mas e se tivéssemos 50 coletas? Deu preguiça. Vamos melhorar a importação e deixar o computador trabalhar por nós.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Faz o mesmo que os comandos anteriores, mas utiliza um ´for´ para repetir 
# o precesso em todas as abas. 
dados1 &amp;lt;- list()

for(i in 1:5) {
 dados1[[paste0(&amp;quot;c&amp;quot;,i)]] &amp;lt;- read_excel(base_vespa1, paste0(&amp;quot;Coleta&amp;quot;, i))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora precisamos de um fator (nº da coleta) para diferenciarmos cada medição e colocar tudo em um único data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Cria um fator para diferenciar as medições
for(i in names(dados1)) {
  dados1[[i]][ , &amp;quot;Coleta&amp;quot;] = i  
}

dados1 &amp;lt;- bind_rows(dados1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como minhas análises vão considerar o local da galha como variável, devo organizar &lt;em&gt;Peciolo&lt;/em&gt;, &lt;em&gt;Nervura&lt;/em&gt; e &lt;em&gt;Caule&lt;/em&gt; em uma só coluna denominada &lt;em&gt;Local&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Transforma as columas ´Peciolo´, ´Nervura´ e ´Caule´ em uma só coluna
# denominada ´Local´.
dados1 &amp;lt;- gather(dados1, &amp;quot;Local&amp;quot;, &amp;quot;Galhas&amp;quot;, c(Peciolo, Nervura, Caule))

dados1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,100 x 5
##    Tratamento Individuo Coleta Local   Galhas
##    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 Actara d1          1 c1     Peciolo      1
##  2 Actara d1          2 c1     Peciolo     NA
##  3 Actara d1          3 c1     Peciolo     NA
##  4 Actara d1          4 c1     Peciolo     NA
##  5 Actara d1          5 c1     Peciolo     NA
##  6 Actara d1          6 c1     Peciolo     NA
##  7 Actara d1          7 c1     Peciolo     NA
##  8 Actara d1          8 c1     Peciolo     NA
##  9 Actara d1          9 c1     Peciolo     NA
## 10 Actara d1         10 c1     Peciolo     NA
## # ... with 2,090 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;metodo-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Método 2&lt;/h1&gt;
&lt;p&gt;Nesse método, não fiz nenhuma grande alteração na base de dados. Apenas corrigi o nome das colunas com um fator que indica o número da coleta e em seguida o local (Figura &lt;a href=&#34;#fig:fig-entrada2&#34;&gt;3&lt;/a&gt;).&lt;/p&gt;
&lt;br&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:fig-entrada2&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;http://i.imgur.com/YGY8pvV.png&#34; alt=&#34;Modificação do banco de dados original para ser importado no R. Alteração dos nomes das colunas.&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  3: Modificação do banco de dados original para ser importado no R. Alteração dos nomes das colunas.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Vamos agora importar e organizar os dados no mesmo formato que no método 1, mas com um código bem mais simples.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Lê os dados, transforma as variáveis que estão em várias colunas em uma só e
# Separa as informações que estão na coluna ´Local´ em duas colunas (variáveis)
# ´Coleta´ e ´Local´.
dados2 &amp;lt;- read_excel(base_vespa2) %&amp;gt;%
  gather(&amp;quot;Local&amp;quot;, &amp;quot;Galhas&amp;quot;, 3:dim(.)[2]) %&amp;gt;%
  separate(Local, c(&amp;quot;Coleta&amp;quot;, &amp;quot;Local&amp;quot;))

dados2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,100 x 5
##    Tratamento Individuo Coleta Local   Galhas
##    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 Actara d1          1 1      Peciolo      1
##  2 Actara d1          2 1      Peciolo     NA
##  3 Actara d1          3 1      Peciolo     NA
##  4 Actara d1          4 1      Peciolo     NA
##  5 Actara d1          5 1      Peciolo     NA
##  6 Actara d1          6 1      Peciolo     NA
##  7 Actara d1          7 1      Peciolo     NA
##  8 Actara d1          8 1      Peciolo     NA
##  9 Actara d1          9 1      Peciolo     NA
## 10 Actara d1         10 1      Peciolo     NA
## # ... with 2,090 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com os dados nesse formato fica incrivelmente fácil fazer gráficos, resumos e testes. Vou abordar esses pontos no futuro em outros posts.&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - Session info ----------------------------------------------------------
##  setting  value                       
##  version  R version 3.5.1 (2018-07-02)
##  os       Windows 10 x64              
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  ctype    Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2018-12-30                  
## 
## - Packages --------------------------------------------------------------
##  package     * version    date       lib source                        
##  assertthat    0.2.0      2017-04-11 [1] CRAN (R 3.5.1)                
##  backports     1.1.2      2017-12-13 [1] CRAN (R 3.5.0)                
##  base64enc     0.1-3      2015-07-28 [1] CRAN (R 3.5.0)                
##  bindr         0.1.1      2018-03-13 [1] CRAN (R 3.5.1)                
##  bindrcpp      0.2.2      2018-03-29 [1] CRAN (R 3.5.1)                
##  blogdown      0.9        2018-10-23 [1] CRAN (R 3.5.2)                
##  bookdown      0.9        2018-12-21 [1] CRAN (R 3.5.2)                
##  callr         3.0.0      2018-08-24 [1] CRAN (R 3.5.1)                
##  cellranger    1.1.0      2016-07-27 [1] CRAN (R 3.5.1)                
##  cli           1.0.1      2018-09-25 [1] CRAN (R 3.5.1)                
##  crayon        1.3.4      2017-09-16 [1] CRAN (R 3.5.1)                
##  curl          3.2        2018-03-28 [1] CRAN (R 3.5.1)                
##  desc          1.2.0      2018-05-01 [1] CRAN (R 3.5.1)                
##  devtools      2.0.1      2018-10-26 [1] CRAN (R 3.5.1)                
##  digest        0.6.18     2018-10-10 [1] CRAN (R 3.5.1)                
##  dplyr       * 0.7.8      2018-11-10 [1] CRAN (R 3.5.1)                
##  evaluate      0.12       2018-10-09 [1] CRAN (R 3.5.1)                
##  fansi         0.4.0      2018-10-05 [1] CRAN (R 3.5.1)                
##  fs            1.2.6      2018-08-23 [1] CRAN (R 3.5.1)                
##  glue          1.3.0      2018-07-17 [1] CRAN (R 3.5.1)                
##  highr         0.7        2018-06-09 [1] CRAN (R 3.5.1)                
##  htmltools     0.3.6      2017-04-28 [1] CRAN (R 3.5.1)                
##  httr        * 1.3.1      2017-08-20 [1] CRAN (R 3.5.1)                
##  knitr         1.20       2018-02-20 [1] CRAN (R 3.5.1)                
##  magrittr      1.5        2014-11-22 [1] CRAN (R 3.5.1)                
##  memoise       1.1.0      2017-04-21 [1] CRAN (R 3.5.1)                
##  pacman      * 0.5.0      2018-10-22 [1] CRAN (R 3.5.1)                
##  pillar        1.3.0      2018-07-14 [1] CRAN (R 3.5.1)                
##  pkgbuild      1.0.2      2018-10-16 [1] CRAN (R 3.5.1)                
##  pkgconfig     2.0.2      2018-08-16 [1] CRAN (R 3.5.1)                
##  pkgload       1.0.2      2018-10-29 [1] CRAN (R 3.5.1)                
##  prettyunits   1.0.2      2015-07-13 [1] CRAN (R 3.5.1)                
##  processx      3.2.0      2018-08-16 [1] CRAN (R 3.5.1)                
##  ps            1.2.1      2018-11-06 [1] CRAN (R 3.5.1)                
##  purrr         0.2.5      2018-05-29 [1] CRAN (R 3.5.1)                
##  R6            2.3.0      2018-10-04 [1] CRAN (R 3.5.1)                
##  Rcpp          1.0.0      2018-11-07 [1] CRAN (R 3.5.1)                
##  readxl      * 1.1.0      2018-04-20 [1] CRAN (R 3.5.1)                
##  remotes       2.0.2      2018-10-30 [1] CRAN (R 3.5.1)                
##  rlang         0.3.0.1    2018-10-25 [1] CRAN (R 3.5.1)                
##  rmarkdown     1.10       2018-06-11 [1] CRAN (R 3.5.1)                
##  rprojroot     1.3-2      2018-01-03 [1] CRAN (R 3.5.1)                
##  sessioninfo   1.1.1      2018-11-05 [1] CRAN (R 3.5.1)                
##  stringi       1.2.4      2018-07-20 [1] CRAN (R 3.5.1)                
##  stringr       1.3.1      2018-05-10 [1] CRAN (R 3.5.1)                
##  testthat      2.0.1      2018-10-13 [1] CRAN (R 3.5.1)                
##  tibble        1.4.2      2018-01-22 [1] CRAN (R 3.5.1)                
##  tidyr       * 0.8.2      2018-10-28 [1] CRAN (R 3.5.1)                
##  tidyselect    0.2.5      2018-10-11 [1] CRAN (R 3.5.1)                
##  usethis       1.4.0.9000 2018-09-29 [1] Github (r-lib/usethis@1e3c6a6)
##  utf8          1.1.4      2018-05-24 [1] CRAN (R 3.5.1)                
##  withr         2.1.2      2018-03-15 [1] CRAN (R 3.5.1)                
##  xfun          0.4        2018-10-23 [1] CRAN (R 3.5.1)                
##  yaml          2.2.0      2018-07-25 [1] CRAN (R 3.5.1)                
## 
## [1] C:/Users/Italo/Documents/R/win-library/3.5
## [2] C:/Program Files/R/R-3.5.1/library&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;referencias&#34; class=&#34;section level1 unnumbered&#34;&gt;
&lt;h1&gt;Referências&lt;/h1&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-cegatta_eficiencia_2013&#34;&gt;
&lt;p&gt;Cegatta, Italo Ramos, and Cristian Villegas. 2013. “Eficiência de dois inseticidas sistêmicos no controle de Leptocybe invasa em mudas de Eucalyptus camaldulensis.” &lt;em&gt;Revista Instituto Florestal&lt;/em&gt; 25 (2). &lt;a href=&#34;iflorestal.sp.gov.br/files/2014/05/RIF25-2{\_}215-221.pdf&#34; class=&#34;uri&#34;&gt;iflorestal.sp.gov.br/files/2014/05/RIF25-2{\_}215-221.pdf&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-grolemund_r_2016&#34;&gt;
&lt;p&gt;Grolemund, Garrett, and Hadley Wickham. 2016. &lt;em&gt;R for Data Science&lt;/em&gt;. O’Reilly Media. &lt;a href=&#34;http://r4ds.had.co.nz/&#34; class=&#34;uri&#34;&gt;http://r4ds.had.co.nz/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-wickham_tidy_2014&#34;&gt;
&lt;p&gt;Wickham, Hadley. 2014. “Tidy data.” &lt;em&gt;The Journal of Statistical Software&lt;/em&gt; 59 (10). &lt;a href=&#34;http://www.jstatsoft.org/v59/i10/&#34; class=&#34;uri&#34;&gt;http://www.jstatsoft.org/v59/i10/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </content:encoded>
    </item>
    
  </channel>
</rss>
