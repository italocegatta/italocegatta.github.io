<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dplyr on Ítalo Cegatta</title>
    <link>/tags/dplyr/</link>
    <description>Recent content in Dplyr on Ítalo Cegatta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Sat, 08 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/dplyr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gráficos com dimensão espacial e temporal</title>
      <link>/graficos-com-dimensao-espacial-e-temporal/</link>
      <pubDate>Sat, 08 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/graficos-com-dimensao-espacial-e-temporal/</guid>
      <description>O post de hoje é sobre visualização de dados com dimensão espacial e temporal. Basicamente são gráficos que têm uma representação geográfica associada a informações que variam no tempo. Este tipo de análise é comum no meu dia a dia e por isso resolvi deixar 3 alternativas resgistradas aqui. O contexto que iremos abordar está relacionado ao banco de dados de focos de incêndios registrados pelo INPE no Programa Queimadas Monitoramento por Satélites.</description>
    </item>
    
    <item>
      <title>Web scraping: dados de páginas da internet na palma da sua mão</title>
      <link>/web-scraping-dados-de-paginas-da-internet-na-palma-da-sua-mao/</link>
      <pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/web-scraping-dados-de-paginas-da-internet-na-palma-da-sua-mao/</guid>
      <description>Você já precisou copiar na mão uma informação de texto, valor ou tabela de uma pagina web? Pelo menos no meu trabalho isto é muito comum. Por mais que os dados estejam lá site, eles nunca estão disponíveis todos juntos e no formato que queremos, parece que sacanagem. Diante disto, o objetivo deste post é mostrar como podemos utilizar o R para coletar dados de uma página web e esquecer o famooooso ctrl+c/ctrl+v.</description>
    </item>
    
    <item>
      <title>Como um cientista de dados pesquisa o carro que quer comprar?</title>
      <link>/como-um-cientista-de-dados-pesquisa-o-carro-que-quer-comprar/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/como-um-cientista-de-dados-pesquisa-o-carro-que-quer-comprar/</guid>
      <description>&lt;p&gt;Estou naquela parte da vida em que se planeja comprar um carro. Como eu sou, acima de todos os sonhos, pão duro, decidir qual marca, modelo, versão e ano do veículo não vai ser fácil. Pensando nisso resolvi escrever um pacote no R para me ajudar a tomar esta decisão. O objetivo deste post é apresentar o pacote e as funções que auxiliam na coleta das informações da tabela &lt;a href=&#34;http://veiculos.fipe.org.br/&#34;&gt;FIPE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para aqueles que já passaram pela etapa de compra ou venda de um carro, provavelmente já consultaram a famosa tabela. Nas palavras do próprio site da FIPE:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Tabela Fipe expressa preços médios de veículos no mercado nacional, servindo apenas como um parâmetro para negociações ou avaliações. Os preços efetivamente praticados variam em função da região, conservação, cor, acessórios ou qualquer outro fator que possa influenciar as condições de oferta e procura por um veículo específico.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A motivação para este pacote foi exclusivamente pessoal e por isso a utilização das funções está bastante restrita. Por isso, se alguém quiser ajudar no desenvolvimento do pacote é só chegar e mandar um &lt;a href=&#34;https://github.com/italocegatta/fipe&#34;&gt;Pull Request&lt;/a&gt; no Github, contribuições serão muito bem vindas.&lt;/p&gt;
&lt;p&gt;Primeiro vou mostrar as funções e o workflow idealizado para o pacote. Queremos saber, por enquanto, o preço atual de uma BMW X6 M ano 2015. O primeiro passo é definir o mês de referência que se deseja consultar o preço do veículo. A FIPE disponibiliza os valores consolidados desde janeiro de 2001.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(dplyr, purrr, stringr, tidyr, forcats, ggplot2)
pacman::p_load_gh(&amp;quot;italocegatta/fipe&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fipe_referencia()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 199 x 2
##      data_ref cod_ref
##        &amp;lt;date&amp;gt;   &amp;lt;int&amp;gt;
##  1 2017-07-01     215
##  2 2017-06-01     214
##  3 2017-05-01     212
##  4 2017-04-01     211
##  5 2017-03-01     207
##  6 2017-02-01     205
##  7 2017-01-01     202
##  8 2016-12-01     200
##  9 2016-11-01     198
## 10 2016-10-01     197
## # ... with 189 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como o objetivo saber o preço atual do veículo, pegaremos o código &lt;code&gt;215&lt;/code&gt; (mês em que escrevo este post). Agora vamos procurar o código da marca BMW. Note que precisamos inserir o código do mês de referência para consultar a marca, essa é uma exigência do site da FIPE. Lembrando que o pacote não possui nenhum banco de dados armazenado, todas as informações são consultadas no site da tabela FIPE no ato da execução da função.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fipe_marca(cod_ref = 215)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 87 x 2
##           marca cod_marca
##           &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;
##  1        Acura         1
##  2       Agrale         2
##  3   Alfa Romeo         3
##  4       AM Gen         4
##  5  Asia Motors         5
##  6 ASTON MARTIN       189
##  7         Audi         6
##  8          BMW         7
##  9          BRM         8
## 10        Buggy         9
## # ... with 77 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por sorte, o código &lt;code&gt;7&lt;/code&gt; da BMW aparece logo nos primeiros valores por ordem alfabética. Podemos seguir para o próximo passo e pegar o código do modelo que queremos. A consulta a baixo mostras que a BMW tem 221 modelos cadastrados na tabela FIPE. Como já definimos o modelo que queremos, vamos filtrar do dataframe para enxergar o código do modelo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(bmw &amp;lt;- fipe_modelo(cod_ref = 215, cod_marca = 7))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 221 x 2
##                                    modelo cod_modelo
##                                     &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;
##  1              116iA 1.6 TB 16V 136cv 5p       6146
##  2                 118iA 2.0 16V 136cv 3p       5576
##  3                 118iA 2.0 16V 136cv 5p       4960
##  4         118iA Full 1.6 TB 16V 170cv 5p       6147
##  5 118iA/ Urban/Sport 1.6 TB 16V 170cv 5p       5923
##  6           120i 2.0 16V 150cv/ 156cv 5p        152
##  7          120iA 2.0 16V 150cv/ 156cv 5p        153
##  8                 120iA 2.0 16V 156cv 3p       4700
##  9          120iA Cabrio 2.0 16V 156cv 2p       4683
## 10    120iA Sport 2.0 ActiveFlex 16V Aut.       7178
## # ... with 211 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(bmw, str_detect(modelo, &amp;quot;X6 M&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##                              modelo cod_modelo
##                               &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;
## 1 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.       5189&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pronto, agora já sabemos que o código que a FIPE dá para o modelo X6 M é o &lt;code&gt;5189&lt;/code&gt;. Teríamos tudo pronto, se não fosse o padrão que a FIPE adota no campo&lt;code&gt;ano&lt;/code&gt;, onde o ano do modelo é acrescido de um código de combustível. A diferenciação para os “0 km” é feita na mesma coluna, utilizando a identificação 32000-*. Enfim, contornando as falhas estruturais no banco de dados deles, agora sabemos os códigos que identificam o ano do modelo, bem como o carro 0 km. Como eu optei por procurar o valor do carro 2015, iremos considerar o código &lt;code&gt;2015-1&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fipe_ano(cod_ref = 215, cod_marca = 7, cod_modelo = 5189)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 2
##     ano cod_ano
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;
## 1  0 km 32000-1
## 2  2017  2017-1
## 3  2016  2016-1
## 4  2015  2015-1
## 5  2014  2014-1
## 6  2013  2013-1
## 7  2012  2012-1
## 8  2011  2011-1
## 9  2010  2010-1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora sim vamos ao bendito preço da BMW!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fipe(cod_ref = 215, cod_marca = 7, cod_modelo = 5189, cod_ano = &amp;quot;2015-1&amp;quot;) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 1
## Variables: 7
## $ cod_fipe    &amp;lt;chr&amp;gt; &amp;quot;009144-8&amp;quot;
## $ ref         &amp;lt;date&amp;gt; 2017-07-01
## $ marca       &amp;lt;chr&amp;gt; &amp;quot;BMW&amp;quot;
## $ modelo      &amp;lt;chr&amp;gt; &amp;quot;X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.&amp;quot;
## $ ano         &amp;lt;chr&amp;gt; &amp;quot;2015&amp;quot;
## $ combustivel &amp;lt;chr&amp;gt; &amp;quot;Gasolina&amp;quot;
## $ valor       &amp;lt;dbl&amp;gt; 368603&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Achamos o preço do carro que eu queria. Apenas R$ 368 mil. Uma pechincha. Obviamente, saber quanto vale uma BMW X6 não faz diferênça alguma no meu dia. Um abraço pra quem tem condições de comprar um carro desse sem precisar vender um rim.&lt;/p&gt;
&lt;p&gt;Agora que já conhecemos as funções e o fluxo para consultar o valor dos carros, vamos ampliar a consulta e justificar as horas que passamos aprendendo a programar. Já sabemos o preço do X6 M em julho/2017, mas e nos meses anteriores? Como será que foi a depreciação média do carro usado nos últimos meses? E os outros modelos X6, quanto será que estão valendo?&lt;/p&gt;
&lt;p&gt;Digamos que, agora, estas questões podem ser respondidas de forma bem rápida. Eu mostro.&lt;/p&gt;
&lt;p&gt;Vamos retomar os passos, mas agora no nível hard. Vou analisar o comportamento dos preços desde 2009. Para deixar a consulta mais rápida, serão considerados apenas 3 meses de referência por ano.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(base_marca &amp;lt;- fipe_referencia() %&amp;gt;%
  filter(data_ref %in% seq.Date(as.Date(&amp;quot;2009-01-01&amp;quot;), as.Date(&amp;quot;2017-07-01&amp;quot;), by = &amp;quot;4 months&amp;quot;)) %&amp;gt;%
  mutate(marca = map(cod_ref, fipe_marca)) %&amp;gt;%
  unnest() %&amp;gt;% 
  filter(marca == &amp;quot;BMW&amp;quot;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 26 x 4
##      data_ref cod_ref marca cod_marca
##        &amp;lt;date&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;
##  1 2017-05-01     212   BMW         7
##  2 2017-01-01     202   BMW         7
##  3 2016-09-01     196   BMW         7
##  4 2016-05-01     191   BMW         7
##  5 2016-01-01     187   BMW         7
##  6 2015-09-01     183   BMW         7
##  7 2015-05-01     179   BMW         7
##  8 2015-01-01     174   BMW         7
##  9 2014-09-01     170   BMW         7
## 10 2014-05-01     166   BMW         7
## # ... with 16 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notem que agora temos um dataframe com códigos de referência entre janeiro/2008 a maio/2017. Seguindo a análise, precisamos encontrar os códigos dos modelos X6.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(base_modelo &amp;lt;- mutate(base_marca, modelo = map2(cod_ref, cod_marca, fipe_modelo)) %&amp;gt;%
  unnest() %&amp;gt;% 
  filter(str_detect(modelo, &amp;quot;X6&amp;quot;))
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 82 x 6
##      data_ref cod_ref marca cod_marca                             modelo
##        &amp;lt;date&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;                              &amp;lt;chr&amp;gt;
##  1 2017-05-01     212   BMW         7  X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  2 2017-05-01     212   BMW         7   X6 XDRIVE 35i 3.0 306cv Bi-Turbo
##  3 2017-05-01     212   BMW         7   X6 XDRIVE 50i 4.4 407cv Bi-Turbo
##  4 2017-05-01     212   BMW         7 X6 XDRIVE 50i M Sport 4.4 Bi-Turbo
##  5 2017-01-01     202   BMW         7  X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  6 2017-01-01     202   BMW         7   X6 XDRIVE 35i 3.0 306cv Bi-Turbo
##  7 2017-01-01     202   BMW         7   X6 XDRIVE 50i 4.4 407cv Bi-Turbo
##  8 2017-01-01     202   BMW         7 X6 XDRIVE 50i M Sport 4.4 Bi-Turbo
##  9 2016-09-01     196   BMW         7  X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
## 10 2016-09-01     196   BMW         7   X6 XDRIVE 35i 3.0 306cv Bi-Turbo
## # ... with 72 more rows, and 1 more variables: cod_modelo &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O próximo passo é pegar, para cada versão, os diferentes anos de fabricação do carro. A função vai consultar os anos de fabricação que a FIPE consolidou para cada uma das 82 linhas (combinação entre modelo e mês de referência).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(base_consulta &amp;lt;- mutate(base_modelo, ano = pmap(list(cod_ref, cod_marca, cod_modelo), fipe_ano)) %&amp;gt;%
  unnest()
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 480 x 8
##      data_ref cod_ref marca cod_marca                            modelo
##        &amp;lt;date&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;                             &amp;lt;chr&amp;gt;
##  1 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  2 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  3 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  4 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  5 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  6 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  7 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  8 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  9 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
## 10 2017-05-01     212   BMW         7  X6 XDRIVE 35i 3.0 306cv Bi-Turbo
## # ... with 470 more rows, and 3 more variables: cod_modelo &amp;lt;int&amp;gt;,
## #   ano &amp;lt;chr&amp;gt;, cod_ano &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se na sua internet a função anterior demorou, prepara que a próxima vai demorar um tanto mais. Temos 480 requisições para fazer no site da FIPE em busca dos preços que queremos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(consulta &amp;lt;- mutate(
  base_consulta, 
  consulta = pmap(list(cod_ref, cod_marca, cod_modelo, cod_ano), fipe)
  )  %&amp;gt;%
  select(consulta) %&amp;gt;% 
  unnest() %&amp;gt;% 
  select(ref, modelo, ano, valor)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 480 x 4
##           ref                            modelo   ano  valor
##        &amp;lt;date&amp;gt;                             &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  0 km 644550
##  2 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2017 520193
##  3 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2016 475803
##  4 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2015 365088
##  5 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2014 317505
##  6 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2013 291749
##  7 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2012 231191
##  8 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2011 204481
##  9 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2010 193629
## 10 2017-05-01  X6 XDRIVE 35i 3.0 306cv Bi-Turbo  0 km 415744
## # ... with 470 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depois de 4 passos, temos o banco de dados desejado. Imagina coletar estes dados, na mão, pelo site oficial!&lt;/p&gt;
&lt;p&gt;Bom agora o pacote está apresentado. Pretendo fazer outros posts com estudos de casos mais específicos, portanto vou deixar apenas um gráfico que resume a consulta que acabamos de fazer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;consulta %&amp;gt;%
  mutate(ano = fct_relevel(ano, &amp;quot;0 km&amp;quot;, after = Inf)) %&amp;gt;% 
  ggplot(aes(ref, valor, color =  ano, group = ano)) +
    geom_line(color = &amp;quot;grey30&amp;quot;) +
    geom_point(size = 3) +
    facet_wrap(~modelo) +
    labs(
      x = &amp;quot;Mês de refêrencia&amp;quot;,
      y = &amp;quot;Valor (R$)&amp;quot;,
      color = &amp;quot;Ano do \nmodelo&amp;quot;
    ) +
    scale_y_continuous(breaks = seq(0, 700000, 50000), labels = scales::dollar_format(prefix = NULL, big.mark = &amp;quot;.&amp;quot;)) +
    scale_x_date(date_breaks = &amp;quot;1 year&amp;quot;, date_labels = &amp;quot;%b/%y&amp;quot;) +
    scale_color_viridis_d() +
    theme_bw() +
    theme(legend.position = &amp;quot;top&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-07-29-como-um-cientista-de-dados-pesquisa-o-carro-que-quer-comprar_files/figure-html/plot_fipe-1.png&#34; width=&#34;4800&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contactar por Email.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-07-29                  
## 
##  package     * version    date       source                            
##  assertthat    0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports     1.1.0      2017-05-22 CRAN (R 3.3.3)                    
##  base        * 3.3.3      2017-03-06 local                             
##  bindr         0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp    * 0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown      0.0.25     2017-03-23 Github (rstudio/blogdown@1c10d16) 
##  bookdown      0.4        2017-05-20 CRAN (R 3.3.3)                    
##  colorspace    1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  curl          2.8.1      2017-07-21 CRAN (R 3.3.3)                    
##  datasets    * 3.3.3      2017-03-06 local                             
##  devtools      1.13.2     2017-06-02 CRAN (R 3.3.3)                    
##  digest        0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr       * 0.7.2      2017-07-20 CRAN (R 3.3.3)                    
##  evaluate      0.10.1     2017-06-24 CRAN (R 3.3.3)                    
##  fipe        * 0.0.0.9000 2017-07-29 local                             
##  forcats     * 0.2.0      2017-01-23 CRAN (R 3.3.2)                    
##  ggplot2     * 2.2.1.9000 2017-07-15 Github (tidyverse/ggplot2@45853c7)
##  glue          1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  graphics    * 3.3.3      2017-03-06 local                             
##  grDevices   * 3.3.3      2017-03-06 local                             
##  grid          3.3.3      2017-03-06 local                             
##  gtable        0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  hms           0.3        2016-11-22 CRAN (R 3.3.2)                    
##  htmltools     0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  httr          1.2.1      2016-07-03 CRAN (R 3.3.2)                    
##  jsonlite      1.5        2017-06-01 CRAN (R 3.3.3)                    
##  knitr         1.16       2017-05-18 CRAN (R 3.3.3)                    
##  lazyeval      0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  lubridate     1.6.0      2016-09-13 CRAN (R 3.3.2)                    
##  magrittr      1.5        2014-11-22 CRAN (R 3.3.2)                    
##  memoise       1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods       3.3.3      2017-03-06 local                             
##  munsell       0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  pacman      * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  pkgconfig     2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr          1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  purrr       * 0.2.2.2    2017-05-11 CRAN (R 3.3.3)                    
##  R6            2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  Rcpp          0.12.12    2017-07-15 CRAN (R 3.3.3)                    
##  readr         1.1.1      2017-05-16 CRAN (R 3.3.3)                    
##  rlang         0.1.1      2017-05-18 CRAN (R 3.3.3)                    
##  rmarkdown     1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot     1.2        2017-01-16 CRAN (R 3.3.3)                    
##  scales        0.4.1.9002 2017-07-15 Github (hadley/scales@6db7b6f)    
##  stats       * 3.3.3      2017-03-06 local                             
##  stringi       1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr     * 1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble        1.3.3      2017-05-28 CRAN (R 3.3.3)                    
##  tidyr       * 0.6.3      2017-05-15 CRAN (R 3.3.3)                    
##  tools         3.3.3      2017-03-06 local                             
##  utils       * 3.3.3      2017-03-06 local                             
##  viridisLite   0.2.0      2017-03-24 CRAN (R 3.3.3)                    
##  withr         1.0.2      2016-06-20 CRAN (R 3.3.3)                    
##  yaml          2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Gráficos com dimensão espacial e temporal</title>
      <link>/graficos-com-dimensao-espacial-e-temporal/</link>
      <pubDate>Sat, 08 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/graficos-com-dimensao-espacial-e-temporal/</guid>
      <description>&lt;p&gt;O post de hoje é sobre visualização de dados com dimensão espacial e temporal. Basicamente são gráficos que têm uma representação geográfica associada a informações que variam no tempo. Este tipo de análise é comum no meu dia a dia e por isso resolvi deixar 3 alternativas resgistradas aqui. O contexto que iremos abordar está relacionado ao banco de dados de focos de incêndios registrados pelo INPE no &lt;a href=&#34;http://www.inpe.br/queimadas/situacao-atual&#34;&gt;Programa Queimadas Monitoramento por Satélites&lt;/a&gt;. O site é bem interessante e apresenta algumas estatísticas úteis sobre as queimadas na América do Sul e Brasil. Iremos trabalhar com a tabela que resume os focos de incêndios por ano e Estado brasileiro.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, sf, ggplot2, ggthemes, geofacet, gganimate, viridis, scales)
pacman::p_load_gh(&amp;quot;italocegatta/brmap&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O primeiro passo foi copiar os dados da página e organizá-los no formato &lt;a href=&#34;https://italocegatta.github.io/o-conceito-tidy-data/&#34;&gt;tidy&lt;/a&gt;. Poderíamos fazer uma análise exploratória dos dados, mas quero manter o foco em algo bem pontual: como mostrar os dados brutos de uma só vez? Ou seja, considerando a dimensão de tempo (ano), geografia (localização do estado) e variável resposta (focos) na mesma janela gráfica, de que forma poderíamos apresentar os dados?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;focos &amp;lt;- read_csv2(&amp;quot;https://raw.githubusercontent.com/italocegatta/italocegatta.github.io_source/master/content/dados/base_incendios.csv&amp;quot;)

focos&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 162 x 3
##    sigla   ano focos
##    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1    AC  2011    13
##  2    AL  2011   127
##  3    AM  2011   159
##  4    AP  2011     5
##  5    BA  2011   883
##  6    CE  2011    44
##  7    DF  2011     8
##  8    ES  2011    55
##  9    GO  2011   492
## 10    MA  2011   656
## # ... with 152 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos agora adicionar a referência espacial aos dados utilizando os polígonos do pacote &lt;a href=&#34;https://github.com/italocegatta/brmap&#34;&gt;brmap&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;estados_focos &amp;lt;-  focos %&amp;gt;% 
  left_join(brmap_estado, by = &amp;quot;sigla&amp;quot;)

estados_focos&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 162 x 6
##    sigla   ano focos cod_estado           estado          geometry
##    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;            &amp;lt;chr&amp;gt;  &amp;lt;simple_feature&amp;gt;
##  1    AC  2011    13         12             Acre &amp;lt;MULTIPOLYGON...&amp;gt;
##  2    AL  2011   127         27          Alagoas &amp;lt;MULTIPOLYGON...&amp;gt;
##  3    AM  2011   159         13         Amazonas &amp;lt;MULTIPOLYGON...&amp;gt;
##  4    AP  2011     5         16            Amapá &amp;lt;MULTIPOLYGON...&amp;gt;
##  5    BA  2011   883         29            Bahia &amp;lt;MULTIPOLYGON...&amp;gt;
##  6    CE  2011    44         23            Ceará &amp;lt;MULTIPOLYGON...&amp;gt;
##  7    DF  2011     8         53 Distrito Federal &amp;lt;MULTIPOLYGON...&amp;gt;
##  8    ES  2011    55         32   Espírito Santo &amp;lt;MULTIPOLYGON...&amp;gt;
##  9    GO  2011   492         52            Goiás &amp;lt;MULTIPOLYGON...&amp;gt;
## 10    MA  2011   656         21         Maranhão &amp;lt;MULTIPOLYGON...&amp;gt;
## # ... with 152 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A primeira abordagem vai utilizar o pacote &lt;a href=&#34;https://github.com/hafen/geofacet&#34;&gt;geofacet&lt;/a&gt;. Ele permite criarmos um grid de referência para orientar a função &lt;code&gt;facet_wrap&lt;/code&gt; de &lt;code&gt;ggplot2&lt;/code&gt;. O pacote já vem carregado com um grid do Brasil, o &lt;code&gt;br_grid1&lt;/code&gt;, mas você pode construir e utilizar seu próprio grid. Eu, particularmente, gosto desta representação pois é extramamente flexível e comporta uma infinidade de gráficos (linhas, pontos, barras…) e dimenções (color, shape, size…). O gráfico &lt;a href=&#34;#fig:focos-geofacet&#34;&gt;1&lt;/a&gt; está bem simples mas cumpre seu papel em facilitar a percepção da variação anual e dar uma noção da região espacial do Estado no Brasil.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(estados_focos, aes(ano, focos)) +
  geom_line() +
  facet_geo(~estado, grid = br_grid1) +
  labs(
    x = &amp;quot;Ano&amp;quot;,
    y = &amp;quot;Nº de focos de incêndios&amp;quot;
  ) +
  scale_x_continuous(breaks = 2011:2017, labels = 11:17) +
  scale_y_continuous(label = unit_format(unit = &amp;quot;k&amp;quot;, scale = 1e-3)) +
  theme_few()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:focos-geofacet&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2017-07-08-graficos-com-dimensao-espacial-e-temporal_files/figure-html/focos-geofacet-1.png&#34; alt=&#34;Representação em painel orientado utilizando linhas.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Representação em painel orientado utilizando linhas.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A segunda abordagem é relativamente simples e intuitiva. Construiremos um mapa temático utilizando o Nº de focos como escala de cor, mas organizado em um painel que tem como base o ano de registro. O gráfico &lt;a href=&#34;#fig:focos-facet&#34;&gt;2&lt;/a&gt; apela para a dimensão de cor e instantaneamente nos informa o estado mais crítico. Especificamente para esta análise ele este tipo de gráfico é muito apropriado.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(estados_focos) +
  geom_sf(aes(fill = focos), color = NA) +
  facet_wrap(~ano) +
  labs(fill = &amp;quot;Nº de focos de incêndios&amp;quot;) +
  scale_fill_viridis(label = unit_format(unit = &amp;quot;k&amp;quot;, scale = 1e-3)) +
  theme_bw() +
  theme(legend.position = &amp;quot;bottom&amp;quot;, legend.justification = &amp;quot;right&amp;quot;) +
  guides(fill = guide_colorbar(barwidth = 15, title.position = &amp;quot;top&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:focos-facet&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2017-07-08-graficos-com-dimensao-espacial-e-temporal_files/figure-html/focos-facet-1.png&#34; alt=&#34;Representação em painel utilizando cores.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  2: Representação em painel utilizando cores.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;E por fim, nossa terceira tentativa vai unificar os painéis do gráfico &lt;a href=&#34;#fig:focos-facet&#34;&gt;2&lt;/a&gt; em um gif animado. A limitação do gráfico é que muitas vezes nossos gráficos vão para documentos estáticos como PDF e Word, inviabilizando o gif.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(ggplot(estados_focos) +
  geom_sf(aes(fill = focos, frame = ano), color = NA) +
  ggtitle(&amp;quot;Ano:&amp;quot;) +
  labs(fill = &amp;quot;Nº de focos de incêndios&amp;quot;) +
  scale_fill_viridis(label = unit_format(unit = &amp;quot;k&amp;quot;, scale = 1e-3)) +
  theme_bw() +
  theme(legend.position = &amp;quot;bottom&amp;quot;, legend.justification = &amp;quot;right&amp;quot;) +
  guides(fill = guide_colorbar(barwidth = 15, title.position = &amp;quot;top&amp;quot;))
  ) %&amp;gt;% 
  gganimate()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;http://imgur.com/KoLpSsF&#34;&gt;&lt;img src=&#34;http://i.imgur.com/KoLpSsF.gif&#34; style=&#34;width:100%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contactar por Email.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-07-09                  
## 
##  package     * version    date       source                            
##  animation     2.5        2017-03-30 CRAN (R 3.3.3)                    
##  assertthat    0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports     1.1.0      2017-05-22 CRAN (R 3.3.3)                    
##  base        * 3.3.3      2017-03-06 local                             
##  base64enc     0.1-3      2015-07-28 CRAN (R 3.3.2)                    
##  bindr         0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp      0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown      0.0.25     2017-03-23 Github (rstudio/blogdown@1c10d16) 
##  bookdown      0.4        2017-05-20 CRAN (R 3.3.3)                    
##  brmap       * 0.0.2      2017-07-07 local                             
##  colorspace    1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  curl          2.7        2017-06-26 CRAN (R 3.3.3)                    
##  datasets    * 3.3.3      2017-03-06 local                             
##  DBI           0.7        2017-06-18 CRAN (R 3.3.3)                    
##  devtools      1.13.2     2017-06-02 CRAN (R 3.3.3)                    
##  digest        0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr       * 0.7.1      2017-06-22 CRAN (R 3.3.3)                    
##  evaluate      0.10       2016-10-11 CRAN (R 3.3.3)                    
##  geofacet    * 0.1.4      2017-06-20 CRAN (R 3.3.3)                    
##  gganimate   * 0.1.0.9000 2017-05-24 Github (dgrtwo/gganimate@bf82002) 
##  ggplot2     * 2.2.1.9000 2017-06-16 Github (tidyverse/ggplot2@398fc07)
##  ggthemes    * 3.4.0      2017-02-19 CRAN (R 3.3.3)                    
##  glue          1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  graphics    * 3.3.3      2017-03-06 local                             
##  grDevices   * 3.3.3      2017-03-06 local                             
##  grid          3.3.3      2017-03-06 local                             
##  gridExtra     2.2.1      2016-02-29 CRAN (R 3.3.3)                    
##  gtable        0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  highr         0.6        2016-05-09 CRAN (R 3.3.3)                    
##  hms           0.3        2016-11-22 CRAN (R 3.3.2)                    
##  htmltools     0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  knitr         1.16       2017-05-18 CRAN (R 3.3.3)                    
##  labeling      0.3        2014-08-23 CRAN (R 3.3.2)                    
##  lazyeval      0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  magrittr      1.5        2014-11-22 CRAN (R 3.3.2)                    
##  memoise       1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods       3.3.3      2017-03-06 local                             
##  munsell       0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  pacman      * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  pkgconfig     2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr          1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  R6            2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  Rcpp          0.12.11    2017-05-22 CRAN (R 3.3.3)                    
##  readr       * 1.1.1      2017-05-16 CRAN (R 3.3.3)                    
##  rlang         0.1.1      2017-05-18 CRAN (R 3.3.3)                    
##  rmarkdown     1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot     1.2        2017-01-16 CRAN (R 3.3.3)                    
##  scales      * 0.4.1      2016-11-09 CRAN (R 3.3.2)                    
##  sf          * 0.5-1      2017-06-23 CRAN (R 3.3.3)                    
##  stats       * 3.3.3      2017-03-06 local                             
##  stringi       1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr       1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble        1.3.3      2017-05-28 CRAN (R 3.3.3)                    
##  tools         3.3.3      2017-03-06 local                             
##  udunits2      0.13       2016-11-17 CRAN (R 3.3.2)                    
##  units         0.4-5      2017-06-15 CRAN (R 3.3.3)                    
##  utils       * 3.3.3      2017-03-06 local                             
##  viridis     * 0.4.0      2017-03-27 CRAN (R 3.3.3)                    
##  viridisLite * 0.2.0      2017-03-24 CRAN (R 3.3.3)                    
##  withr         1.0.2      2016-06-20 CRAN (R 3.3.3)                    
##  yaml          2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Web scraping: dados de páginas da internet na palma da sua mão</title>
      <link>/web-scraping-dados-de-paginas-da-internet-na-palma-da-sua-mao/</link>
      <pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/web-scraping-dados-de-paginas-da-internet-na-palma-da-sua-mao/</guid>
      <description>&lt;p&gt;Você já precisou copiar na mão uma informação de texto, valor ou tabela de uma pagina web? Pelo menos no meu trabalho isto é muito comum. Por mais que os dados estejam lá site, eles nunca estão disponíveis todos juntos e no formato que queremos, parece que sacanagem. Diante disto, o objetivo deste post é mostrar como podemos utilizar o R para coletar dados de uma página web e esquecer o famooooso &lt;em&gt;ctrl+c/ctrl+v&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos exemplificar o post utilizando o site do IBGE para saber quantos metros cúbicos de lenha de eucalipto foram produzidos em 2015 em cada estado brasileiro. De cara, se os dados não estiverem numa tabela pronta, você já espera ter que entrar em 27 páginas diferentes para pegar esta informação.&lt;/p&gt;
&lt;p&gt;Nosso ponto de partida é a página &lt;a href=&#34;http://www.ibge.gov.br/estadosat/&#34;&gt;States@&lt;/a&gt; do IBGE, que reúne diversas informações na escala estadual. Acessando a página podemos ver o código html por trás (utilize a tecla F12) e assim entender como a página está estruturada. Como queremos entrar nos Estados, podemos ver na Figura &lt;a href=&#34;#fig:pg1&#34;&gt;1&lt;/a&gt; que essa informação está abaixo do &lt;code&gt;id=&amp;quot;menu&amp;quot;&lt;/code&gt;. Note que ao passarmos o mouse sobre a linha &lt;code&gt;&amp;lt;div id=&amp;quot;menu&amp;quot;&amp;gt;&lt;/code&gt; o navegador identifica na página a localização do elemento e ainda nos informa o id CSS de rastreio, no caso &lt;code&gt;div#menu&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pg1&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;http://i.imgur.com/VjiEvCM.png&#34; alt=&#34;Página inicial do site.&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Página inicial do site.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Então já podemos começar a programar e desenhar o acesso aos dados. No R, cada página web é um objeto que precisa ser salvo na memória. Então, cada página é importante para ter os dados ou por ser uma etapa para conseguir os dados. A página inicial (&lt;code&gt;pg_raiz&lt;/code&gt;) contém os links para as páginas dos Estados, por isso precisamos acessá-la.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(purrr, dplyr, tidyr, stringr, rvest, ggplot2, viridis, scales, sf)
pacman::p_load_gh(&amp;quot;italocegatta/brmap&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url_raiz &amp;lt;- &amp;quot;http://www.ibge.gov.br/estadosat/&amp;quot;

pg_raiz &amp;lt;- read_html(url_raiz)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No objeto &lt;code&gt;posfixo_estados&lt;/code&gt; temos a parte do link que leva até a página de cada estado. Para ter o link completo, é só juntar com o link da página raiz.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;posfixo_estados &amp;lt;- html_node(pg_raiz, &amp;quot;div#menu&amp;quot;) %&amp;gt;% 
  html_children() %&amp;gt;%
  html_node(&amp;quot;a&amp;quot;) %&amp;gt;% 
  html_attr(&amp;quot;href&amp;quot;)

posfixo_estados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;perfil.php?sigla=ro&amp;quot; &amp;quot;perfil.php?sigla=ac&amp;quot; &amp;quot;perfil.php?sigla=am&amp;quot;
##  [4] &amp;quot;perfil.php?sigla=rr&amp;quot; &amp;quot;perfil.php?sigla=pa&amp;quot; &amp;quot;perfil.php?sigla=ap&amp;quot;
##  [7] &amp;quot;perfil.php?sigla=to&amp;quot; &amp;quot;perfil.php?sigla=ma&amp;quot; &amp;quot;perfil.php?sigla=pi&amp;quot;
## [10] &amp;quot;perfil.php?sigla=ce&amp;quot; &amp;quot;perfil.php?sigla=rn&amp;quot; &amp;quot;perfil.php?sigla=pb&amp;quot;
## [13] &amp;quot;perfil.php?sigla=pe&amp;quot; &amp;quot;perfil.php?sigla=al&amp;quot; &amp;quot;perfil.php?sigla=se&amp;quot;
## [16] &amp;quot;perfil.php?sigla=ba&amp;quot; &amp;quot;perfil.php?sigla=mg&amp;quot; &amp;quot;perfil.php?sigla=es&amp;quot;
## [19] &amp;quot;perfil.php?sigla=rj&amp;quot; &amp;quot;perfil.php?sigla=sp&amp;quot; &amp;quot;perfil.php?sigla=pr&amp;quot;
## [22] &amp;quot;perfil.php?sigla=sc&amp;quot; &amp;quot;perfil.php?sigla=rs&amp;quot; &amp;quot;perfil.php?sigla=ms&amp;quot;
## [25] &amp;quot;perfil.php?sigla=mt&amp;quot; &amp;quot;perfil.php?sigla=go&amp;quot; &amp;quot;perfil.php?sigla=df&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url_estados &amp;lt;- paste0(url_raiz, posfixo_estados)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos agora acessar às páginas de todos os Estados e armazenar no objeto &lt;code&gt;pg_estados&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pg_estados &amp;lt;- map(url_estados, read_html)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Navegando pela página de um estado qualquer, identificamos que queremos a informação contida no link &lt;em&gt;Extração Vegetal e Silvicultura 2015&lt;/em&gt;. Nesse caso, precisamos mais uma vez dos links que leva a esta página (para cada estado). Também é possível, tanto pelo R quanto pelo navegador, ver que esse link está na posição 68 da lista/tablela nomeada como &lt;code&gt;table.temas&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;posfixo_lenha &amp;lt;- map(
  pg_estados,
  ~html_node(.x, &amp;quot;table.temas&amp;quot;) %&amp;gt;% 
    html_children() %&amp;gt;%
    &amp;#39;[&amp;#39;(68) %&amp;gt;%
    html_node(&amp;quot;a&amp;quot;) %&amp;gt;% 
    html_attr(&amp;quot;href&amp;quot;)
  ) %&amp;gt;% 
  flatten_chr()

posfixo_lenha&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;temas.php?sigla=ro&amp;amp;tema=extracaovegetal2015&amp;quot;
##  [2] &amp;quot;temas.php?sigla=ac&amp;amp;tema=extracaovegetal2015&amp;quot;
##  [3] &amp;quot;temas.php?sigla=am&amp;amp;tema=extracaovegetal2015&amp;quot;
##  [4] &amp;quot;temas.php?sigla=rr&amp;amp;tema=extracaovegetal2015&amp;quot;
##  [5] &amp;quot;temas.php?sigla=pa&amp;amp;tema=extracaovegetal2015&amp;quot;
##  [6] &amp;quot;temas.php?sigla=ap&amp;amp;tema=extracaovegetal2015&amp;quot;
##  [7] &amp;quot;temas.php?sigla=to&amp;amp;tema=extracaovegetal2015&amp;quot;
##  [8] &amp;quot;temas.php?sigla=ma&amp;amp;tema=extracaovegetal2015&amp;quot;
##  [9] &amp;quot;temas.php?sigla=pi&amp;amp;tema=extracaovegetal2015&amp;quot;
## [10] &amp;quot;temas.php?sigla=ce&amp;amp;tema=extracaovegetal2015&amp;quot;
## [11] &amp;quot;temas.php?sigla=rn&amp;amp;tema=extracaovegetal2015&amp;quot;
## [12] &amp;quot;temas.php?sigla=pb&amp;amp;tema=extracaovegetal2015&amp;quot;
## [13] &amp;quot;temas.php?sigla=pe&amp;amp;tema=extracaovegetal2015&amp;quot;
## [14] &amp;quot;temas.php?sigla=al&amp;amp;tema=extracaovegetal2015&amp;quot;
## [15] &amp;quot;temas.php?sigla=se&amp;amp;tema=extracaovegetal2015&amp;quot;
## [16] &amp;quot;temas.php?sigla=ba&amp;amp;tema=extracaovegetal2015&amp;quot;
## [17] &amp;quot;temas.php?sigla=mg&amp;amp;tema=extracaovegetal2015&amp;quot;
## [18] &amp;quot;temas.php?sigla=es&amp;amp;tema=extracaovegetal2015&amp;quot;
## [19] &amp;quot;temas.php?sigla=rj&amp;amp;tema=extracaovegetal2015&amp;quot;
## [20] &amp;quot;temas.php?sigla=sp&amp;amp;tema=extracaovegetal2015&amp;quot;
## [21] &amp;quot;temas.php?sigla=pr&amp;amp;tema=extracaovegetal2015&amp;quot;
## [22] &amp;quot;temas.php?sigla=sc&amp;amp;tema=extracaovegetal2015&amp;quot;
## [23] &amp;quot;temas.php?sigla=rs&amp;amp;tema=extracaovegetal2015&amp;quot;
## [24] &amp;quot;temas.php?sigla=ms&amp;amp;tema=extracaovegetal2015&amp;quot;
## [25] &amp;quot;temas.php?sigla=mt&amp;amp;tema=extracaovegetal2015&amp;quot;
## [26] &amp;quot;temas.php?sigla=go&amp;amp;tema=extracaovegetal2015&amp;quot;
## [27] &amp;quot;temas.php?sigla=df&amp;amp;tema=extracaovegetal2015&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aqui, mais uma vez, será preciso juntar o &lt;em&gt;link&lt;/em&gt; específico de cada estado com a url da página raiz.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url_lenha &amp;lt;- paste0(url_raiz, posfixo_lenha)

pg_lenha &amp;lt;- map(url_lenha, read_html)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora, vamos dar um passo para trás e listar o nome dos Estados na ordem que as páginas são acessadas para podemos utilizar mais à frente.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lista_estados &amp;lt;- html_node(pg_raiz, &amp;quot;div#menu&amp;quot;) %&amp;gt;% 
  html_children() %&amp;gt;%
  html_node(&amp;quot;img&amp;quot;) %&amp;gt;%
  html_attr(&amp;quot;alt&amp;quot;)

lista_estados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Rondônia&amp;quot;            &amp;quot;Acre&amp;quot;                &amp;quot;Amazonas&amp;quot;           
##  [4] &amp;quot;Roraima&amp;quot;             &amp;quot;Pará&amp;quot;                &amp;quot;Amapá&amp;quot;              
##  [7] &amp;quot;Tocantins&amp;quot;           &amp;quot;Maranhão&amp;quot;            &amp;quot;Piauí&amp;quot;              
## [10] &amp;quot;Ceará&amp;quot;               &amp;quot;Rio Grande do Norte&amp;quot; &amp;quot;Paraíba&amp;quot;            
## [13] &amp;quot;Pernambuco&amp;quot;          &amp;quot;Alagoas&amp;quot;             &amp;quot;Sergipe&amp;quot;            
## [16] &amp;quot;Bahia&amp;quot;               &amp;quot;Minas Gerais&amp;quot;        &amp;quot;Espírito Santo&amp;quot;     
## [19] &amp;quot;Rio de Janeiro&amp;quot;      &amp;quot;São Paulo&amp;quot;           &amp;quot;Paraná&amp;quot;             
## [22] &amp;quot;Santa Catarina&amp;quot;      &amp;quot;Rio Grande do Sul&amp;quot;   &amp;quot;Mato Grosso do Sul&amp;quot; 
## [25] &amp;quot;Mato Grosso&amp;quot;         &amp;quot;Goiás&amp;quot;               &amp;quot;Distrito federal&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O próximo passo é extrair a tabela de informação de cada estado e posteriormente filtrar a informação que é de nosso interesse. Note que é neste momento que a programação se diferencia das atividades manuais: caso seu interesse seja por lenha de pinus, por exemplo, basta alterar uma palavra no código abaixo e ser feliz com o resultado em poucos segundos. Claro que é um exemplo hipotético, dificilmente alguém vai precisar desse código específico, mas o ponto está na capacidade de escrever seu próprio código e não precisar fazer o trabalho manual.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tabelas &amp;lt;- map(
  set_names(pg_lenha, lista_estados), 
  ~html_node(.x, &amp;quot;table#tabela_temas&amp;quot;) %&amp;gt;% 
  html_table() %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  rename(produto = X1, valor = X2, unidade = X3)
  )

qnt &amp;lt;- map_df(
  tabelas, 
  ~filter(.x, str_detect(produto, c(&amp;quot;Lenha de eucalipto&amp;quot;, &amp;quot;quantidade&amp;quot;))) %&amp;gt;% 
  &amp;#39;[[&amp;#39;(&amp;quot;valor&amp;quot;) 
  ) %&amp;gt;%
  gather(estado, volume) %&amp;gt;% 
  mutate(volume = as.numeric(str_replace_all(volume, &amp;quot;\\.&amp;quot;, &amp;quot;&amp;quot;)))

qnt &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 27 x 2
##       estado volume
##        &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
##  1  Rondônia    690
##  2      Acre     NA
##  3  Amazonas     NA
##  4   Roraima     NA
##  5      Pará     NA
##  6     Amapá     NA
##  7 Tocantins   2300
##  8  Maranhão 195428
##  9     Piauí 188724
## 10     Ceará     NA
## # ... with 17 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De certa forma já resolvemos o problema, a quantidade de lenha de eucalipto produzida em cada estado no ano de 2015 já está em nossas mãos. Mas vamos dar um passo além e visualizar isso num mapa. O pacote &lt;a href=&#34;https://github.com/italocegatta/brmap&#34;&gt;brmap&lt;/a&gt; possui os polígonos dos Estados brasileiros no formato &lt;code&gt;sf&lt;/code&gt;, o novo pacote para manupulação de objetos espaciais no R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qnt_mapa &amp;lt;- left_join(brmap_estado, qnt)

ggplot(qnt_mapa) +
  geom_sf(aes(fill = volume)) +
  labs(
    title = &amp;quot;Lenha de eucalipto - quantidade produzida em 2015&amp;quot;,
    subtitle = &amp;quot;IBGE Estados - Extração Vegetal e Silvicultura 2015&amp;quot;
  ) +
  scale_fill_viridis(
    Lenha~de~eucalipto~(m^3), 
    na.value = &amp;quot;grey90&amp;quot;,
    labels = function(x) format(x, big.mark = &amp;quot;.&amp;quot;, decimal.mark = &amp;quot;,&amp;quot;, scientific = FALSE)
  ) +
  theme_bw() +
  theme(legend.position = &amp;quot;bottom&amp;quot;) +
  guides(fill = guide_colorbar(barwidth = 30, title.position = &amp;quot;top&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-06-16-web-scraping-dados-de-paginas-da-internet-na-palma-da-sua-mao_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;4000&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contactar por Email.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-07-08                  
## 
##  package     * version    date       source                            
##  assertthat    0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports     1.1.0      2017-05-22 CRAN (R 3.3.3)                    
##  base        * 3.3.3      2017-03-06 local                             
##  bindr         0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp    * 0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown      0.0.25     2017-03-23 Github (rstudio/blogdown@1c10d16) 
##  bookdown      0.4        2017-05-20 CRAN (R 3.3.3)                    
##  brmap       * 0.0.2      2017-07-07 local                             
##  colorspace    1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  curl          2.7        2017-06-26 CRAN (R 3.3.3)                    
##  datasets    * 3.3.3      2017-03-06 local                             
##  DBI           0.7        2017-06-18 CRAN (R 3.3.3)                    
##  devtools      1.13.2     2017-06-02 CRAN (R 3.3.3)                    
##  digest        0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr       * 0.7.1      2017-06-22 CRAN (R 3.3.3)                    
##  evaluate      0.10       2016-10-11 CRAN (R 3.3.3)                    
##  ggplot2     * 2.2.1.9000 2017-06-16 Github (tidyverse/ggplot2@398fc07)
##  glue          1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  graphics    * 3.3.3      2017-03-06 local                             
##  grDevices   * 3.3.3      2017-03-06 local                             
##  grid          3.3.3      2017-03-06 local                             
##  gridExtra     2.2.1      2016-02-29 CRAN (R 3.3.3)                    
##  gtable        0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  highr         0.6        2016-05-09 CRAN (R 3.3.3)                    
##  htmltools     0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  httr          1.2.1      2016-07-03 CRAN (R 3.3.2)                    
##  knitr         1.16       2017-05-18 CRAN (R 3.3.3)                    
##  labeling      0.3        2014-08-23 CRAN (R 3.3.2)                    
##  lazyeval      0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  magrittr      1.5        2014-11-22 CRAN (R 3.3.2)                    
##  memoise       1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods       3.3.3      2017-03-06 local                             
##  munsell       0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  pacman      * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  pkgconfig     2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr          1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  purrr       * 0.2.2.2    2017-05-11 CRAN (R 3.3.3)                    
##  R6            2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  Rcpp          0.12.11    2017-05-22 CRAN (R 3.3.3)                    
##  rlang         0.1.1      2017-05-18 CRAN (R 3.3.3)                    
##  rmarkdown     1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot     1.2        2017-01-16 CRAN (R 3.3.3)                    
##  rvest       * 0.3.2      2016-06-17 CRAN (R 3.3.2)                    
##  scales      * 0.4.1      2016-11-09 CRAN (R 3.3.2)                    
##  selectr       0.3-1      2016-12-19 CRAN (R 3.3.2)                    
##  sf          * 0.5-1      2017-06-23 CRAN (R 3.3.3)                    
##  stats       * 3.3.3      2017-03-06 local                             
##  stringi       1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr     * 1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble        1.3.3      2017-05-28 CRAN (R 3.3.3)                    
##  tidyr       * 0.6.3      2017-05-15 CRAN (R 3.3.3)                    
##  tools         3.3.3      2017-03-06 local                             
##  udunits2      0.13       2016-11-17 CRAN (R 3.3.2)                    
##  units         0.4-5      2017-06-15 CRAN (R 3.3.3)                    
##  utils       * 3.3.3      2017-03-06 local                             
##  viridis     * 0.4.0      2017-03-27 CRAN (R 3.3.3)                    
##  viridisLite * 0.2.0      2017-03-24 CRAN (R 3.3.3)                    
##  withr         1.0.2      2016-06-20 CRAN (R 3.3.3)                    
##  XML           3.98-1.9   2017-06-19 CRAN (R 3.3.3)                    
##  xml2        * 1.1.1      2017-01-24 CRAN (R 3.3.2)                    
##  yaml          2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Interpolação pelo inverso do quadrado da distância</title>
      <link>/interpolacao-pelo-inverso-do-quadrado-da-distancia/</link>
      <pubDate>Sun, 30 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/interpolacao-pelo-inverso-do-quadrado-da-distancia/</guid>
<<<<<<< HEAD
      <description>É comum quando temos um determinado valor distribuído espacialmente e queremos estimá-lo para um ponto específico. Existem inúmeras formas de se chegar nesta estimativa, mas quero mostrar apenas uma neste post. O objetivo é estimar o quanto choveu em Itapetininga-SP, a partir de dados de chuva de outras 6 cidades próximas. Utilizaremos para isso os dados das estações automáticas do INMET.
Primeiro, vamos importar e visualizar os dados que temos disponível.</description>
=======
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/leaflet/leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/leaflet/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/leafletfix/leafletfix.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;/rmarkdown-libs/leaflet-label/leaflet.label.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/leaflet-label/leaflet.label.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/Proj4Leaflet/proj4-compressed.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/Proj4Leaflet/proj4leaflet.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/leaflet-binding/leaflet.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;É comum quando temos um determinado valor distribuído espacialmente e queremos estimá-lo para um ponto específico. Existem inúmeras formas de se chegar nesta estimativa, mas quero mostrar apenas uma neste post. O objetivo é estimar o quanto choveu em Itapetininga-SP, a partir de dados de chuva de outras 6 cidades próximas. Utilizaremos para isso os dados das estações automáticas do &lt;a href=&#34;http://www.inmet.gov.br/portal/index.php?r=estacoes/estacoesAutomaticas&#34;&gt;INMET&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Primeiro, vamos importar e visualizar os dados que temos disponível.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, leaflet)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# importa o arquivo os dados de chuva
dados &amp;lt;- read_csv2(
  &amp;quot;https://raw.githubusercontent.com/italocegatta/italocegatta.github.io_source/master/content/dados/chuva_inmet.csv&amp;quot;
)

dados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##               cidade       lon       lat     p
##                &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1           Sorocaba -47.58555 -23.42603  27.0
## 2            Itapeva -48.88582 -23.98192  33.4
## 3 Sao Miguel Arcanjo -48.16482 -23.85202  34.6
## 4              Avare -48.94100 -23.10175  18.2
## 5         Piracicaba -47.62332 -22.70313  30.8
## 6       Barra Bonita -48.55757 -22.47121  42.8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O mapa a seguir mostra o total de chuva resgistrado pela estação meteorológica de cada cidade no dia 26/04/2017. Nosso objetivo é estimar o quanto choveu em Itapetininga utilizando a interpolação pelo inverso do quadrado da distância ou IDW (Inverse Distance Weighting).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;leaflet(dados) %&amp;gt;% 
  addTiles() %&amp;gt;% 
  addMarkers(-48.0530600, -23.5916700) %&amp;gt;% 
  addCircleMarkers(
    ~lon, ~lat, 
    radius = ~p * 0.8, 
    label = ~as.character(p),
    popup = ~cidade,
    fillOpacity = 0.6,
    labelOptions = labelOptions(
      style = list(&amp;quot;color&amp;quot; = &amp;quot;white&amp;quot;),
      offset = c(5, -10),
      noHide = TRUE,
      textOnly = TRUE,
      direction = &amp;quot;bottom&amp;quot;
    )
  )&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-dcaba7a7a938ce23b79b&#34; style=&#34;width:100%;height:500px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-dcaba7a7a938ce23b79b&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addMarkers&#34;,&#34;args&#34;:[-23.59167,-48.05306,null,null,null,{&#34;clickable&#34;:true,&#34;draggable&#34;:false,&#34;keyboard&#34;:true,&#34;title&#34;:&#34;&#34;,&#34;alt&#34;:&#34;&#34;,&#34;zIndexOffset&#34;:0,&#34;opacity&#34;:1,&#34;riseOnHover&#34;:false,&#34;riseOffset&#34;:250},null,null,null,null,null,null,null]},{&#34;method&#34;:&#34;addCircleMarkers&#34;,&#34;args&#34;:[[-23.426035,-23.981918,-23.852022,-23.101749,-22.703132,-22.471205],[-47.585552,-48.885818,-48.164817,-48.940997,-47.623317,-48.557573],[21.6,26.72,27.68,14.56,24.64,34.24],null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;#03F&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;#03F&#34;,&#34;fillOpacity&#34;:0.6,&#34;dashArray&#34;:null},null,null,[&#34;Sorocaba&#34;,&#34;Itapeva&#34;,&#34;Sao Miguel Arcanjo&#34;,&#34;Avare&#34;,&#34;Piracicaba&#34;,&#34;Barra Bonita&#34;],null,[&#34;27&#34;,&#34;33.4&#34;,&#34;34.6&#34;,&#34;18.2&#34;,&#34;30.8&#34;,&#34;42.8&#34;],{&#34;clickable&#34;:false,&#34;noHide&#34;:true,&#34;direction&#34;:&#34;bottom&#34;,&#34;opacity&#34;:1,&#34;offset&#34;:[5,-10],&#34;textsize&#34;:&#34;10px&#34;,&#34;textOnly&#34;:true,&#34;style&#34;:{&#34;color&#34;:&#34;white&#34;},&#34;zoomAnimation&#34;:true,&#34;className&#34;:&#34;&#34;},null]}],&#34;limits&#34;:{&#34;lat&#34;:[-23.981918,-22.471205],&#34;lng&#34;:[-48.940997,-47.585552]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;A expressão que define o método é dada abaixo. Basicamente considera-se o valor de cada vizinho ponderado pelo inverso da distância entre ele e o ponto de interesse. Assim, vizinhos distantes contribuem com menos peso para o valor final que vizinhos mais próximos.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://bit.ly/2oN3IlI&#34; align=&#34;center&#34; border=&#34;0&#34; alt=&#34;x_{p} =\frac{\sum_{i=1}^n(\frac{1}{d_{i}^{2}}\times x_{i})}{\sum_{i=1}^n(\frac{1}{d_{i}^{2}})}&#34; width=&#34;153&#34; height=&#34;71&#34; /&gt;&lt;/p&gt;
&lt;p&gt;onde: xp = valor interpolado; xi = valor da i-ésimo ponto vizinho; di = distância entre o i-ésimo ponto de vizinho e o ponto de interesse.&lt;/p&gt;
&lt;p&gt;Agora que já definimos o método, vamos começar os cálculos. O primeiro valor calculado será a distância entre os pontos. Utilizaremos a formula de Haversine que retorna a distâncias entre dois pontos de uma esfera a partir de suas latitudes e longitudes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;haversine &amp;lt;- function(lon1, lat1, lon2, lat2) {
  # converte graus pra radiano
  rad &amp;lt;- pi/180
  # raio medio da terra no equador em km
  R &amp;lt;- 6378.1

  dlon &amp;lt;- (lon2 - lon1) * rad
  dlat &amp;lt;- (lat2 - lat1) * rad

  a &amp;lt;- (sin(dlat/2))^2 +
       cos(lat1 * rad) *
       cos(lat2 * rad) *
       (sin(dlon/2))^2

  c &amp;lt;- 2 * atan2(sqrt(a), sqrt(1 - a))

  d &amp;lt;- R * c 

  # distancia em km
  return(d)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dist &amp;lt;- dados %&amp;gt;%
  mutate(d_itape = haversine(lon, lat, -48.0530600, -23.5916700))

dist&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##               cidade       lon       lat     p   d_itape
##                &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1           Sorocaba -47.58555 -23.42603  27.0  51.16089
## 2            Itapeva -48.88582 -23.98192  33.4  95.30342
## 3 Sao Miguel Arcanjo -48.16482 -23.85202  34.6  31.13972
## 4              Avare -48.94100 -23.10175  18.2 105.87726
## 5         Piracicaba -47.62332 -22.70313  30.8 108.25070
## 6       Barra Bonita -48.55757 -22.47121  42.8 135.01301&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O cálculo do IDW é relativamente simples, basta reproduzir a expressão do método.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;idw &amp;lt;- function(x, dist, na.rm = TRUE) {
  s1 &amp;lt;-  sum(x / dist^2, na.rm = na.rm)
  s2 &amp;lt;-  sum(1 / dist^2, na.rm = na.rm)

  return(s1 / s2)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_itape &amp;lt;- dist %&amp;gt;% 
  add_row(
    .,
    cidade = &amp;quot;Itapetininga&amp;quot;,
    lon = -48.0530600,
    lat = -23.5916700,
    p = round(idw(.$p, .$d_itape), 1)
  )

dados_itape&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 5
##               cidade       lon       lat     p   d_itape
##                &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1           Sorocaba -47.58555 -23.42603  27.0  51.16089
## 2            Itapeva -48.88582 -23.98192  33.4  95.30342
## 3 Sao Miguel Arcanjo -48.16482 -23.85202  34.6  31.13972
## 4              Avare -48.94100 -23.10175  18.2 105.87726
## 5         Piracicaba -47.62332 -22.70313  30.8 108.25070
## 6       Barra Bonita -48.55757 -22.47121  42.8 135.01301
## 7       Itapetininga -48.05306 -23.59167  32.1        NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Muito bom, agora vamos retornar ao mapa e adicionar o quanto choveu em Itapetiniga, de acordo com a interpolação por IDW. &lt;br&gt; &lt;br&gt; &lt;div id=&#34;htmlwidget-ac4090246ac7828fbbca&#34; style=&#34;width:100%;height:500px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-ac4090246ac7828fbbca&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addCircleMarkers&#34;,&#34;args&#34;:[[-23.426035,-23.981918,-23.852022,-23.101749,-22.703132,-22.471205,-23.59167],[-47.585552,-48.885818,-48.164817,-48.940997,-47.623317,-48.557573,-48.05306],[27,33.4,34.6,18.2,30.8,42.8,32.1],null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;#03F&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;#03F&#34;,&#34;fillOpacity&#34;:0.6,&#34;dashArray&#34;:null},null,null,[&#34;Sorocaba&#34;,&#34;Itapeva&#34;,&#34;Sao Miguel Arcanjo&#34;,&#34;Avare&#34;,&#34;Piracicaba&#34;,&#34;Barra Bonita&#34;,&#34;Itapetininga&#34;],null,[&#34;27&#34;,&#34;33.4&#34;,&#34;34.6&#34;,&#34;18.2&#34;,&#34;30.8&#34;,&#34;42.8&#34;,&#34;32.1&#34;],{&#34;clickable&#34;:false,&#34;noHide&#34;:true,&#34;direction&#34;:&#34;bottom&#34;,&#34;opacity&#34;:1,&#34;offset&#34;:[5,-10],&#34;textsize&#34;:&#34;10px&#34;,&#34;textOnly&#34;:true,&#34;style&#34;:{&#34;color&#34;:&#34;white&#34;},&#34;zoomAnimation&#34;:true,&#34;className&#34;:&#34;&#34;},null]}],&#34;limits&#34;:{&#34;lat&#34;:[-23.981918,-22.471205],&#34;lng&#34;:[-48.940997,-47.585552]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contactar por Email.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-06-16                  
## 
##  package     * version date       source                           
##  assertthat    0.2.0   2017-04-11 CRAN (R 3.3.3)                   
##  backports     1.1.0   2017-05-22 CRAN (R 3.3.3)                   
##  base        * 3.3.3   2017-03-06 local                            
##  bindr         0.1     2016-11-13 CRAN (R 3.3.3)                   
##  bindrcpp    * 0.1     2016-12-11 CRAN (R 3.3.3)                   
##  blogdown      0.0.25  2017-03-23 Github (rstudio/blogdown@1c10d16)
##  bookdown      0.4     2017-05-20 CRAN (R 3.3.3)                   
##  crosstalk     1.0.0   2016-12-21 CRAN (R 3.3.3)                   
##  curl          2.6     2017-04-27 CRAN (R 3.3.3)                   
##  datasets    * 3.3.3   2017-03-06 local                            
##  devtools      1.13.2  2017-06-02 CRAN (R 3.3.3)                   
##  digest        0.6.12  2017-01-27 CRAN (R 3.3.2)                   
##  dplyr       * 0.7.0   2017-06-09 CRAN (R 3.3.3)                   
##  evaluate      0.10    2016-10-11 CRAN (R 3.3.3)                   
##  glue          1.0.0   2017-04-17 CRAN (R 3.3.3)                   
##  graphics    * 3.3.3   2017-03-06 local                            
##  grDevices   * 3.3.3   2017-03-06 local                            
##  hms           0.3     2016-11-22 CRAN (R 3.3.2)                   
##  htmltools     0.3.6   2017-04-28 CRAN (R 3.3.3)                   
##  htmlwidgets   0.8     2016-11-09 CRAN (R 3.3.3)                   
##  httpuv        1.3.3   2015-08-04 CRAN (R 3.3.3)                   
##  jsonlite      1.5     2017-06-01 CRAN (R 3.3.3)                   
##  knitr         1.16    2017-05-18 CRAN (R 3.3.3)                   
##  leaflet     * 1.1.0   2017-02-21 CRAN (R 3.3.3)                   
##  magrittr      1.5     2014-11-22 CRAN (R 3.3.2)                   
##  memoise       1.1.0   2017-04-21 CRAN (R 3.3.3)                   
##  methods       3.3.3   2017-03-06 local                            
##  mime          0.5     2016-07-07 CRAN (R 3.3.2)                   
##  pacman      * 0.4.6   2017-05-14 CRAN (R 3.3.3)                   
##  R6            2.2.1   2017-05-10 CRAN (R 3.3.3)                   
##  Rcpp          0.12.11 2017-05-22 CRAN (R 3.3.3)                   
##  readr       * 1.1.1   2017-05-16 CRAN (R 3.3.3)                   
##  rlang         0.1.1   2017-05-18 CRAN (R 3.3.3)                   
##  rmarkdown     1.5     2017-04-26 CRAN (R 3.3.3)                   
##  rprojroot     1.2     2017-01-16 CRAN (R 3.3.3)                   
##  shiny         1.0.3   2017-04-26 CRAN (R 3.3.3)                   
##  stats       * 3.3.3   2017-03-06 local                            
##  stringi       1.1.5   2017-04-07 CRAN (R 3.3.3)                   
##  stringr       1.2.0   2017-02-18 CRAN (R 3.3.2)                   
##  tibble        1.3.3   2017-05-28 CRAN (R 3.3.3)                   
##  tools         3.3.3   2017-03-06 local                            
##  utils       * 3.3.3   2017-03-06 local                            
##  withr         1.0.2   2016-06-20 CRAN (R 3.3.3)                   
##  xtable        1.8-2   2016-02-05 CRAN (R 3.3.3)                   
##  yaml          2.1.14  2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
>>>>>>> master
    </item>
    
    <item>
      <title>Download automático de imagens MODIS</title>
      <link>/download-automatico-de-imagens-modis/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/download-automatico-de-imagens-modis/</guid>
      <description>O MODIS (MODerate resolution Imaging Spectroradiometer) faz parte de um programa da NASA para monitoramento da superfície terrestre. Os satélites Terra e Aqua fornecem informações muito interessantes para o setor agroflorestal e nos permite entender de maneira bastante eficaz a dinâmica do uso do solo e de crescimento das nossas culturas.
O MODOIS tem diversos produtos, mas neste post vamos tratar especificamente do produto MOD13Q1, que disponibiliza a cada 16 dias um raster de EVI e NDVI com resolução de 250 m.</description>
    </item>
    
    <item>
      <title>Índice de uniformidade (PV50)</title>
      <link>/indice-de-uniformidade-pv50/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/indice-de-uniformidade-pv50/</guid>
      <description>O PV50 é hoje o índice mais utilizado quando queremos expressar a uniformidade de um plantio florestal. Hakamada (2012) apresentou um estudo detalhado sobre diversos índices e concluiu que o PV50 é o índice mais indicado para explicar a relação entre uniformidade, qualidade silvicultural e produtividade em plantios homogêneos de Eucalyptus.
O objetivo deste post é mostrar, passo a passo, como calcular este índice no R e fazer uma breve análise de seus resultados.</description>
    </item>
    
    <item>
      <title>ANOVA e teste de Tukey</title>
      <link>/anova-e-teste-de-tukey/</link>
      <pubDate>Thu, 08 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/anova-e-teste-de-tukey/</guid>
      <description>Análise de variância (ANOVA) e testes de médias são métodos comuns em artigos científicos. Você com certeza já viu aquelas letrinhas indicando a diferença entre tratamentos em algum estudo publicado. Por mais que este método esteja entrando em desuso - há uma tendência em abandonar esse tipo de abordagem estatística - penso que ainda o veremos por muitos anos no meio científico.
Como contexto, temos um teste de 5 progênies de eucalipto e queremos avaliar se volume por hectare (nossa variável resposta), difere entre os tratamentos.</description>
    </item>
    
    <item>
      <title>Ajuste de um modelo linear para vários fatores</title>
      <link>/ajuste-de-um-modelo-linear-para-varios-fatores/</link>
      <pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/ajuste-de-um-modelo-linear-para-varios-fatores/</guid>
      <description>Ajustar um modelo linear ou não linear é algo relativamente simples no R. Mas em muitos casos precisamos ajustá-lo para vários fatores e dependendo da quantidade isso se torna uma tarefa chata. Se você, assim como eu, já precisou fazer isso no Excel, sabe o que é perder mais que uma tarde copiando e colando informações entres abas e planilhas.
Mas felizmente existe uma máxima muito interessante entre programadores que é:</description>
    </item>
    
    <item>
      <title>Análise de componentes principais</title>
      <link>/analise-de-componentes-principais/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/analise-de-componentes-principais/</guid>
      <description>Quando temos dados multivariados, a análise de componentes principais (PCA) é um recurso muito interessante e relativamente simples, em termos de conceito teórico e interpretação prática. Para exemplificar, vamos trabalhar com os dados climáticos de algumas cidades brasileiras. Os dados climáticos foram compilados a partir de estações automáticas do INMET.
No R, temos a facilidade de poder fazer o cálculo dos componentes principais e logo em seguida poder apresentá-los em gráficos elegantes e de fácil entendimento.</description>
    </item>
    
    <item>
      <title>Os gráficos que explicam nossos dados (histograma)</title>
      <link>/os-graficos-que-explicam-nossos-dados-histograma/</link>
      <pubDate>Fri, 15 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/os-graficos-que-explicam-nossos-dados-histograma/</guid>
      <description>Histogramas são usados para mostrar a frequência com que uma variável ocorre. Isto é muito interessante para mostrar qual a distribuição dos seus dados e podemos apresentar em forma de frequência absoluta, relativa, percentual e acumulada. Para exemplificar este tipo gráfico, vamos utilizar os dados de inventário de uma propriedade fictícia na Amazônia. Estes dados são meramente ilustrativos e não tem valor real. O objetivo aqui é apresentar algumas particularidades da construção de gráficos de barras no R e facilitar a vida de quem quer abandonar os gráficos do Excel.</description>
    </item>
    
    <item>
      <title>Os gráficos que explicam nossos dados (heatmap)</title>
      <link>/os-graficos-que-explicam-nossos-dados-heatmap/</link>
      <pubDate>Sat, 09 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/os-graficos-que-explicam-nossos-dados-heatmap/</guid>
      <description>O heatmap é um gráfico muito útil para identificar padrões, principalmente quando temos muitas variáveis no gráfico. Essencialmente o heatmap necessita de 3 variáveis: uma variável resposta e duas outras variáveis para compor os eixos x e y. Não há restrição quanto ao tipo de variável, qualquer uma delas podem ser quantitativa ou qualitativa. Talvez esse seja o trunfo do heatmap, essa flexbilidade quanto a natureza das variáveis nos permite utilizá-lo em diversos momentos e substituir gráficos mais tradicionais quando eles não dão conta do recado.</description>
    </item>
    
    <item>
      <title>Os gráficos que explicam nossos dados (barras)</title>
      <link>/os-graficos-que-explicam-nossos-dados-barras/</link>
      <pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/os-graficos-que-explicam-nossos-dados-barras/</guid>
      <description>Este é o segundo post de uma série que estou fazendo sobre tipos de gráficos. Falamos um pouco sobre o boxplot e agora vamos ao gráfico de barras.
Gráficos de barras são muito úteis para podermos comparar fatores. Quando estão um ao lado do outro a comparação é feita rapidamente, já que as barras dão a noção de escala. Normalmente as barras informam um resumo (i. e. média, soma ou contagem), mas podemos ainda adicionar uma barra de erro ou desvio e deixar o gráfico mais detalhado.</description>
    </item>
    
    <item>
      <title>Os gráficos que explicam nossos dados (boxplot)</title>
      <link>/os-graficos-que-explicam-nossos-dados-boxplot/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/os-graficos-que-explicam-nossos-dados-boxplot/</guid>
      <description>Nossos dados merecem ser apresentados de forma clara, atraente e inspiradora. Não há nada mais frustrante que dar duro no campo para coletar os dados e depois apresentá-los numa simples tabela de resumos. Podemos e devemos fazer mais, certo?
Vou começar agora uma série de posts sobre tipos de gráficos. Como disse no primeiro post desse blog, minha intenção é documentar os scripts que escrevi durante a graduação, portanto os gráficos que vou apresentar se resumem aos que tive de fazer por conta de alguma demanda específica.</description>
    </item>
    
    <item>
      <title>O conceito tidy data</title>
      <link>/o-conceito-tidy-data/</link>
      <pubDate>Sat, 30 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/o-conceito-tidy-data/</guid>
      <description>A ideia central desse post é bem simples: dados bem organizados valem a pena e economizam seu tempo!
Em minha primeira iniciação científica (quando comecei a trabalhar com o R), propus um experimento para avaliar a eficiência de 2 inseticidas para o controle de uma praga que ataca mudas de eucalipto (Cegatta and Villegas 2013). Eu estava no primeiro ano da faculdade, sabia muito pouco de Excel e nada de R.</description>
    </item>
    
  </channel>
</rss>