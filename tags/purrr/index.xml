<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Purrr on Ítalo Cegatta</title>
    <link>/tags/purrr/index.xml</link>
    <description>Recent content in Purrr on Ítalo Cegatta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="/tags/purrr/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como um cientista de dados pesquisa o carro que quer comprar?</title>
      <link>/como-um-cientista-de-dados-pesquisa-o-carro-que-quer-comprar/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/como-um-cientista-de-dados-pesquisa-o-carro-que-quer-comprar/</guid>
      <description>&lt;p&gt;Estou naquela parte da vida em que se planeja comprar um carro. Como eu sou, acima de todos os sonhos, pão duro, decidir qual marca, modelo, versão e ano do veículo não vai ser fácil. Pensando nisso resolvi escrever um pacote no R para me ajudar a tomar esta decisão. O objetivo deste post é apresentar o pacote e as funções que auxiliam na coleta das informações da tabela &lt;a href=&#34;http://veiculos.fipe.org.br/&#34;&gt;FIPE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para aqueles que já passaram pela etapa de compra ou venda de um carro, provavelmente já consultaram a famosa tabela. Nas palavras do próprio site da FIPE:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Tabela Fipe expressa preços médios de veículos no mercado nacional, servindo apenas como um parâmetro para negociações ou avaliações. Os preços efetivamente praticados variam em função da região, conservação, cor, acessórios ou qualquer outro fator que possa influenciar as condições de oferta e procura por um veículo específico.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A motivação para este pacote foi exclusivamente pessoal e por isso a utilização das funções está bastante restrita. Por isso, se alguém quiser ajudar no desenvolvimento do pacote é só chegar e mandar um &lt;a href=&#34;https://github.com/italocegatta/fipe&#34;&gt;Pull Request&lt;/a&gt; no Github, contribuições serão muito bem vindas.&lt;/p&gt;
&lt;p&gt;Primeiro vou mostrar as funções e o workflow idealizado para o pacote. Queremos saber, por enquanto, o preço atual de uma BMW X6 M ano 2015. O primeiro passo é definir o mês de referência que se deseja consultar o preço do veículo. A FIPE disponibiliza os valores consolidados desde janeiro de 2001.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(dplyr, purrr, stringr, tidyr, forcats, ggplot2)
pacman::p_load_gh(&amp;quot;italocegatta/fipe&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fipe_referencia()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 202 x 2
##      data_ref cod_ref
##        &amp;lt;date&amp;gt;   &amp;lt;int&amp;gt;
##  1 2017-10-01     218
##  2 2017-09-01     217
##  3 2017-08-01     216
##  4 2017-07-01     215
##  5 2017-06-01     214
##  6 2017-05-01     212
##  7 2017-04-01     211
##  8 2017-03-01     207
##  9 2017-02-01     205
## 10 2017-01-01     202
## # ... with 192 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como o objetivo saber o preço atual do veículo, pegaremos o código &lt;code&gt;215&lt;/code&gt; (mês em que escrevo este post). Agora vamos procurar o código da marca BMW. Note que precisamos inserir o código do mês de referência para consultar a marca, essa é uma exigência do site da FIPE. Lembrando que o pacote não possui nenhum banco de dados armazenado, todas as informações são consultadas no site da tabela FIPE no ato da execução da função.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fipe_marca(cod_ref = 215)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 87 x 2
##           marca cod_marca
##           &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;
##  1        Acura         1
##  2       Agrale         2
##  3   Alfa Romeo         3
##  4       AM Gen         4
##  5  Asia Motors         5
##  6 ASTON MARTIN       189
##  7         Audi         6
##  8          BMW         7
##  9          BRM         8
## 10        Buggy         9
## # ... with 77 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por sorte, o código &lt;code&gt;7&lt;/code&gt; da BMW aparece logo nos primeiros valores por ordem alfabética. Podemos seguir para o próximo passo e pegar o código do modelo que queremos. A consulta a baixo mostras que a BMW tem 221 modelos cadastrados na tabela FIPE. Como já definimos o modelo que queremos, vamos filtrar do dataframe para enxergar o código do modelo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(bmw &amp;lt;- fipe_modelo(cod_ref = 215, cod_marca = 7))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 221 x 2
##                                    modelo cod_modelo
##                                     &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;
##  1              116iA 1.6 TB 16V 136cv 5p       6146
##  2                 118iA 2.0 16V 136cv 3p       5576
##  3                 118iA 2.0 16V 136cv 5p       4960
##  4         118iA Full 1.6 TB 16V 170cv 5p       6147
##  5 118iA/ Urban/Sport 1.6 TB 16V 170cv 5p       5923
##  6           120i 2.0 16V 150cv/ 156cv 5p        152
##  7          120iA 2.0 16V 150cv/ 156cv 5p        153
##  8                 120iA 2.0 16V 156cv 3p       4700
##  9          120iA Cabrio 2.0 16V 156cv 2p       4683
## 10    120iA Sport 2.0 ActiveFlex 16V Aut.       7178
## # ... with 211 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(bmw, str_detect(modelo, &amp;quot;X6 M&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##                              modelo cod_modelo
##                               &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;
## 1 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.       5189&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pronto, agora já sabemos que o código que a FIPE dá para o modelo X6 M é o &lt;code&gt;5189&lt;/code&gt;. Teríamos tudo pronto, se não fosse o padrão que a FIPE adota no campo&lt;code&gt;ano&lt;/code&gt;, onde o ano do modelo é acrescido de um código de combustível. A diferenciação para os “0 km” é feita na mesma coluna, utilizando a identificação 32000-*. Enfim, contornando as falhas estruturais no banco de dados deles, agora sabemos os códigos que identificam o ano do modelo, bem como o carro 0 km. Como eu optei por procurar o valor do carro 2015, iremos considerar o código &lt;code&gt;2015-1&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fipe_ano(cod_ref = 215, cod_marca = 7, cod_modelo = 5189)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 2
##     ano cod_ano
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;
## 1  0 km 32000-1
## 2  2017  2017-1
## 3  2016  2016-1
## 4  2015  2015-1
## 5  2014  2014-1
## 6  2013  2013-1
## 7  2012  2012-1
## 8  2011  2011-1
## 9  2010  2010-1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora sim vamos ao bendito preço da BMW!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fipe(cod_ref = 215, cod_marca = 7, cod_modelo = 5189, cod_ano = &amp;quot;2015-1&amp;quot;) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 1
## Variables: 7
## $ cod_fipe    &amp;lt;chr&amp;gt; &amp;quot;009144-8&amp;quot;
## $ ref         &amp;lt;date&amp;gt; 2017-07-01
## $ marca       &amp;lt;chr&amp;gt; &amp;quot;BMW&amp;quot;
## $ modelo      &amp;lt;chr&amp;gt; &amp;quot;X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.&amp;quot;
## $ ano         &amp;lt;chr&amp;gt; &amp;quot;2015&amp;quot;
## $ combustivel &amp;lt;chr&amp;gt; &amp;quot;Gasolina&amp;quot;
## $ valor       &amp;lt;dbl&amp;gt; 368603&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Achamos o preço do carro que eu queria. Apenas R$ 368 mil. Uma pechincha. Obviamente, saber quanto vale uma BMW X6 não faz diferênça alguma no meu dia. Um abraço pra quem tem condições de comprar um carro desse sem precisar vender um rim.&lt;/p&gt;
&lt;p&gt;Agora que já conhecemos as funções e o fluxo para consultar o valor dos carros, vamos ampliar a consulta e justificar as horas que passamos aprendendo a programar. Já sabemos o preço do X6 M em julho/2017, mas e nos meses anteriores? Como será que foi a depreciação média do carro usado nos últimos meses? E os outros modelos X6, quanto será que estão valendo?&lt;/p&gt;
&lt;p&gt;Digamos que, agora, estas questões podem ser respondidas de forma bem rápida. Eu mostro.&lt;/p&gt;
&lt;p&gt;Vamos retomar os passos, mas agora no nível hard. Vou analisar o comportamento dos preços desde 2009. Para deixar a consulta mais rápida, serão considerados apenas 3 meses de referência por ano.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(base_marca &amp;lt;- fipe_referencia() %&amp;gt;%
  filter(data_ref %in% seq.Date(as.Date(&amp;quot;2009-01-01&amp;quot;), as.Date(&amp;quot;2017-07-01&amp;quot;), by = &amp;quot;4 months&amp;quot;)) %&amp;gt;%
  mutate(marca = map(cod_ref, fipe_marca)) %&amp;gt;%
  unnest() %&amp;gt;% 
  filter(marca == &amp;quot;BMW&amp;quot;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 26 x 4
##      data_ref cod_ref marca cod_marca
##        &amp;lt;date&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;
##  1 2017-05-01     212   BMW         7
##  2 2017-01-01     202   BMW         7
##  3 2016-09-01     196   BMW         7
##  4 2016-05-01     191   BMW         7
##  5 2016-01-01     187   BMW         7
##  6 2015-09-01     183   BMW         7
##  7 2015-05-01     179   BMW         7
##  8 2015-01-01     174   BMW         7
##  9 2014-09-01     170   BMW         7
## 10 2014-05-01     166   BMW         7
## # ... with 16 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notem que agora temos um dataframe com códigos de referência entre janeiro/2008 a maio/2017. Seguindo a análise, precisamos encontrar os códigos dos modelos X6.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(base_modelo &amp;lt;- mutate(base_marca, modelo = map2(cod_ref, cod_marca, fipe_modelo)) %&amp;gt;%
  unnest() %&amp;gt;% 
  filter(str_detect(modelo, &amp;quot;X6&amp;quot;))
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 82 x 6
##      data_ref cod_ref marca cod_marca                             modelo
##        &amp;lt;date&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;                              &amp;lt;chr&amp;gt;
##  1 2017-05-01     212   BMW         7  X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  2 2017-05-01     212   BMW         7   X6 XDRIVE 35i 3.0 306cv Bi-Turbo
##  3 2017-05-01     212   BMW         7   X6 XDRIVE 50i 4.4 407cv Bi-Turbo
##  4 2017-05-01     212   BMW         7 X6 XDRIVE 50i M Sport 4.4 Bi-Turbo
##  5 2017-01-01     202   BMW         7  X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  6 2017-01-01     202   BMW         7   X6 XDRIVE 35i 3.0 306cv Bi-Turbo
##  7 2017-01-01     202   BMW         7   X6 XDRIVE 50i 4.4 407cv Bi-Turbo
##  8 2017-01-01     202   BMW         7 X6 XDRIVE 50i M Sport 4.4 Bi-Turbo
##  9 2016-09-01     196   BMW         7  X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
## 10 2016-09-01     196   BMW         7   X6 XDRIVE 35i 3.0 306cv Bi-Turbo
## # ... with 72 more rows, and 1 more variables: cod_modelo &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O próximo passo é pegar, para cada versão, os diferentes anos de fabricação do carro. A função vai consultar os anos de fabricação que a FIPE consolidou para cada uma das 82 linhas (combinação entre modelo e mês de referência).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(base_consulta &amp;lt;- mutate(base_modelo, ano = pmap(list(cod_ref, cod_marca, cod_modelo), fipe_ano)) %&amp;gt;%
  unnest()
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 480 x 8
##      data_ref cod_ref marca cod_marca                            modelo
##        &amp;lt;date&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;                             &amp;lt;chr&amp;gt;
##  1 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  2 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  3 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  4 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  5 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  6 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  7 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  8 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
##  9 2017-05-01     212   BMW         7 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.
## 10 2017-05-01     212   BMW         7  X6 XDRIVE 35i 3.0 306cv Bi-Turbo
## # ... with 470 more rows, and 3 more variables: cod_modelo &amp;lt;int&amp;gt;,
## #   ano &amp;lt;chr&amp;gt;, cod_ano &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se na sua internet a função anterior demorou, prepara que a próxima vai demorar um tanto mais. Temos 480 requisições para fazer no site da FIPE em busca dos preços que queremos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(consulta &amp;lt;- mutate(
  base_consulta, 
  consulta = pmap(list(cod_ref, cod_marca, cod_modelo, cod_ano), fipe)
  )  %&amp;gt;%
  select(consulta) %&amp;gt;% 
  unnest() %&amp;gt;% 
  select(ref, modelo, ano, valor)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 480 x 4
##           ref                            modelo   ano  valor
##        &amp;lt;date&amp;gt;                             &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  0 km 644550
##  2 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2017 520193
##  3 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2016 475803
##  4 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2015 365088
##  5 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2014 317505
##  6 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2013 291749
##  7 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2012 231191
##  8 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2011 204481
##  9 2017-05-01 X6 M 4.4 4x4 V8 32V Bi-Turbo Aut.  2010 193629
## 10 2017-05-01  X6 XDRIVE 35i 3.0 306cv Bi-Turbo  0 km 415744
## # ... with 470 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depois de 4 passos, temos o banco de dados desejado. Imagina coletar estes dados, na mão, pelo site oficial!&lt;/p&gt;
&lt;p&gt;Bom agora o pacote está apresentado. Pretendo fazer outros posts com estudos de casos mais específicos, portanto vou deixar apenas um gráfico que resume a consulta que acabamos de fazer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;consulta %&amp;gt;%
  mutate(ano = fct_relevel(ano, &amp;quot;0 km&amp;quot;, after = Inf)) %&amp;gt;% 
  ggplot(aes(ref, valor, color =  ano, group = ano)) +
    geom_line(color = &amp;quot;grey30&amp;quot;) +
    geom_point(size = 3) +
    facet_wrap(~modelo) +
    labs(
      x = &amp;quot;Mês de refêrencia&amp;quot;,
      y = &amp;quot;Valor (R$)&amp;quot;,
      color = &amp;quot;Ano do \nmodelo&amp;quot;
    ) +
    scale_y_continuous(breaks = seq(0, 700000, 50000), labels = scales::dollar_format(prefix = NULL, big.mark = &amp;quot;.&amp;quot;)) +
    scale_x_date(date_breaks = &amp;quot;1 year&amp;quot;, date_labels = &amp;quot;%b/%y&amp;quot;) +
    scale_color_viridis_d() +
    theme_bw() +
    theme(legend.position = &amp;quot;top&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-07-29-como-um-cientista-de-dados-pesquisa-o-carro-que-quer-comprar_files/figure-html/plot_fipe-1.png&#34; width=&#34;4800&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-10-14                  
## 
##  package     * version    date       source                            
##  assertthat    0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports     1.1.1      2017-09-25 CRAN (R 3.3.3)                    
##  base        * 3.3.3      2017-03-06 local                             
##  bindr         0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp    * 0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown      0.1        2017-08-22 CRAN (R 3.3.3)                    
##  bookdown      0.5        2017-08-20 CRAN (R 3.3.3)                    
##  colorspace    1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  curl          2.8.1      2017-07-21 CRAN (R 3.3.3)                    
##  datasets    * 3.3.3      2017-03-06 local                             
##  devtools      1.13.3     2017-08-02 CRAN (R 3.3.3)                    
##  digest        0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr       * 0.7.4      2017-09-28 CRAN (R 3.3.3)                    
##  evaluate      0.10.1     2017-06-24 CRAN (R 3.3.3)                    
##  fipe        * 0.0.0.9000 2017-07-29 local                             
##  forcats     * 0.2.0      2017-01-23 CRAN (R 3.3.2)                    
##  ggplot2     * 2.2.1.9000 2017-07-15 Github (tidyverse/ggplot2@45853c7)
##  glue          1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  graphics    * 3.3.3      2017-03-06 local                             
##  grDevices   * 3.3.3      2017-03-06 local                             
##  grid          3.3.3      2017-03-06 local                             
##  gtable        0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  hms           0.3        2016-11-22 CRAN (R 3.3.2)                    
##  htmltools     0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  httr          1.3.1      2017-08-20 CRAN (R 3.3.3)                    
##  jsonlite      1.5        2017-06-01 CRAN (R 3.3.3)                    
##  knitr         1.17       2017-08-10 CRAN (R 3.3.3)                    
##  lazyeval      0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  lubridate     1.6.0      2016-09-13 CRAN (R 3.3.2)                    
##  magrittr      1.5        2014-11-22 CRAN (R 3.3.2)                    
##  memoise       1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods     * 3.3.3      2017-03-06 local                             
##  munsell       0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  pacman      * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  pkgconfig     2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr          1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  purrr       * 0.2.3      2017-08-02 CRAN (R 3.3.3)                    
##  R6            2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  Rcpp          0.12.13    2017-09-28 CRAN (R 3.3.3)                    
##  readr         1.1.1      2017-05-16 CRAN (R 3.3.3)                    
##  rlang         0.1.2      2017-08-09 CRAN (R 3.3.3)                    
##  rmarkdown     1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot     1.2        2017-01-16 CRAN (R 3.3.3)                    
##  scales        0.5.0      2017-08-24 CRAN (R 3.3.3)                    
##  stats       * 3.3.3      2017-03-06 local                             
##  stringi       1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr     * 1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble        1.3.4      2017-08-22 CRAN (R 3.3.3)                    
##  tidyr       * 0.7.1      2017-09-01 CRAN (R 3.3.3)                    
##  tidyselect    0.2.0      2017-08-30 CRAN (R 3.3.3)                    
##  tools         3.3.3      2017-03-06 local                             
##  utils       * 3.3.3      2017-03-06 local                             
##  viridisLite   0.2.0      2017-03-24 CRAN (R 3.3.3)                    
##  withr         2.0.0      2017-07-28 CRAN (R 3.3.3)                    
##  yaml          2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Web scraping: dados de páginas da internet na palma da sua mão</title>
      <link>/web-scraping-dados-de-paginas-da-internet-na-palma-da-sua-mao/</link>
      <pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/web-scraping-dados-de-paginas-da-internet-na-palma-da-sua-mao/</guid>
      <description>&lt;p&gt;Você já precisou copiar na mão uma informação de texto, valor ou tabela de uma pagina web? Pelo menos no meu trabalho isto é muito comum. Por mais que os dados estejam lá site, eles nunca estão disponíveis todos juntos e no formato que queremos, parece que é de sacanagem. Diante disto, o objetivo deste post é mostrar como podemos utilizar o R para coletar dados de uma página web e esquecer o famooooso &lt;em&gt;ctrl+c/ctrl+v&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos exemplificar o post utilizando o site do IBGE para saber quantos metros cúbicos de lenha de eucalipto foram produzidos em 2015 em cada estado brasileiro. De cara, se os dados não estiverem numa tabela pronta, você já espera ter que entrar em 27 páginas diferentes para pegar esta informação.&lt;/p&gt;
&lt;p&gt;Nosso ponto de partida é a página &lt;a href=&#34;http://www.ibge.gov.br/estadosat/&#34;&gt;States@&lt;/a&gt; do IBGE, que reúne diversas informações na escala estadual. Acessando a página podemos ver o código html por trás (utilize a tecla F12) e assim entender como a página está estruturada. Como queremos entrar nos Estados, podemos ver na Figura &lt;a href=&#34;#fig:pg1&#34;&gt;1&lt;/a&gt; que essa informação está abaixo do &lt;code&gt;id=&amp;quot;menu&amp;quot;&lt;/code&gt;. Note que ao passarmos o mouse sobre a linha &lt;code&gt;&amp;lt;div id=&amp;quot;menu&amp;quot;&amp;gt;&lt;/code&gt; o navegador identifica na página a localização do elemento e ainda nos informa o id CSS de rastreio, no caso &lt;code&gt;div#menu&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pg1&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;http://i.imgur.com/VjiEvCM.png&#34; alt=&#34;Página inicial do site.&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Página inicial do site.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Então já podemos começar a programar e desenhar o acesso aos dados. No R, cada página web é um objeto que precisa ser salvo na memória. Então, cada página é importante para ter os dados ou por ser uma etapa para conseguir os dados. A página inicial (&lt;code&gt;pg_raiz&lt;/code&gt;) contém os links para as páginas dos Estados, por isso precisamos acessá-la.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(purrr, dplyr, tidyr, stringr, rvest, ggplot2, viridis, scales, sf)
pacman::p_load_gh(&amp;quot;italocegatta/brmap&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url_raiz &amp;lt;- &amp;quot;http://www.ibge.gov.br/estadosat/&amp;quot;

pg_raiz &amp;lt;- read_html(url_raiz)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No objeto &lt;code&gt;posfixo_estados&lt;/code&gt; temos a parte do link que leva até a página de cada estado. Para ter o link completo, é só juntar com o link da página raiz.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;posfixo_estados &amp;lt;- html_node(pg_raiz, &amp;quot;div#menu&amp;quot;) %&amp;gt;% 
  html_children() %&amp;gt;%
  html_node(&amp;quot;a&amp;quot;) %&amp;gt;% 
  html_attr(&amp;quot;href&amp;quot;)

posfixo_estados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;perfil.php?sigla=ro&amp;quot; &amp;quot;perfil.php?sigla=ac&amp;quot; &amp;quot;perfil.php?sigla=am&amp;quot;
##  [4] &amp;quot;perfil.php?sigla=rr&amp;quot; &amp;quot;perfil.php?sigla=pa&amp;quot; &amp;quot;perfil.php?sigla=ap&amp;quot;
##  [7] &amp;quot;perfil.php?sigla=to&amp;quot; &amp;quot;perfil.php?sigla=ma&amp;quot; &amp;quot;perfil.php?sigla=pi&amp;quot;
## [10] &amp;quot;perfil.php?sigla=ce&amp;quot; &amp;quot;perfil.php?sigla=rn&amp;quot; &amp;quot;perfil.php?sigla=pb&amp;quot;
## [13] &amp;quot;perfil.php?sigla=pe&amp;quot; &amp;quot;perfil.php?sigla=al&amp;quot; &amp;quot;perfil.php?sigla=se&amp;quot;
## [16] &amp;quot;perfil.php?sigla=ba&amp;quot; &amp;quot;perfil.php?sigla=mg&amp;quot; &amp;quot;perfil.php?sigla=es&amp;quot;
## [19] &amp;quot;perfil.php?sigla=rj&amp;quot; &amp;quot;perfil.php?sigla=sp&amp;quot; &amp;quot;perfil.php?sigla=pr&amp;quot;
## [22] &amp;quot;perfil.php?sigla=sc&amp;quot; &amp;quot;perfil.php?sigla=rs&amp;quot; &amp;quot;perfil.php?sigla=ms&amp;quot;
## [25] &amp;quot;perfil.php?sigla=mt&amp;quot; &amp;quot;perfil.php?sigla=go&amp;quot; &amp;quot;perfil.php?sigla=df&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url_estados &amp;lt;- paste0(url_raiz, posfixo_estados)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos agora acessar às páginas de todos os Estados e armazenar no objeto &lt;code&gt;pg_estados&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pg_estados &amp;lt;- map(url_estados, read_html)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Navegando pela página de um estado qualquer, identificamos que queremos a informação contida no link &lt;em&gt;Extração Vegetal e Silvicultura 2015&lt;/em&gt;. Nesse caso, precisamos mais uma vez dos links que leva a esta página (para cada estado). Também é possível, tanto pelo R quanto pelo navegador, ver que esse link está na posição 68 da lista/tablela nomeada como &lt;code&gt;table.temas&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;posfixo_lenha &amp;lt;- map(
  pg_estados,
  ~html_node(.x, &amp;quot;table.temas&amp;quot;) %&amp;gt;% 
    html_children() %&amp;gt;%
    &amp;#39;[&amp;#39;(68) %&amp;gt;%
    html_node(&amp;quot;a&amp;quot;) %&amp;gt;% 
    html_attr(&amp;quot;href&amp;quot;)
  ) %&amp;gt;% 
  flatten_chr()

posfixo_lenha&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;temas.php?sigla=ro&amp;amp;tema=lavouratemporaria2016&amp;quot;
##  [2] &amp;quot;temas.php?sigla=ac&amp;amp;tema=lavouratemporaria2016&amp;quot;
##  [3] &amp;quot;temas.php?sigla=am&amp;amp;tema=lavouratemporaria2016&amp;quot;
##  [4] &amp;quot;temas.php?sigla=rr&amp;amp;tema=lavouratemporaria2016&amp;quot;
##  [5] &amp;quot;temas.php?sigla=pa&amp;amp;tema=lavouratemporaria2016&amp;quot;
##  [6] &amp;quot;temas.php?sigla=ap&amp;amp;tema=lavouratemporaria2016&amp;quot;
##  [7] &amp;quot;temas.php?sigla=to&amp;amp;tema=lavouratemporaria2016&amp;quot;
##  [8] &amp;quot;temas.php?sigla=ma&amp;amp;tema=lavouratemporaria2016&amp;quot;
##  [9] &amp;quot;temas.php?sigla=pi&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [10] &amp;quot;temas.php?sigla=ce&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [11] &amp;quot;temas.php?sigla=rn&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [12] &amp;quot;temas.php?sigla=pb&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [13] &amp;quot;temas.php?sigla=pe&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [14] &amp;quot;temas.php?sigla=al&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [15] &amp;quot;temas.php?sigla=se&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [16] &amp;quot;temas.php?sigla=ba&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [17] &amp;quot;temas.php?sigla=mg&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [18] &amp;quot;temas.php?sigla=es&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [19] &amp;quot;temas.php?sigla=rj&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [20] &amp;quot;temas.php?sigla=sp&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [21] &amp;quot;temas.php?sigla=pr&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [22] &amp;quot;temas.php?sigla=sc&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [23] &amp;quot;temas.php?sigla=rs&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [24] &amp;quot;temas.php?sigla=ms&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [25] &amp;quot;temas.php?sigla=mt&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [26] &amp;quot;temas.php?sigla=go&amp;amp;tema=lavouratemporaria2016&amp;quot;
## [27] &amp;quot;temas.php?sigla=df&amp;amp;tema=lavouratemporaria2016&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aqui, mais uma vez, será preciso juntar o &lt;em&gt;link&lt;/em&gt; específico de cada estado com a url da página raiz.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url_lenha &amp;lt;- paste0(url_raiz, posfixo_lenha)

pg_lenha &amp;lt;- map(url_lenha, read_html)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora, vamos dar um passo para trás e listar o nome dos Estados na ordem que as páginas são acessadas para podemos utilizar mais à frente.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lista_estados &amp;lt;- html_node(pg_raiz, &amp;quot;div#menu&amp;quot;) %&amp;gt;% 
  html_children() %&amp;gt;%
  html_node(&amp;quot;img&amp;quot;) %&amp;gt;%
  html_attr(&amp;quot;alt&amp;quot;)

lista_estados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Rondônia&amp;quot;            &amp;quot;Acre&amp;quot;                &amp;quot;Amazonas&amp;quot;           
##  [4] &amp;quot;Roraima&amp;quot;             &amp;quot;Pará&amp;quot;                &amp;quot;Amapá&amp;quot;              
##  [7] &amp;quot;Tocantins&amp;quot;           &amp;quot;Maranhão&amp;quot;            &amp;quot;Piauí&amp;quot;              
## [10] &amp;quot;Ceará&amp;quot;               &amp;quot;Rio Grande do Norte&amp;quot; &amp;quot;Paraíba&amp;quot;            
## [13] &amp;quot;Pernambuco&amp;quot;          &amp;quot;Alagoas&amp;quot;             &amp;quot;Sergipe&amp;quot;            
## [16] &amp;quot;Bahia&amp;quot;               &amp;quot;Minas Gerais&amp;quot;        &amp;quot;Espírito Santo&amp;quot;     
## [19] &amp;quot;Rio de Janeiro&amp;quot;      &amp;quot;São Paulo&amp;quot;           &amp;quot;Paraná&amp;quot;             
## [22] &amp;quot;Santa Catarina&amp;quot;      &amp;quot;Rio Grande do Sul&amp;quot;   &amp;quot;Mato Grosso do Sul&amp;quot; 
## [25] &amp;quot;Mato Grosso&amp;quot;         &amp;quot;Goiás&amp;quot;               &amp;quot;Distrito federal&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O próximo passo é extrair a tabela de informação de cada estado e posteriormente filtrar a informação que é de nosso interesse. Note que é neste momento que a programação se diferencia das atividades manuais: caso seu interesse seja por lenha de pinus, por exemplo, basta alterar uma palavra no código abaixo e ser feliz com o resultado em poucos segundos. Claro que é um exemplo hipotético, dificilmente alguém vai precisar desse código específico, mas o ponto está na capacidade de escrever seu próprio código e não precisar fazer o trabalho manual.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tabelas &amp;lt;- map(
  set_names(pg_lenha, lista_estados), 
  ~html_node(.x, &amp;quot;table#tabela_temas&amp;quot;) %&amp;gt;% 
  html_table() %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  rename(produto = X1, valor = X2, unidade = X3)
  )

qnt &amp;lt;- map_df(
  tabelas, 
  ~filter(.x, str_detect(produto, c(&amp;quot;Lenha de eucalipto&amp;quot;, &amp;quot;quantidade&amp;quot;))) %&amp;gt;% 
  &amp;#39;[[&amp;#39;(&amp;quot;valor&amp;quot;) 
  ) %&amp;gt;%
  gather(estado, volume) %&amp;gt;% 
  mutate(volume = as.numeric(str_replace_all(volume, &amp;quot;\\.&amp;quot;, &amp;quot;&amp;quot;)))

qnt &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 405 x 2
##      estado volume
##       &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 Rondônia   1456
##  2 Rondônia     55
##  3 Rondônia     NA
##  4 Rondônia     NA
##  5 Rondônia     NA
##  6 Rondônia     NA
##  7 Rondônia     NA
##  8 Rondônia     NA
##  9 Rondônia     NA
## 10 Rondônia     NA
## # ... with 395 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De certa forma já resolvemos o problema, a quantidade de lenha de eucalipto produzida em cada estado no ano de 2015 já está em nossas mãos. Mas vamos dar um passo além e visualizar isso num mapa. O pacote &lt;a href=&#34;https://github.com/italocegatta/brmap&#34;&gt;brmap&lt;/a&gt; possui os polígonos dos Estados brasileiros no formato &lt;code&gt;sf&lt;/code&gt;, o novo pacote para manupulação de objetos espaciais no R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qnt_mapa &amp;lt;- left_join(brmap_estado, qnt)

ggplot(qnt_mapa) +
  geom_sf(aes(fill = volume)) +
  labs(
    title = &amp;quot;Lenha de eucalipto - quantidade produzida em 2015&amp;quot;,
    subtitle = &amp;quot;IBGE Estados - Extração Vegetal e Silvicultura 2015&amp;quot;
  ) +
  scale_fill_viridis(
    Lenha~de~eucalipto~(m^3), 
    na.value = &amp;quot;grey90&amp;quot;,
    labels = function(x) format(x, big.mark = &amp;quot;.&amp;quot;, decimal.mark = &amp;quot;,&amp;quot;, scientific = FALSE)
  ) +
  theme_bw() +
  theme(legend.position = &amp;quot;bottom&amp;quot;) +
  guides(fill = guide_colorbar(barwidth = 30, title.position = &amp;quot;top&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-06-16-web-scraping-dados-de-paginas-da-internet-na-palma-da-sua-mao_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;4000&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-10-14                  
## 
##  package     * version    date       source                            
##  assertthat    0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports     1.1.1      2017-09-25 CRAN (R 3.3.3)                    
##  base        * 3.3.3      2017-03-06 local                             
##  bindr         0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp    * 0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown      0.1        2017-08-22 CRAN (R 3.3.3)                    
##  bookdown      0.5        2017-08-20 CRAN (R 3.3.3)                    
##  brmap       * 0.0.2      2017-08-17 local                             
##  colorspace    1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  curl          2.8.1      2017-07-21 CRAN (R 3.3.3)                    
##  datasets    * 3.3.3      2017-03-06 local                             
##  DBI           0.7        2017-06-18 CRAN (R 3.3.3)                    
##  devtools      1.13.3     2017-08-02 CRAN (R 3.3.3)                    
##  digest        0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr       * 0.7.4      2017-09-28 CRAN (R 3.3.3)                    
##  evaluate      0.10.1     2017-06-24 CRAN (R 3.3.3)                    
##  ggplot2     * 2.2.1.9000 2017-07-15 Github (tidyverse/ggplot2@45853c7)
##  glue          1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  graphics    * 3.3.3      2017-03-06 local                             
##  grDevices   * 3.3.3      2017-03-06 local                             
##  grid          3.3.3      2017-03-06 local                             
##  gridExtra     2.3        2017-09-09 CRAN (R 3.3.3)                    
##  gtable        0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  highr         0.6        2016-05-09 CRAN (R 3.3.3)                    
##  htmltools     0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  httr          1.3.1      2017-08-20 CRAN (R 3.3.3)                    
##  knitr         1.17       2017-08-10 CRAN (R 3.3.3)                    
##  labeling      0.3        2014-08-23 CRAN (R 3.3.2)                    
##  lazyeval      0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  magrittr      1.5        2014-11-22 CRAN (R 3.3.2)                    
##  memoise       1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods     * 3.3.3      2017-03-06 local                             
##  munsell       0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  pacman      * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  pkgconfig     2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr          1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  purrr       * 0.2.3      2017-08-02 CRAN (R 3.3.3)                    
##  R6            2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  Rcpp          0.12.13    2017-09-28 CRAN (R 3.3.3)                    
##  rlang         0.1.2      2017-08-09 CRAN (R 3.3.3)                    
##  rmarkdown     1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot     1.2        2017-01-16 CRAN (R 3.3.3)                    
##  rvest       * 0.3.2      2016-06-17 CRAN (R 3.3.2)                    
##  scales      * 0.5.0      2017-08-24 CRAN (R 3.3.3)                    
##  selectr       0.3-1      2016-12-19 CRAN (R 3.3.2)                    
##  sf          * 0.5-4      2017-08-28 CRAN (R 3.3.3)                    
##  stats       * 3.3.3      2017-03-06 local                             
##  stringi       1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr     * 1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble        1.3.4      2017-08-22 CRAN (R 3.3.3)                    
##  tidyr       * 0.7.1      2017-09-01 CRAN (R 3.3.3)                    
##  tools         3.3.3      2017-03-06 local                             
##  udunits2      0.13       2016-11-17 CRAN (R 3.3.2)                    
##  units         0.4-6      2017-08-27 CRAN (R 3.3.3)                    
##  utils       * 3.3.3      2017-03-06 local                             
##  viridis     * 0.4.0      2017-03-27 CRAN (R 3.3.3)                    
##  viridisLite * 0.2.0      2017-03-24 CRAN (R 3.3.3)                    
##  withr         2.0.0      2017-07-28 CRAN (R 3.3.3)                    
##  XML           3.98-1.9   2017-06-19 CRAN (R 3.3.3)                    
##  xml2        * 1.1.1      2017-01-24 CRAN (R 3.3.2)                    
##  yaml          2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ajuste de um modelo linear para vários fatores</title>
      <link>/ajuste-de-um-modelo-linear-para-varios-fatores/</link>
      <pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/ajuste-de-um-modelo-linear-para-varios-fatores/</guid>
      <description>&lt;p&gt;Ajustar um modelo linear ou não linear é algo relativamente simples no R. Mas em muitos casos precisamos ajustá-lo para vários fatores e dependendo da quantidade isso se torna uma tarefa chata. Se você, assim como eu, já precisou fazer isso no Excel, sabe o que é perder mais que uma tarde copiando e colando informações entres abas e planilhas.&lt;br /&gt;
&lt;!-- more --&gt;&lt;/p&gt;
&lt;p&gt;Mas felizmente existe uma máxima muito interessante entre programadores que é:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t Repeat Yourself (DRY)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Depois que eu percebi o quanto a repetição humana gera erros, abracei totalmente o conceito DRY. Acreditem, vocês serão muito mais felizes e eficientes deixando o computador fazer as tarefas repetitivas e chatas.&lt;/p&gt;
&lt;p&gt;Para exemplificar, vamos fazer algo muito comum nas ciências florestais, que é predizer as alturas das árvores. Medir a altura da árvore é uma atividade laboriosa, e há muito tempo se sabe que a altura total das árvores possui alta correlação com o seu diâmetro.&lt;/p&gt;
&lt;p&gt;Utilizaremos mais uma vez os dados do &lt;a href=&#34;www.projetotume.com&#34;&gt;Projeto TUME&lt;/a&gt;, referente a medição de 24 meses do TUME 55 plantado no Mato Grosso do Sul.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, tidyr, broom, purrr, ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados &amp;lt;- read_csv2(
  &amp;quot;https://github.com/italocegatta/italocegatta.github.io_source/raw/master/content/dados/tume_55_24.csv&amp;quot;
)

dados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,881 x 9
##    N_tume I_meses          Esp Parc_m2 N_arv DAP_cm   H_m   Cod  Cod2
##     &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;        &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1     55      24 E_botryoides     600     1    4.1   6.5    NA    NA
##  2     55      24 E_botryoides     600     2    9.7   8.0    NA    NA
##  3     55      24 E_botryoides     600     3     NA    NA     5    NA
##  4     55      24 E_botryoides     600     4    7.6   7.5     2    NA
##  5     55      24 E_botryoides     600     5    3.8   5.0    NA    NA
##  6     55      24 E_botryoides     600     6     NA    NA     1    NA
##  7     55      24 E_botryoides     600     7   12.6   9.0     6    NA
##  8     55      24 E_botryoides     600     8     NA    NA     1    NA
##  9     55      24 E_botryoides     600     9    7.0   8.0    NA    NA
## 10     55      24 E_botryoides     600    10    7.5   7.5    NA    NA
## # ... with 1,871 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nosso objetivo é simples: ajustar um modelo hipsométrico para cada espécie e em seguida predizer as alturas das árvores. A Figura &lt;a href=&#34;#fig:9-dap-h&#34;&gt;1&lt;/a&gt; mostra a relação que teríamos se fosse ajustado apenas um modelo para todas as espécies.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(DAP_cm, H_m)) +
  geom_point(alpha=0.4) +
  geom_smooth(method=&amp;quot;lm&amp;quot;) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:9-dap-h&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-08-27-ajuste-de-um-modelo-linear-para-varios-fatores_files/figure-html/9-dap-h-1.png&#34; alt=&#34;Relação entre o diâmetro e a altura sem destinção de espécie.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Relação entre o diâmetro e a altura sem destinção de espécie.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Mas na prática, a relação diâmetro-altura é diferente entre espécie, como pode ser notado na Figura &lt;a href=&#34;#fig:9-dap-h-spp&#34;&gt;2&lt;/a&gt;. Talvez fique mais evidente a diferença observando os coeficientes dos modelos que serão ajustados a seguir.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(DAP_cm, H_m)) +
  geom_point(alpha=0.4) +
  geom_smooth(method=&amp;quot;lm&amp;quot;) +
  facet_wrap(~Esp) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:9-dap-h-spp&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-08-27-ajuste-de-um-modelo-linear-para-varios-fatores_files/figure-html/9-dap-h-spp-1.png&#34; alt=&#34;Relação entre o diâmetro e a altura por espécie.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  2: Relação entre o diâmetro e a altura por espécie.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A primeira etapa é entender que um data.frame pode conter vários tipos de elementos, como números, caracteres, listas e também outros data.frames. Para isso utilizaremos a função &lt;code&gt;nest()&lt;/code&gt; do pacote &lt;code&gt;tidyr&lt;/code&gt; e aninharemos os dados em função das espécies.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados %&amp;gt;%
  group_by(Esp) %&amp;gt;% 
  nest()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 24 x 2
##                        Esp              data
##                      &amp;lt;chr&amp;gt;            &amp;lt;list&amp;gt;
##  1            E_botryoides &amp;lt;tibble [80 x 8]&amp;gt;
##  2             E_brassiana &amp;lt;tibble [80 x 8]&amp;gt;
##  3         E_camaldulensis &amp;lt;tibble [80 x 8]&amp;gt;
##  4            E_citriodora &amp;lt;tibble [80 x 8]&amp;gt;
##  5             E_cloeziana &amp;lt;tibble [51 x 8]&amp;gt;
##  6      E_dunnii_urophylla &amp;lt;tibble [80 x 8]&amp;gt;
##  7               E_exserta &amp;lt;tibble [80 x 8]&amp;gt;
##  8            E_grandis_AT &amp;lt;tibble [80 x 8]&amp;gt;
##  9 E_grandis_camaldulensis &amp;lt;tibble [80 x 8]&amp;gt;
## 10            E_grandis_CH &amp;lt;tibble [80 x 8]&amp;gt;
## # ... with 14 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora podemos ajustar um modelo de regressão para cada espécie utilizando a função &lt;code&gt;map&lt;/code&gt;,do pacote &lt;code&gt;purrr&lt;/code&gt;. Podemos ainda extrair as informações desses modelos com as funções &lt;code&gt;glance&lt;/code&gt;, &lt;code&gt;tidy&lt;/code&gt; e &lt;code&gt;augment&lt;/code&gt;, do pacote &lt;code&gt;broom&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_modl &amp;lt;- dados %&amp;gt;%
  group_by(Esp) %&amp;gt;% 
  nest() %&amp;gt;% 
  mutate(
    ajuste = data %&amp;gt;% map(~ lm(log(H_m) ~ I(1/DAP_cm), data = .)),
    resumo = map(ajuste, glance),
    coef = map(ajuste, tidy),
    resid = map(ajuste, augment)
  )

dados_modl&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 24 x 6
##                        Esp              data   ajuste
##                      &amp;lt;chr&amp;gt;            &amp;lt;list&amp;gt;   &amp;lt;list&amp;gt;
##  1            E_botryoides &amp;lt;tibble [80 x 8]&amp;gt; &amp;lt;S3: lm&amp;gt;
##  2             E_brassiana &amp;lt;tibble [80 x 8]&amp;gt; &amp;lt;S3: lm&amp;gt;
##  3         E_camaldulensis &amp;lt;tibble [80 x 8]&amp;gt; &amp;lt;S3: lm&amp;gt;
##  4            E_citriodora &amp;lt;tibble [80 x 8]&amp;gt; &amp;lt;S3: lm&amp;gt;
##  5             E_cloeziana &amp;lt;tibble [51 x 8]&amp;gt; &amp;lt;S3: lm&amp;gt;
##  6      E_dunnii_urophylla &amp;lt;tibble [80 x 8]&amp;gt; &amp;lt;S3: lm&amp;gt;
##  7               E_exserta &amp;lt;tibble [80 x 8]&amp;gt; &amp;lt;S3: lm&amp;gt;
##  8            E_grandis_AT &amp;lt;tibble [80 x 8]&amp;gt; &amp;lt;S3: lm&amp;gt;
##  9 E_grandis_camaldulensis &amp;lt;tibble [80 x 8]&amp;gt; &amp;lt;S3: lm&amp;gt;
## 10            E_grandis_CH &amp;lt;tibble [80 x 8]&amp;gt; &amp;lt;S3: lm&amp;gt;
## # ... with 14 more rows, and 3 more variables: resumo &amp;lt;list&amp;gt;, coef &amp;lt;list&amp;gt;,
## #   resid &amp;lt;list&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Da mesma forma que aninhamos os dados por espécie, podemos retorná-los para o formato original, mas agora mostrando apenas as informações que realmente interessam.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_modl %&amp;gt;%
  select(Esp, resumo) %&amp;gt;% 
  unnest(resumo)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 24 x 12
##                        Esp r.squared adj.r.squared      sigma statistic
##                      &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1            E_botryoides 0.7865503     0.7832152 0.13638082 235.83647
##  2             E_brassiana 0.7034805     0.6984547 0.16015749 139.97510
##  3         E_camaldulensis 0.7193692     0.7156767 0.12781229 194.81849
##  4            E_citriodora 0.6017939     0.5958506 0.10226763 101.25459
##  5             E_cloeziana 0.2595328     0.2339995 0.16724765  10.16446
##  6      E_dunnii_urophylla 0.7199293     0.7159283 0.16115569 179.93693
##  7               E_exserta 0.5897407     0.5837949 0.19572456  99.18630
##  8            E_grandis_AT 0.7472094     0.7438832 0.07718312 224.64407
##  9 E_grandis_camaldulensis 0.8290924     0.8265415 0.16085772 325.02460
## 10            E_grandis_CH 0.7764890     0.7731530 0.10465726 232.76148
## # ... with 14 more rows, and 7 more variables: p.value &amp;lt;dbl&amp;gt;, df &amp;lt;int&amp;gt;,
## #   logLik &amp;lt;dbl&amp;gt;, AIC &amp;lt;dbl&amp;gt;, BIC &amp;lt;dbl&amp;gt;, deviance &amp;lt;dbl&amp;gt;, df.residual &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_modl %&amp;gt;%
  select(Esp, coef ) %&amp;gt;% 
  unnest(coef)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 48 x 6
##                Esp        term  estimate  std.error  statistic
##              &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
##  1    E_botryoides (Intercept)  2.633365 0.04223569  62.349272
##  2    E_botryoides I(1/DAP_cm) -4.129688 0.26891300 -15.356968
##  3     E_brassiana (Intercept)  2.014323 0.05110864  39.412563
##  4     E_brassiana I(1/DAP_cm) -2.373711 0.20063302 -11.831107
##  5 E_camaldulensis (Intercept)  2.727702 0.04605191  59.231027
##  6 E_camaldulensis I(1/DAP_cm) -4.792441 0.34335365 -13.957740
##  7    E_citriodora (Intercept)  2.553408 0.05513037  46.315809
##  8    E_citriodora I(1/DAP_cm) -3.802655 0.37790230 -10.062534
##  9     E_cloeziana (Intercept)  2.323552 0.11578912  20.067098
## 10     E_cloeziana I(1/DAP_cm) -2.842311 0.89151651  -3.188176
## # ... with 38 more rows, and 1 more variables: p.value &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_modl %&amp;gt;%
  select(Esp, resid) %&amp;gt;% 
  unnest(resid)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,633 x 11
##             Esp .rownames log.H_m. I.1.DAP_cm.  .fitted    .se.fit
##           &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
##  1 E_botryoides         1 1.871802  0.24390244 1.626124 0.03165108
##  2 E_botryoides         2 2.079442  0.10309278 2.207624 0.02008843
##  3 E_botryoides         4 2.014903  0.13157895 2.089985 0.01712280
##  4 E_botryoides         5 1.609438  0.26315789 1.546605 0.03614528
##  5 E_botryoides         7 2.197225  0.07936508 2.305612 0.02418794
##  6 E_botryoides         9 2.079442  0.14285714 2.043409 0.01679076
##  7 E_botryoides        10 2.014903  0.13333333 2.082740 0.01703615
##  8 E_botryoides        13 1.609438  0.16666667 1.945083 0.01784853
##  9 E_botryoides        14 2.302585  0.09803922 2.228493 0.02086574
## 10 E_botryoides        15 2.140066  0.12048193 2.135812 0.01795064
## # ... with 1,623 more rows, and 5 more variables: .resid &amp;lt;dbl&amp;gt;,
## #   .hat &amp;lt;dbl&amp;gt;, .sigma &amp;lt;dbl&amp;gt;, .cooksd &amp;lt;dbl&amp;gt;, .std.resid &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Após o ajuste do modelo, temos de predizer as alturas. O único adendo para esse comando é que precisamos fazer em duas etapas, uma utilizando a função &lt;code&gt;predict&lt;/code&gt; e outra para trazer o valor predito para a escala natural, pois o modelo foi ajustado na escala logarítmica.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_pred &amp;lt;- dados_modl %&amp;gt;% 
  mutate(
    hpred = map2(ajuste, data, predict),
    hpred = map(hpred, exp)
  ) %&amp;gt;%
  select(Esp, data, hpred)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por fim, temos de volta um data.frame com as alturas preditas. Por mais que o ajuste tenha ficado razoável, na prática a construção de modelos de relação hipsométrica envolvem outras etapas e um maior rigor em termos estatísticos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados_compl &amp;lt;- dados_pred %&amp;gt;%
  unnest(hpred, data)

dados_compl&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,881 x 10
##             Esp     hpred N_tume I_meses Parc_m2 N_arv DAP_cm   H_m   Cod
##           &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
##  1 E_botryoides  5.084129     55      24     600     1    4.1   6.5    NA
##  2 E_botryoides  9.094080     55      24     600     2    9.7   8.0    NA
##  3 E_botryoides        NA     55      24     600     3     NA    NA     5
##  4 E_botryoides  8.084791     55      24     600     4    7.6   7.5     2
##  5 E_botryoides  4.695500     55      24     600     5    3.8   5.0    NA
##  6 E_botryoides        NA     55      24     600     6     NA    NA     1
##  7 E_botryoides 10.030312     55      24     600     7   12.6   9.0     6
##  8 E_botryoides        NA     55      24     600     8     NA    NA     1
##  9 E_botryoides  7.716873     55      24     600     9    7.0   8.0    NA
## 10 E_botryoides  8.026428     55      24     600    10    7.5   7.5    NA
## # ... with 1,871 more rows, and 1 more variables: Cod2 &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-10-14                  
## 
##  package    * version    date       source                            
##  assertthat   0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports    1.1.1      2017-09-25 CRAN (R 3.3.3)                    
##  base       * 3.3.3      2017-03-06 local                             
##  bindr        0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp   * 0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown     0.1        2017-08-22 CRAN (R 3.3.3)                    
##  bookdown     0.5        2017-08-20 CRAN (R 3.3.3)                    
##  broom      * 0.4.2      2017-02-13 CRAN (R 3.3.2)                    
##  colorspace   1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  curl         2.8.1      2017-07-21 CRAN (R 3.3.3)                    
##  datasets   * 3.3.3      2017-03-06 local                             
##  devtools     1.13.3     2017-08-02 CRAN (R 3.3.3)                    
##  digest       0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr      * 0.7.4      2017-09-28 CRAN (R 3.3.3)                    
##  evaluate     0.10.1     2017-06-24 CRAN (R 3.3.3)                    
##  foreign      0.8-67     2016-09-13 CRAN (R 3.3.3)                    
##  ggplot2    * 2.2.1.9000 2017-07-15 Github (tidyverse/ggplot2@45853c7)
##  glue         1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  graphics   * 3.3.3      2017-03-06 local                             
##  grDevices  * 3.3.3      2017-03-06 local                             
##  grid         3.3.3      2017-03-06 local                             
##  gtable       0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  highr        0.6        2016-05-09 CRAN (R 3.3.3)                    
##  hms          0.3        2016-11-22 CRAN (R 3.3.2)                    
##  htmltools    0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  knitr        1.17       2017-08-10 CRAN (R 3.3.3)                    
##  labeling     0.3        2014-08-23 CRAN (R 3.3.2)                    
##  lattice      0.20-34    2016-09-06 CRAN (R 3.3.3)                    
##  lazyeval     0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  magrittr     1.5        2014-11-22 CRAN (R 3.3.2)                    
##  memoise      1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods    * 3.3.3      2017-03-06 local                             
##  mnormt       1.5-5      2016-10-15 CRAN (R 3.3.2)                    
##  munsell      0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  nlme         3.1-131    2017-02-06 CRAN (R 3.3.3)                    
##  pacman     * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  parallel     3.3.3      2017-03-06 local                             
##  pkgconfig    2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr         1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  psych        1.7.8      2017-09-09 CRAN (R 3.3.3)                    
##  purrr      * 0.2.3      2017-08-02 CRAN (R 3.3.3)                    
##  R6           2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  Rcpp         0.12.13    2017-09-28 CRAN (R 3.3.3)                    
##  readr      * 1.1.1      2017-05-16 CRAN (R 3.3.3)                    
##  reshape2     1.4.2      2016-10-22 CRAN (R 3.3.2)                    
##  rlang        0.1.2      2017-08-09 CRAN (R 3.3.3)                    
##  rmarkdown    1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot    1.2        2017-01-16 CRAN (R 3.3.3)                    
##  scales       0.5.0      2017-08-24 CRAN (R 3.3.3)                    
##  stats      * 3.3.3      2017-03-06 local                             
##  stringi      1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr      1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble       1.3.4      2017-08-22 CRAN (R 3.3.3)                    
##  tidyr      * 0.7.1      2017-09-01 CRAN (R 3.3.3)                    
##  tidyselect   0.2.0      2017-08-30 CRAN (R 3.3.3)                    
##  tools        3.3.3      2017-03-06 local                             
##  utils      * 3.3.3      2017-03-06 local                             
##  withr        2.0.0      2017-07-28 CRAN (R 3.3.3)                    
##  yaml         2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>