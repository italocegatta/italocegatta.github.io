<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ggthemes on Ítalo Cegatta</title>
    <link>/tags/ggthemes/index.xml</link>
    <description>Recent content in Ggthemes on Ítalo Cegatta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="/tags/ggthemes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>100 anos do posto meteorológico da ESALQ</title>
      <link>/100-anos-do-posto-meteorologico-da-esalq/</link>
      <pubDate>Sat, 14 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/100-anos-do-posto-meteorologico-da-esalq/</guid>
      <description>&lt;p&gt;No dia 31 de dezembro de 2016 o Posto Meteorológico da &lt;a href=&#34;http://www.esalq.usp.br/departamentos/leb/posto/&#34;&gt;ESALQ/USP&lt;/a&gt; completou 100 anos de funcionamento. Em ‘comemoração’ a este belo banco de dados, pretendo fazer alguns gráficos para analisar, sem muita pretensão, como o clima variou de lá pra cá.&lt;/p&gt;
&lt;p&gt;No site do Posto podemos encontrar os dados nas escalas diária e mensal. Separei apenas os &lt;a href=&#34;http://www.esalq.usp.br/departamentos/leb/postocon.html&#34;&gt;dados mensais&lt;/a&gt; para vermos aqui. Fiz algumas poucas adaptações no banco para poder pelo menos iniciar a análise. Não considerei nenhuma consistência e preenchimento de falhas (tem bastante, o que é completamente compreensível!).&lt;/p&gt;
&lt;p&gt;Minha primeira movimentação é criar colunas para identificar o ano e as décadas, precisaremos delas mais para frente.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, RcppRoll, lubridate, stringr, ggplot2, ggridges, ggthemes)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clima &amp;lt;- read_csv2(&amp;quot;https://raw.githubusercontent.com/italocegatta/italocegatta.github.io_source/master/content/dados/posto_esalq.csv&amp;quot;) %&amp;gt;% 
  mutate(
    data = dmy(data),
    ano = year(data),
    decada_label = cut(ano, breaks = seq(1910, 2020, by = 10), dig.lab = 100, right = FALSE),
    decada = as.numeric(str_extract(decada_label, &amp;quot;[0-9]+&amp;quot;))
  )

clima&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,200 x 9
##          data   prec    ur t_max t_min t_med   ano decada_label decada
##        &amp;lt;date&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;       &amp;lt;fctr&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 1917-01-01 295.70    NA  28.1  18.3  23.2  1917  [1910,1920)   1910
##  2 1917-02-01 135.76    NA  28.3  18.4  23.3  1917  [1910,1920)   1910
##  3 1917-03-01  58.90    NA  28.6  16.9  22.7  1917  [1910,1920)   1910
##  4 1917-04-01 116.20    NA  26.7  13.9  20.3  1917  [1910,1920)   1910
##  5 1917-05-01  58.50    NA  22.2   8.6  15.4  1917  [1910,1920)   1910
##  6 1917-06-01  13.00    NA  23.3   6.3  14.8  1917  [1910,1920)   1910
##  7 1917-07-01  13.30    NA  24.0   7.7  15.9  1917  [1910,1920)   1910
##  8 1917-08-01   5.40    NA  26.4   7.5  16.9  1917  [1910,1920)   1910
##  9 1917-09-01  62.20    NA  27.8  12.2  20.0  1917  [1910,1920)   1910
## 10 1917-10-01  58.40    NA  27.6  13.8  20.7  1917  [1910,1920)   1910
## # ... with 1,190 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vou começar pela precipitação mensal. Para visualizar a distribuição dos dados a melhor abordagem é fazer um histograma. Vamos criar um histograma com intervalo de classe de 15 mm de chuva para cada mês do ano considerando os 100 anos de dados.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clima %&amp;gt;% 
  mutate(mes = month(data)) %&amp;gt;% 
  ggplot(aes(prec, rev(factor(mes)), height = ..density..)) +
  geom_density_ridges(stat = &amp;quot;binline&amp;quot;, binwidth = 15, fill = &amp;quot;grey20&amp;quot;, color = &amp;quot;grey90&amp;quot;) +
  labs(
    x = &amp;quot;Chuva mensal (mm)&amp;quot;,
    y = &amp;quot;Mês&amp;quot;
  ) +
  scale_fill_viridis_c() +
  scale_x_continuous(breaks = seq(0,700, 30)) +
  scale_y_discrete(labels = format(ISOdate(2000, 12:1, 1), &amp;quot;%b&amp;quot;)) +
  theme_few()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;4800&#34; /&gt;&lt;/p&gt;
&lt;p&gt;E qual a década que mais choveu? Como variou a chuva anual ao longo desses 100 anos? Primeiro precisamos calcular quanto choveu em cada década. Em seguida vamos calcular quanto choveu em cada ano e juntar as duas informações. No gráfico abaixo, representei a média da década numa linha de tendência suavizada. Notem que a seca de 2014 Não foi a maior do século, houveram outros 4 anos mais secos desde de 1917.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prec_decada &amp;lt;- clima %&amp;gt;% 
  group_by(decada, ano) %&amp;gt;% 
  summarise(prec = sum(prec)) %&amp;gt;% 
  group_by(decada) %&amp;gt;% 
  summarise(prec = mean(prec)) 

clima %&amp;gt;% 
  group_by(decada, ano) %&amp;gt;% 
  summarise(prec = sum(prec)) %&amp;gt;% 
  ggplot(aes(ano, prec)) +
    geom_line() +
    geom_point() +
    geom_smooth(
      data = prec_decada,
      aes(decada + 5, prec)
    ) +
    labs(
      x = &amp;quot;Ano&amp;quot;,
      y = &amp;quot;Precipitação anual (mm)&amp;quot;
    ) +
    scale_x_continuous(breaks = seq(1917, 2017, 10)) +
    theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;4800&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Passando para a temperatura média, podemos construir um painel com a densidade de probabilidade para valores que variam entre 12,5 a 27,7 (amplitude dos dados).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(clima, aes(t_med)) +
  geom_density() +
  facet_wrap(~ano) +
  labs(
    x = &amp;quot;Temperatura média mensal (ºC)&amp;quot;,
    y = &amp;quot;Densidade&amp;quot;
  ) +
  theme_few(base_size = 9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;4800&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Considerando as décadas, podemos fazer um gráfico um pouco mais simples para facilitar a visualização. Agora, cada década tem sua distribuição de probabilidade. Aparentemente, a calda da direita está se deslocando para maiores temperaturas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(clima, aes(t_med, factor(decada), fill = ..x..)) +
  geom_density_ridges_gradient(show.legend = FALSE, color = &amp;quot;white&amp;quot;) +
  labs(
    x = &amp;quot;Temperatura média mensal (ºC)&amp;quot;,
    y = &amp;quot;Década&amp;quot;
  ) +
  scale_fill_viridis_c() +
  theme_few(base_size = 9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;4800&#34; /&gt;&lt;/p&gt;
&lt;p&gt;E quanto a variação da temperatura nos meses do ano? Quanto podemos esperar de frio ou calor em cada mês?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clima %&amp;gt;% 
  mutate(mes = month(data)) %&amp;gt;% 
  ggplot(aes(t_med, rev(factor(mes)),  fill = ..x..)) +
  geom_density_ridges_gradient(color = &amp;quot;white&amp;quot;, show.legend = FALSE) +
  labs(
    x = &amp;quot;Temperatura média mensal (ºC)&amp;quot;,
    y = &amp;quot;Mês&amp;quot;
  ) +
  scale_fill_viridis_c() +
  scale_x_continuous(breaks = seq(0,40, 4)) +
  scale_y_discrete(labels = format(ISOdate(2000, 12:1, 1), &amp;quot;%b&amp;quot;)) +
  theme_few()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;4800&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Podemos também visualizar a amplitude da temperatura máxima e mínima ao longo dos anos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(clima, aes(month(data))) +
  geom_ribbon(aes(ymax = t_max, ymin = t_min)) +
  facet_wrap(~ano) +
  labs(
    x = &amp;quot;Mês&amp;quot;,
    y = &amp;quot;Amplitude da temperatura mínima e máxima mensal (ºC)&amp;quot;
  ) +
  scale_x_continuous(
    breaks = seq(1, 12, 2), 
    labels = format(ISOdate(2000, seq(1, 12, 2), 1), &amp;quot;%b&amp;quot;)
  ) +
  theme_few(10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;5200&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Para finalizar, vamos calcular a média móvel de 30 anos para a temperatura média. Sem dúvida, dos anos 90 pra cá a temperatura média só vem subindo. A minha grande dúvida é: como será que a produção de alimentos e biomassa vai se comportar com essa mudança de clima? Será um grande desafio para a nossa geração, sem dúvida.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clima_normal &amp;lt;- clima %&amp;gt;%
  filter(!is.na(t_med)) %&amp;gt;% 
  group_by(ano = year(data)) %&amp;gt;%
  summarise(t_med = mean(t_med, na.rm = TRUE)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  mutate(t_med_movel = roll_mean(t_med, 30, align = &amp;quot;right&amp;quot;, fill = NA)) %&amp;gt;% 
  filter(!is.na(t_med_movel))

ggplot(clima_normal, aes(t_med_movel, ano)) +
  geom_path() +
  geom_point() +
    labs(
    x = &amp;quot;Média móvel da temperatura média (ºC)&amp;quot;,
    y = &amp;quot;Ano&amp;quot;
  ) +
  scale_y_reverse(breaks = seq(1940, 2017, by = 5)) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-14-100-anos-do-posto-meteorologico-da-esalq_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;4800&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-10-14                  
## 
##  package     * version    date       source                            
##  assertthat    0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports     1.1.1      2017-09-25 CRAN (R 3.3.3)                    
##  base        * 3.3.3      2017-03-06 local                             
##  bindr         0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp    * 0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown      0.1        2017-08-22 CRAN (R 3.3.3)                    
##  bookdown      0.5        2017-08-20 CRAN (R 3.3.3)                    
##  colorspace    1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  curl          2.8.1      2017-07-21 CRAN (R 3.3.3)                    
##  datasets    * 3.3.3      2017-03-06 local                             
##  devtools      1.13.3     2017-08-02 CRAN (R 3.3.3)                    
##  digest        0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr       * 0.7.4      2017-09-28 CRAN (R 3.3.3)                    
##  evaluate      0.10.1     2017-06-24 CRAN (R 3.3.3)                    
##  ggplot2     * 2.2.1.9000 2017-07-15 Github (tidyverse/ggplot2@45853c7)
##  ggridges    * 0.4.1      2017-09-15 CRAN (R 3.3.3)                    
##  ggthemes    * 3.4.0      2017-02-19 CRAN (R 3.3.3)                    
##  glue          1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  graphics    * 3.3.3      2017-03-06 local                             
##  grDevices   * 3.3.3      2017-03-06 local                             
##  grid          3.3.3      2017-03-06 local                             
##  gtable        0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  hms           0.3        2016-11-22 CRAN (R 3.3.2)                    
##  htmltools     0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  knitr         1.17       2017-08-10 CRAN (R 3.3.3)                    
##  labeling      0.3        2014-08-23 CRAN (R 3.3.2)                    
##  lazyeval      0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  lubridate   * 1.6.0      2016-09-13 CRAN (R 3.3.2)                    
##  magrittr      1.5        2014-11-22 CRAN (R 3.3.2)                    
##  memoise       1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods     * 3.3.3      2017-03-06 local                             
##  munsell       0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  pacman      * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  pkgconfig     2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr          1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  R6            2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  Rcpp          0.12.13    2017-09-28 CRAN (R 3.3.3)                    
##  RcppRoll    * 0.2.2      2015-04-05 CRAN (R 3.3.3)                    
##  readr       * 1.1.1      2017-05-16 CRAN (R 3.3.3)                    
##  rlang         0.1.2      2017-08-09 CRAN (R 3.3.3)                    
##  rmarkdown     1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot     1.2        2017-01-16 CRAN (R 3.3.3)                    
##  scales        0.5.0      2017-08-24 CRAN (R 3.3.3)                    
##  stats       * 3.3.3      2017-03-06 local                             
##  stringi       1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr     * 1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble        1.3.4      2017-08-22 CRAN (R 3.3.3)                    
##  tools         3.3.3      2017-03-06 local                             
##  utils       * 3.3.3      2017-03-06 local                             
##  viridisLite   0.2.0      2017-03-24 CRAN (R 3.3.3)                    
##  withr         2.0.0      2017-07-28 CRAN (R 3.3.3)                    
##  yaml          2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Gráficos com dimensão espacial e temporal</title>
      <link>/graficos-com-dimensao-espacial-e-temporal/</link>
      <pubDate>Sat, 08 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/graficos-com-dimensao-espacial-e-temporal/</guid>
      <description>&lt;p&gt;O post de hoje é sobre visualização de dados com dimensão espacial e temporal. Basicamente são gráficos que têm uma representação geográfica associada a informações que variam no tempo. Este tipo de análise é comum no meu dia a dia e por isso resolvi deixar 3 alternativas resgistradas aqui. O contexto que iremos abordar está relacionado ao banco de dados de focos de incêndios registrados pelo INPE no &lt;a href=&#34;http://www.inpe.br/queimadas/situacao-atual&#34;&gt;Programa Queimadas Monitoramento por Satélites&lt;/a&gt;. O site é bem interessante e apresenta algumas estatísticas úteis sobre as queimadas na América do Sul e Brasil. Iremos trabalhar com a tabela que resume os focos de incêndios por ano e Estado brasileiro.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, sf, ggplot2, ggthemes, geofacet, gganimate, viridis, scales)
pacman::p_load_gh(&amp;quot;italocegatta/brmap&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O primeiro passo foi copiar os dados da página e organizá-los no formato &lt;a href=&#34;https://italocegatta.github.io/o-conceito-tidy-data/&#34;&gt;tidy&lt;/a&gt;. Poderíamos fazer uma análise exploratória dos dados, mas quero manter o foco em algo bem pontual: como mostrar os dados brutos de uma só vez? Ou seja, considerando a dimensão de tempo (ano), geografia (localização do estado) e variável resposta (focos) na mesma janela gráfica, de que forma poderíamos apresentar os dados?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;focos &amp;lt;- read_csv2(&amp;quot;https://raw.githubusercontent.com/italocegatta/italocegatta.github.io_source/master/content/dados/base_incendios.csv&amp;quot;)

focos&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 162 x 3
##    sigla   ano focos
##    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1    AC  2011    13
##  2    AL  2011   127
##  3    AM  2011   159
##  4    AP  2011     5
##  5    BA  2011   883
##  6    CE  2011    44
##  7    DF  2011     8
##  8    ES  2011    55
##  9    GO  2011   492
## 10    MA  2011   656
## # ... with 152 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos agora adicionar a referência espacial aos dados utilizando os polígonos do pacote &lt;a href=&#34;https://github.com/italocegatta/brmap&#34;&gt;brmap&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;estados_focos &amp;lt;-  focos %&amp;gt;% 
  left_join(brmap_estado, by = &amp;quot;sigla&amp;quot;)

estados_focos&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 162 x 6
##    sigla   ano focos cod_estado           estado          geometry
##    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;            &amp;lt;chr&amp;gt;  &amp;lt;simple_feature&amp;gt;
##  1    AC  2011    13         12             Acre &amp;lt;POLYGON ((-7...&amp;gt;
##  2    AL  2011   127         27          Alagoas &amp;lt;POLYGON ((-3...&amp;gt;
##  3    AM  2011   159         13         Amazonas &amp;lt;POLYGON ((-6...&amp;gt;
##  4    AP  2011     5         16            Amapá &amp;lt;POLYGON ((-5...&amp;gt;
##  5    BA  2011   883         29            Bahia &amp;lt;POLYGON ((-3...&amp;gt;
##  6    CE  2011    44         23            Ceará &amp;lt;POLYGON ((-4...&amp;gt;
##  7    DF  2011     8         53 Distrito Federal &amp;lt;POLYGON ((-4...&amp;gt;
##  8    ES  2011    55         32   Espírito Santo &amp;lt;POLYGON ((-4...&amp;gt;
##  9    GO  2011   492         52            Goiás &amp;lt;POLYGON ((-5...&amp;gt;
## 10    MA  2011   656         21         Maranhão &amp;lt;POLYGON ((-4...&amp;gt;
## # ... with 152 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A primeira abordagem vai utilizar o pacote &lt;a href=&#34;https://github.com/hafen/geofacet&#34;&gt;geofacet&lt;/a&gt;. Ele permite criarmos um grid de referência para orientar a função &lt;code&gt;facet_wrap&lt;/code&gt; de &lt;code&gt;ggplot2&lt;/code&gt;. O pacote já vem carregado com um grid do Brasil, o &lt;code&gt;br_grid1&lt;/code&gt;, mas você pode construir e utilizar seu próprio grid. Eu, particularmente, gosto desta representação pois é extramamente flexível e comporta uma infinidade de gráficos (linhas, pontos, barras…) e dimenções (color, shape, size…). O gráfico &lt;a href=&#34;#fig:focos-geofacet&#34;&gt;1&lt;/a&gt; está bem simples mas cumpre seu papel em facilitar a percepção da variação anual e dar uma noção da região espacial do Estado no Brasil.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(estados_focos, aes(ano, focos)) +
  geom_line() +
  facet_geo(~estado, grid = br_grid1) +
  labs(
    x = &amp;quot;Ano&amp;quot;,
    y = &amp;quot;Nº de focos de incêndios&amp;quot;
  ) +
  scale_x_continuous(breaks = 2011:2017, labels = 11:17) +
  scale_y_continuous(label = unit_format(unit = &amp;quot;k&amp;quot;, scale = 1e-3)) +
  theme_few()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:focos-geofacet&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2017-07-08-graficos-com-dimensao-espacial-e-temporal_files/figure-html/focos-geofacet-1.png&#34; alt=&#34;Representação em painel orientado utilizando linhas.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Representação em painel orientado utilizando linhas.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A segunda abordagem é relativamente simples e intuitiva. Construiremos um mapa temático utilizando o Nº de focos como escala de cor, mas organizado em um painel que tem como base o ano de registro. O gráfico &lt;a href=&#34;#fig:focos-facet&#34;&gt;2&lt;/a&gt; apela para a dimensão de cor e instantaneamente nos informa o estado mais crítico. Especificamente para esta análise ele este tipo de gráfico é muito apropriado.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(estados_focos) +
  geom_sf(aes(fill = focos), color = NA) +
  facet_wrap(~ano) +
  labs(fill = &amp;quot;Nº de focos de incêndios&amp;quot;) +
  scale_fill_viridis(label = unit_format(unit = &amp;quot;k&amp;quot;, scale = 1e-3)) +
  theme_bw() +
  theme(legend.position = &amp;quot;bottom&amp;quot;, legend.justification = &amp;quot;right&amp;quot;) +
  guides(fill = guide_colorbar(barwidth = 15, title.position = &amp;quot;top&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:focos-facet&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2017-07-08-graficos-com-dimensao-espacial-e-temporal_files/figure-html/focos-facet-1.png&#34; alt=&#34;Representação em painel utilizando cores.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  2: Representação em painel utilizando cores.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;E por fim, nossa terceira tentativa vai unificar os painéis do gráfico &lt;a href=&#34;#fig:focos-facet&#34;&gt;2&lt;/a&gt; em um gif animado. A limitação do gráfico é que muitas vezes nossos gráficos vão para documentos estáticos como PDF e Word, inviabilizando o gif.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(ggplot(estados_focos) +
  geom_sf(aes(fill = focos, frame = ano), color = NA) +
  ggtitle(&amp;quot;Ano:&amp;quot;) +
  labs(fill = &amp;quot;Nº de focos de incêndios&amp;quot;) +
  scale_fill_viridis(label = unit_format(unit = &amp;quot;k&amp;quot;, scale = 1e-3)) +
  theme_bw() +
  theme(legend.position = &amp;quot;bottom&amp;quot;, legend.justification = &amp;quot;right&amp;quot;) +
  guides(fill = guide_colorbar(barwidth = 15, title.position = &amp;quot;top&amp;quot;))
  ) %&amp;gt;% 
  gganimate()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;http://imgur.com/KoLpSsF&#34;&gt;&lt;img src=&#34;http://i.imgur.com/KoLpSsF.gif&#34; style=&#34;width:100%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-10-14                  
## 
##  package     * version    date       source                            
##  animation     2.5        2017-03-30 CRAN (R 3.3.3)                    
##  assertthat    0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports     1.1.1      2017-09-25 CRAN (R 3.3.3)                    
##  base        * 3.3.3      2017-03-06 local                             
##  base64enc     0.1-3      2015-07-28 CRAN (R 3.3.2)                    
##  bindr         0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp      0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown      0.1        2017-08-22 CRAN (R 3.3.3)                    
##  bookdown      0.5        2017-08-20 CRAN (R 3.3.3)                    
##  brmap       * 0.0.2      2017-08-17 local                             
##  colorspace    1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  curl          2.8.1      2017-07-21 CRAN (R 3.3.3)                    
##  datasets    * 3.3.3      2017-03-06 local                             
##  DBI           0.7        2017-06-18 CRAN (R 3.3.3)                    
##  devtools      1.13.3     2017-08-02 CRAN (R 3.3.3)                    
##  digest        0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr       * 0.7.4      2017-09-28 CRAN (R 3.3.3)                    
##  evaluate      0.10.1     2017-06-24 CRAN (R 3.3.3)                    
##  geofacet    * 0.1.5      2017-07-19 CRAN (R 3.3.3)                    
##  gganimate   * 0.1.0.9000 2017-05-24 Github (dgrtwo/gganimate@bf82002) 
##  ggplot2     * 2.2.1.9000 2017-07-15 Github (tidyverse/ggplot2@45853c7)
##  ggthemes    * 3.4.0      2017-02-19 CRAN (R 3.3.3)                    
##  glue          1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  graphics    * 3.3.3      2017-03-06 local                             
##  grDevices   * 3.3.3      2017-03-06 local                             
##  grid          3.3.3      2017-03-06 local                             
##  gridExtra     2.3        2017-09-09 CRAN (R 3.3.3)                    
##  gtable        0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  highr         0.6        2016-05-09 CRAN (R 3.3.3)                    
##  hms           0.3        2016-11-22 CRAN (R 3.3.2)                    
##  htmltools     0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  knitr         1.17       2017-08-10 CRAN (R 3.3.3)                    
##  labeling      0.3        2014-08-23 CRAN (R 3.3.2)                    
##  lazyeval      0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  magrittr      1.5        2014-11-22 CRAN (R 3.3.2)                    
##  memoise       1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods     * 3.3.3      2017-03-06 local                             
##  munsell       0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  pacman      * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  pkgconfig     2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr          1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  R6            2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  Rcpp          0.12.13    2017-09-28 CRAN (R 3.3.3)                    
##  readr       * 1.1.1      2017-05-16 CRAN (R 3.3.3)                    
##  rlang         0.1.2      2017-08-09 CRAN (R 3.3.3)                    
##  rmarkdown     1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot     1.2        2017-01-16 CRAN (R 3.3.3)                    
##  scales      * 0.5.0      2017-08-24 CRAN (R 3.3.3)                    
##  sf          * 0.5-4      2017-08-28 CRAN (R 3.3.3)                    
##  stats       * 3.3.3      2017-03-06 local                             
##  stringi       1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr       1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble        1.3.4      2017-08-22 CRAN (R 3.3.3)                    
##  tools         3.3.3      2017-03-06 local                             
##  udunits2      0.13       2016-11-17 CRAN (R 3.3.2)                    
##  units         0.4-6      2017-08-27 CRAN (R 3.3.3)                    
##  utils       * 3.3.3      2017-03-06 local                             
##  viridis     * 0.4.0      2017-03-27 CRAN (R 3.3.3)                    
##  viridisLite * 0.2.0      2017-03-24 CRAN (R 3.3.3)                    
##  withr         2.0.0      2017-07-28 CRAN (R 3.3.3)                    
##  yaml          2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ANOVA e teste de Tukey</title>
      <link>/anova-e-teste-de-tukey/</link>
      <pubDate>Thu, 08 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/anova-e-teste-de-tukey/</guid>
      <description>&lt;p&gt;Análise de variância (ANOVA) e testes de médias são métodos comuns em artigos científicos. Você com certeza já viu aquelas letrinhas indicando a diferença entre tratamentos em algum estudo publicado. Por mais que este método esteja entrando em desuso - há uma tendência em abandonar esse tipo de abordagem estatística - penso que ainda o veremos por muitos anos no meio científico.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Como contexto, temos um teste de 5 progênies de eucalipto e queremos avaliar se volume por hectare (nossa variável resposta), difere entre os tratamentos.&lt;/p&gt;
&lt;p&gt;Pois bem, para percebermos a dimensão dos dados e qual a variabilidade de cada tratamento, vamos criar um boxplot (Figura &lt;a href=&#34;#fig:10-boxplot&#34;&gt;1&lt;/a&gt;). Caso você queira saber um pouco mais sobre este tipo de gráfico, veja o &lt;a href=&#34;https://italocegatta.github.io/os-graficos-que-explicam-nossos-dados-boxplot&#34;&gt;post sobre ele&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, tibble, ggplot2, ggthemes, car, agricolae)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados &amp;lt;- read_csv2(
  &amp;quot;https://github.com/italocegatta/italocegatta.github.io_source/raw/master/content/dados/base_progenie.csv&amp;quot;
)

dados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 30 x 3
##    repeticao progenie volume
##        &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
##  1         1        A    212
##  2         2        A    206
##  3         3        A    224
##  4         4        A    289
##  5         5        A    324
##  6         6        A    219
##  7         1        B    108
##  8         2        B    194
##  9         3        B    163
## 10         4        B    111
## # ... with 20 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(progenie, volume)) +
  geom_boxplot() +
  theme_bw() +
  theme_few()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:10-boxplot&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-09-08-anova-e-teste-de-tukey_files/figure-html/10-boxplot-1.png&#34; alt=&#34;Variabilidade do volume por hectare de cada tratamento.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Variabilidade do volume por hectare de cada tratamento.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A ANOVA é um método bastante consolidado no meio acadêmico. Basicamente, este método informa se existe um tratamento discrepante dentre os demais. Entretanto, ele exige que algumas premissas sejam atendidas, como: distribuição normal dos resíduos e homogeneidade de variância.&lt;/p&gt;
&lt;p&gt;Primeiro, vamos utilizar o teste de Levene para verificar se há homogeneidade de variância, ou homocedasticidade. Como o p-valor é maior que 5% não temos evidência significativa para rejeitar a hipótese nula de homogeneidade, ou seja, nossos dados tem homogeneidade de variância.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;leveneTest(volume ~ factor(progenie), data=dados)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Levene&amp;#39;s Test for Homogeneity of Variance (center = median)
##       Df F value  Pr(&amp;gt;F)  
## group  4  2.4677 0.07086 .
##       25                  
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O segundo pressuposto é a normalidade dos resíduos. Utilizaremos o teste de Shapiro-Wilk cuja hipótese nula é a de que os dados seguem uma distribuição normal. Como o p-valor é superior ao limite de 5%, podemos aceitar a hipótese nula e considerar nossos dados normais.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;anova &amp;lt;-  aov(volume ~ progenie, data=dados)

shapiro.test(resid(anova))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Shapiro-Wilk normality test
## 
## data:  resid(anova)
## W = 0.96097, p-value = 0.3279&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Uma vez que os pressupostos foram atendidos, seguiremos para a ANOVA. Note que, caso os testes de Levene e Shapiro-Wilk resultassem em um p-valor significante, ou seja, menor que 5%, teríamos que utilizar outro método estatístico para analisar nossos dados. Nesse caso, uma alternativa é utilizar testes não-paramétricos, uma vez que eles não exigem os pressupostos que acabamos de testar.&lt;/p&gt;
&lt;p&gt;Nossa ANOVA resultou em um p-valor menor que 5%, portanto, temos evidências de que ao menos um tratamento se diferencia dos demais. Isso já é uma resposta, mas pouco acrescenta à nossa pesquisa pois queremos saber quem é este tratamento discrepante. Ou melhor, queremos poder comparar os tratamentos entre si e verificar quais são estatisticamente iguais ou diferentes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(anova)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             Df Sum Sq Mean Sq F value   Pr(&amp;gt;F)    
## progenie     4  86726   21681    8.89 0.000131 ***
## Residuals   25  60974    2439                     
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para esta abordagem existem alguns testes de médias e cada um tem uma particularidade, mas de longe o mais utilizado é o de Tukey.&lt;/p&gt;
&lt;p&gt;A interpretação do teste de Tukey é simples. Após determinarmos a diferença mínima significativa (ou Honest Significant Difference - HSD), podemos julgar se as médias são iguais ou não. Em termos práticos, esse valor nos dá uma margem de igualdade, pois se a diferença entre dois tratamentos for maior do que isso, os médias são diferentes.&lt;/p&gt;
&lt;p&gt;A análise começa sempre pela maior média, no nosso caso a progênie A (245, 66). Com uma continha rápida, a média do tratamento A menos a diferença mínima significativa &lt;code&gt;245,66 - 83,73 = 161,93&lt;/code&gt;, aceitaremos que um tratamento é igual ao A se a média dele for maior que 161,93. O tratamento subsequente (o segundo do ranking) é a progênie D e como sua média é maior que 161,93 podemos dizer que ela é estatisticamente igual a progênie A.&lt;/p&gt;
&lt;p&gt;As próximas comparações seguem a mesma lógica. Quando registramos que duas médias são iguais, nós as rotulamos com a mesma letra para facilitar a identificação. Veja no fim do output as letras evidenciando a igualdade entre os tratamentos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tukey &amp;lt;- HSD.test(anova, &amp;quot;progenie&amp;quot;)

tukey&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $statistics
##    MSerror Df     Mean       CV      MSD
##   2438.953 25 165.7667 29.79233 83.73866
## 
## $parameters
##    test   name.t ntr StudentizedRange alpha
##   Tukey progenie   5         4.153363  0.05
## 
## $means
##     volume      std r Min Max    Q25   Q50    Q75
## A 245.6667 48.78798 6 206 324 213.75 221.5 272.75
## B 159.6667 49.47996 6 108 236 119.75 154.5 186.25
## C  80.5000 15.60449 6  63 100  70.00  76.5  93.50
## D 190.1667 75.37484 6 100 267 121.75 207.0 251.75
## E 152.8333 37.96534 6 106 210 133.75 141.5 175.50
## 
## $comparison
## NULL
## 
## $groups
##     volume groups
## A 245.6667      a
## D 190.1667     ab
## B 159.6667     bc
## E 152.8333     bc
## C  80.5000      c
## 
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;group&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para deixar mais visual ainda, podemos construir um gráfico de barras com a média de cada tratamento e adicionar a sua letra correspondente ao teste de Tukey (Figura &lt;a href=&#34;#fig:10-barras-tukey&#34;&gt;2&lt;/a&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tukey$groups %&amp;gt;% 
  rownames_to_column(var = &amp;quot;trt&amp;quot;) %&amp;gt;% 
  ggplot(aes(reorder(trt, volume, function(x) -mean(x)), volume)) +
    geom_bar(stat = &amp;quot;identity&amp;quot;) +
    geom_text(aes(label = groups), vjust = 1.8, size = 9, color = &amp;quot;white&amp;quot;) +
    labs(x = &amp;quot;Progênies&amp;quot;, y = &amp;quot;Médias&amp;quot;) +
    theme_few()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:10-barras-tukey&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-09-08-anova-e-teste-de-tukey_files/figure-html/10-barras-tukey-1.png&#34; alt=&#34;Médias dos tratamentos. As letras indicam médias estatisticamente iguais pelo teste de Tukey a 5% de significância.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  2: Médias dos tratamentos. As letras indicam médias estatisticamente iguais pelo teste de Tukey a 5% de significância.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-10-14                  
## 
##  package      * version    date       source                            
##  agricolae    * 1.2-8      2017-09-12 CRAN (R 3.3.3)                    
##  AlgDesign      1.1-7.3    2014-10-15 CRAN (R 3.3.2)                    
##  assertthat     0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports      1.1.1      2017-09-25 CRAN (R 3.3.3)                    
##  base         * 3.3.3      2017-03-06 local                             
##  bindr          0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp       0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown       0.1        2017-08-22 CRAN (R 3.3.3)                    
##  bookdown       0.5        2017-08-20 CRAN (R 3.3.3)                    
##  boot           1.3-18     2016-02-23 CRAN (R 3.3.3)                    
##  car          * 2.1-5      2017-07-04 CRAN (R 3.3.3)                    
##  cluster        2.0.5      2016-10-08 CRAN (R 3.3.3)                    
##  coda           0.19-1     2016-12-08 CRAN (R 3.3.3)                    
##  colorspace     1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  combinat       0.0-8      2012-10-29 CRAN (R 3.3.2)                    
##  curl           2.8.1      2017-07-21 CRAN (R 3.3.3)                    
##  datasets     * 3.3.3      2017-03-06 local                             
##  deldir         0.1-14     2017-04-22 CRAN (R 3.3.3)                    
##  devtools       1.13.3     2017-08-02 CRAN (R 3.3.3)                    
##  digest         0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr        * 0.7.4      2017-09-28 CRAN (R 3.3.3)                    
##  evaluate       0.10.1     2017-06-24 CRAN (R 3.3.3)                    
##  expm           0.999-2    2017-03-29 CRAN (R 3.3.3)                    
##  gdata          2.18.0     2017-06-06 CRAN (R 3.3.3)                    
##  ggplot2      * 2.2.1.9000 2017-07-15 Github (tidyverse/ggplot2@45853c7)
##  ggthemes     * 3.4.0      2017-02-19 CRAN (R 3.3.3)                    
##  glue           1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  gmodels        2.16.2     2015-07-22 CRAN (R 3.3.3)                    
##  graphics     * 3.3.3      2017-03-06 local                             
##  grDevices    * 3.3.3      2017-03-06 local                             
##  grid           3.3.3      2017-03-06 local                             
##  gtable         0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  gtools         3.5.0      2015-05-29 CRAN (R 3.3.2)                    
##  highr          0.6        2016-05-09 CRAN (R 3.3.3)                    
##  hms            0.3        2016-11-22 CRAN (R 3.3.2)                    
##  htmltools      0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  klaR           0.6-12     2014-08-06 CRAN (R 3.3.3)                    
##  knitr          1.17       2017-08-10 CRAN (R 3.3.3)                    
##  labeling       0.3        2014-08-23 CRAN (R 3.3.2)                    
##  lattice        0.20-34    2016-09-06 CRAN (R 3.3.3)                    
##  lazyeval       0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  LearnBayes     2.15       2014-05-29 CRAN (R 3.3.2)                    
##  lme4           1.1-14     2017-09-27 CRAN (R 3.3.3)                    
##  magrittr       1.5        2014-11-22 CRAN (R 3.3.2)                    
##  MASS           7.3-45     2016-04-21 CRAN (R 3.3.3)                    
##  Matrix         1.2-8      2017-01-20 CRAN (R 3.3.3)                    
##  MatrixModels   0.4-1      2015-08-22 CRAN (R 3.3.3)                    
##  memoise        1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods      * 3.3.3      2017-03-06 local                             
##  mgcv           1.8-17     2017-02-08 CRAN (R 3.3.3)                    
##  minqa          1.2.4      2014-10-09 CRAN (R 3.3.3)                    
##  munsell        0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  nlme           3.1-131    2017-02-06 CRAN (R 3.3.3)                    
##  nloptr         1.0.4      2014-08-04 CRAN (R 3.3.3)                    
##  nnet           7.3-12     2016-02-02 CRAN (R 3.3.3)                    
##  pacman       * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  parallel       3.3.3      2017-03-06 local                             
##  pbkrtest       0.4-7      2017-03-15 CRAN (R 3.3.3)                    
##  pkgconfig      2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr           1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  quantreg       5.33       2017-04-18 CRAN (R 3.3.3)                    
##  R6             2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  Rcpp           0.12.13    2017-09-28 CRAN (R 3.3.3)                    
##  readr        * 1.1.1      2017-05-16 CRAN (R 3.3.3)                    
##  rlang          0.1.2      2017-08-09 CRAN (R 3.3.3)                    
##  rmarkdown      1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot      1.2        2017-01-16 CRAN (R 3.3.3)                    
##  scales         0.5.0      2017-08-24 CRAN (R 3.3.3)                    
##  sp             1.2-5      2017-06-29 CRAN (R 3.3.3)                    
##  SparseM        1.77       2017-04-23 CRAN (R 3.3.3)                    
##  spdep          0.6-15     2017-09-01 CRAN (R 3.3.3)                    
##  splines        3.3.3      2017-03-06 local                             
##  stats        * 3.3.3      2017-03-06 local                             
##  stringi        1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr        1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble       * 1.3.4      2017-08-22 CRAN (R 3.3.3)                    
##  tools          3.3.3      2017-03-06 local                             
##  utils        * 3.3.3      2017-03-06 local                             
##  withr          2.0.0      2017-07-28 CRAN (R 3.3.3)                    
##  yaml           2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Os gráficos que explicam nossos dados (histograma)</title>
      <link>/os-graficos-que-explicam-nossos-dados-histograma/</link>
      <pubDate>Fri, 15 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/os-graficos-que-explicam-nossos-dados-histograma/</guid>
      <description>&lt;p&gt;Histogramas são usados para mostrar a frequência com que uma variável ocorre. Isto é muito interessante para mostrar qual a distribuição dos seus dados e podemos apresentar em forma de frequência absoluta, relativa, percentual e acumulada. Para exemplificar este tipo gráfico, vamos utilizar os dados de inventário de uma propriedade fictícia na Amazônia. Estes dados são meramente ilustrativos e não tem valor real. O objetivo aqui é apresentar algumas particularidades da construção de gráficos de barras no R e facilitar a vida de quem quer abandonar os gráficos do Excel.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, ggplot2, ggthemes)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados &amp;lt;- read_csv2(
  &amp;quot;https://raw.githubusercontent.com/italocegatta/italocegatta.github.io_source/master/content/dados/base_amazonia.csv&amp;quot;
)

dados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 276 x 7
##             Especie              Nome_cientifico Comercial   DAP  HCom
##               &amp;lt;chr&amp;gt;                        &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1 NAO IDENTIFICADA             Nao Identificada       Nao    20    10
##  2           EMBIRA                Lecythidaceae       Nao    34    13
##  3 NAO IDENTIFICADA             Nao Identificada       Nao    18     6
##  4         SUCUPIRA   Leguminosae-Papilionoideae       Nao    18     7
##  5           CANELA                    Lauraceae       Nao    24    10
##  6            TACHI                Lecythidaceae       Sim    21    10
##  7      ENVIRA CAJU                   Annonaceae       Nao    20    11
##  8            JUTAI Leguminosae-Caesalpinioideae       Nao    38    13
##  9          CATUABA                 Vochysiaceae       Sim    57    13
## 10 NAO IDENTIFICADA             Nao Identificada       Nao    22     7
## # ... with 266 more rows, and 2 more variables: Volume &amp;lt;dbl&amp;gt;, QF &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Primeiro vamos ver qual a distribuição dos indivíduos em classes de diâmetro. A Figura &lt;a href=&#34;#fig:7-hist-dap&#34;&gt;1&lt;/a&gt; mostra a frequência de indivíduos em classes de diâmetro de 10 cm. Visivelmente, podemos ver que a faixa de diâmetro mais frequente está entre 15 e 35 cm (centro de classe 20 e 30 cm, respectivamente).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(DAP)) +
  geom_histogram(binwidth = 10, color = &amp;quot;white&amp;quot;) +
  labs(x = &amp;quot;Diâmetro (cm)&amp;quot;, y = &amp;quot;Frequência (arv/ha)&amp;quot;) +
  scale_x_continuous(breaks = seq(0, 100,10)) +
  theme_few()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:7-hist-dap&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-07-15-os-graficos-que-explicam-nossos-dados-histograma_files/figure-html/7-hist-dap-1.png&#34; alt=&#34;Histograma com a frequência absoluta por classes de diâmetro.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Histograma com a frequência absoluta por classes de diâmetro.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Mas, e quanto às espécies comerciais? Como elas estão distribuídas? A Figura &lt;a href=&#34;#fig:7-hist-dap-comerc&#34;&gt;2&lt;/a&gt; faz esta diferenciação. E lembre-se, no manejo florestal da Amazônia só é permitido a exploração de árvores com diâmetro maior que 50 cm.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(DAP, fill = Comercial)) +
  geom_histogram(binwidth = 10, color = &amp;quot;white&amp;quot;, alpha = 0.5) +
  labs(x = &amp;quot;Diâmetro (cm)&amp;quot;, y = &amp;quot;Frequência (arv/ha)&amp;quot;) +
  scale_x_continuous(breaks = seq(0, 100,10)) +
  theme_few() +
  theme(legend.position = c(.9, .9)) +
  scale_fill_hue(&amp;quot;Comercial?&amp;quot;, labels = c(&amp;quot;Não&amp;quot;, &amp;quot;Sim&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:7-hist-dap-comerc&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-07-15-os-graficos-que-explicam-nossos-dados-histograma_files/figure-html/7-hist-dap-comerc-1.png&#34; alt=&#34;Histograma com a frequência absoluta por classes de diâmetro e separação pelo fator de árvores de interesse comercial.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  2: Histograma com a frequência absoluta por classes de diâmetro e separação pelo fator de árvores de interesse comercial.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Vamos melhorar um pouco mais a informação sob o ponto de vista da exploração: qual a frequência de indivíduos que são de interesse comercial e tem diâmetro mais que 50 cm? (Figura &lt;a href=&#34;#fig:7-hist-vol-exp&#34;&gt;3&lt;/a&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(Volume, fill = DAP &amp;gt; 50 &amp;amp; Comercial == &amp;quot;Sim&amp;quot;)) +
  geom_histogram(binwidth = 0.5, color = &amp;quot;white&amp;quot;, alpha = 0.5) +
  labs(x = Volume~individual ~ (m^3 / arv), y = &amp;quot;Frequência (arv/ha)&amp;quot;) +
  scale_y_continuous(breaks = seq(0, 150, 20)) +
  scale_x_continuous(breaks = seq(0, 10, 0.5)) +
  theme_few()  +
  theme(legend.position = c(.9, .9)) +
  scale_fill_hue(&amp;quot;Pode explorar?&amp;quot;, labels = c(&amp;quot;Não&amp;quot;, &amp;quot;Sim&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:7-hist-vol-exp&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-07-15-os-graficos-que-explicam-nossos-dados-histograma_files/figure-html/7-hist-vol-exp-1.png&#34; alt=&#34;Histograma com a frequência absoluta por classes de volume individual e separação pelo fator de árvores de interesse comercial e diâmetro maior que 50 cm.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  3: Histograma com a frequência absoluta por classes de volume individual e separação pelo fator de árvores de interesse comercial e diâmetro maior que 50 cm.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Se quisermos ainda apresentar o gráfico em termos das frequências relativas, podemos fazer a seguinte modificação, conforme a Figura &lt;a href=&#34;#fig:7-hist-vol-exp-rel&#34;&gt;4&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(Volume, fill = DAP &amp;gt; 50 &amp;amp; Comercial == &amp;quot;Sim&amp;quot;)) +
  geom_histogram(
    aes(y = ..count../sum(..count..)),
    binwidth = 0.5, color = &amp;quot;white&amp;quot;, alpha = 0.5
  ) +
  labs(x =  Volume~individual ~ (m^3 / arv), y = &amp;quot;Frequência (arv/ha)&amp;quot;) +
  scale_y_continuous(breaks = seq(0, .5, 0.05), labels = scales::percent) +
  scale_x_continuous(breaks = seq(0, 10, 0.5)) +
  theme_few()  +
  theme(legend.position = c(.9, .9)) +
  scale_fill_hue(&amp;quot;Pode explorar?&amp;quot;, labels = c(&amp;quot;Não&amp;quot;, &amp;quot;Sim&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:7-hist-vol-exp-rel&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-07-15-os-graficos-que-explicam-nossos-dados-histograma_files/figure-html/7-hist-vol-exp-rel-1.png&#34; alt=&#34;Histograma com a frequência relativa por classes de volume individual e separação pelo fator de árvores de interesse comercial e diâmetro maior que 50 cm.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  4: Histograma com a frequência relativa por classes de volume individual e separação pelo fator de árvores de interesse comercial e diâmetro maior que 50 cm.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-10-14                  
## 
##  package    * version    date       source                            
##  assertthat   0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports    1.1.1      2017-09-25 CRAN (R 3.3.3)                    
##  base       * 3.3.3      2017-03-06 local                             
##  bindr        0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp     0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown     0.1        2017-08-22 CRAN (R 3.3.3)                    
##  bookdown     0.5        2017-08-20 CRAN (R 3.3.3)                    
##  colorspace   1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  curl         2.8.1      2017-07-21 CRAN (R 3.3.3)                    
##  datasets   * 3.3.3      2017-03-06 local                             
##  devtools     1.13.3     2017-08-02 CRAN (R 3.3.3)                    
##  digest       0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr      * 0.7.4      2017-09-28 CRAN (R 3.3.3)                    
##  evaluate     0.10.1     2017-06-24 CRAN (R 3.3.3)                    
##  ggplot2    * 2.2.1.9000 2017-07-15 Github (tidyverse/ggplot2@45853c7)
##  ggthemes   * 3.4.0      2017-02-19 CRAN (R 3.3.3)                    
##  glue         1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  graphics   * 3.3.3      2017-03-06 local                             
##  grDevices  * 3.3.3      2017-03-06 local                             
##  grid         3.3.3      2017-03-06 local                             
##  gtable       0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  highr        0.6        2016-05-09 CRAN (R 3.3.3)                    
##  hms          0.3        2016-11-22 CRAN (R 3.3.2)                    
##  htmltools    0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  knitr        1.17       2017-08-10 CRAN (R 3.3.3)                    
##  labeling     0.3        2014-08-23 CRAN (R 3.3.2)                    
##  lazyeval     0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  magrittr     1.5        2014-11-22 CRAN (R 3.3.2)                    
##  memoise      1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods    * 3.3.3      2017-03-06 local                             
##  munsell      0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  pacman     * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  pkgconfig    2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr         1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  R6           2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  Rcpp         0.12.13    2017-09-28 CRAN (R 3.3.3)                    
##  readr      * 1.1.1      2017-05-16 CRAN (R 3.3.3)                    
##  rlang        0.1.2      2017-08-09 CRAN (R 3.3.3)                    
##  rmarkdown    1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot    1.2        2017-01-16 CRAN (R 3.3.3)                    
##  scales       0.5.0      2017-08-24 CRAN (R 3.3.3)                    
##  stats      * 3.3.3      2017-03-06 local                             
##  stringi      1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr      1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble       1.3.4      2017-08-22 CRAN (R 3.3.3)                    
##  tools        3.3.3      2017-03-06 local                             
##  utils      * 3.3.3      2017-03-06 local                             
##  withr        2.0.0      2017-07-28 CRAN (R 3.3.3)                    
##  yaml         2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Os gráficos que explicam nossos dados (heatmap)</title>
      <link>/os-graficos-que-explicam-nossos-dados-heatmap/</link>
      <pubDate>Sat, 09 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/os-graficos-que-explicam-nossos-dados-heatmap/</guid>
      <description>&lt;p&gt;O heatmap é um gráfico muito útil para identificar padrões, principalmente quando temos muitas variáveis no gráfico. Essencialmente o heatmap necessita de 3 variáveis: uma variável resposta e duas outras variáveis para compor os eixos x e y. Não há restrição quanto ao tipo de variável, qualquer uma delas podem ser quantitativa ou qualitativa. Talvez esse seja o trunfo do heatmap, essa flexbilidade quanto a natureza das variáveis nos permite utilizá-lo em diversos momentos e substituir gráficos mais tradicionais quando eles não dão conta do recado.&lt;/p&gt;
&lt;p&gt;Vamos trabalhar com os dados do &lt;a href=&#34;http://www.projetotume.com/&#34;&gt;Projeto TUME&lt;/a&gt;, especificamente com o TUME 0, plantado na Estação Experimental de Itatinga. O TUME é um projeto muito interessante e possui informações importantes sobre plantios de &lt;em&gt;Eucalyptus&lt;/em&gt; no Brasil, vale a pena visitar o site e aproveitar o conteúdo disponível.&lt;/p&gt;
&lt;p&gt;Vamos primeiro carregar os dados e fazer algumas alterações. Para auxiliar na ordem dos fatores no gráfico vamos adicionar um atributo na coluna &lt;code&gt;Esp&lt;/code&gt; informando a ordem crescente das espécies em função da altura dominante. Em seguida, apenas por conveniência, converti a idade dos inventários de meses para anos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, ggplot2, ggthemes, viridis)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados &amp;lt;- read_csv2(
  &amp;quot;https://github.com/italocegatta/italocegatta.github.io_source/raw/master/content/dados/tume0.csv&amp;quot;
)

# Cria um fator com o atributo para a variável Esp que informa a ordem crescente
# das espécies em função da altura dominante.
dados &amp;lt;- dados %&amp;gt;% 
  mutate(
    Esp = reorder(Esp, Hdom, function(x) max(x)),
    Idade = round(I_meses/12,1)
  )
dados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 138 x 16
##    N_tume             Esp I_meses Parc_m2 DAPmed DAPsd  Hmed   Hsd  Hdom
##     &amp;lt;int&amp;gt;          &amp;lt;fctr&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1      0         Clone_1      52  1425.6   11.4   1.4  16.5   1.3  17.8
##  2      0         Clone_2      52  1425.6   10.2   1.4  15.9   1.4  16.6
##  3      0         Clone_3      52  1425.6   10.7   1.6  15.0   1.3  16.1
##  4      0     E_benthamii      52  1425.6    9.0   2.7   9.8   2.3  13.0
##  5      0    E_botryoides      52  1425.6    9.1   4.3  10.8   3.4  15.3
##  6      0 E_camaldulensis      52  1425.6    8.3   2.9   8.3   2.3  11.8
##  7      0    E_citriodora      52  1425.6    8.0   3.5   8.3   2.8  12.0
##  8      0     E_cloeziana      52   928.8    7.5   2.5   7.0   2.0   9.6
##  9      0        E_deanei      52  1425.6   10.6   2.9  11.3   1.8  13.4
## 10      0        E_dunnii      52  1425.6    6.7   3.7   6.1   2.4  10.3
## # ... with 128 more rows, and 7 more variables: N_fuste &amp;lt;int&amp;gt;, Sobr &amp;lt;dbl&amp;gt;,
## #   G &amp;lt;dbl&amp;gt;, V &amp;lt;int&amp;gt;, IMA &amp;lt;dbl&amp;gt;, B &amp;lt;int&amp;gt;, Idade &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se fizermos a seguinte pergunta: qual gráfico podemos utilizar para mostrar o crescimento da altura dominantes dos materiais? Penso que a resposta rápida seria, um gráfico de linhas! Ok, vamos tentar, veja a Figura &lt;a href=&#34;#fig:6-linhas&#34;&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(Idade, Hdom, color = Esp)) +
  geom_line(size=1.5) +
  labs(x = &amp;quot;Idade (anos)&amp;quot;, y = &amp;quot;Altura dominante (m)&amp;quot;) +
  theme_few() +
  scale_color_viridis(
    name = &amp;quot;Materiais genéticos&amp;quot;,
    direction = -1, discrete = T
  ) +
  guides(col = guide_legend(ncol = 1, reverse = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:6-linhas&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-07-09-os-graficos-que-explicam-nossos-dados-heatmap_files/figure-html/6-linhas-1.png&#34; alt=&#34;Aumento da altura dominante utilizando gráficos de linhas.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Aumento da altura dominante utilizando gráficos de linhas.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Muito bem, o gráfico consegue mostar a tendência e o padrão de crescimento. Mas se alguém perguntar sobre o &lt;em&gt;Eucaluptus dunnii&lt;/em&gt;, capaz de demorarmos um tempo para encontrar a linha correspondente. Capaz ainda de não conseguirmos distinguir entre uma cor e outra. Essa é uma limitação do gráfico de linhas, quanto temos muitos fatores na legenda fica difícil a distinção entre eles. E quando se tem uma restrição de cor e o gráfico precisa estar em escala de cinza? Esquece! Há quem tente utilizar símbolos ou tipos de traços para distinguir os fatores, mas mesmo assim, não é uma tarefa fácil.&lt;/p&gt;
&lt;p&gt;É neste momento que podemos nos aproveitar do heatmap. Agora a intencidade de cor indica a variável resposta (Figura &lt;a href=&#34;#fig:6-heatmap-cont&#34;&gt;2&lt;/a&gt;). Veja que fica mais fácil acompanhar o crescimento de uma espécies em especial.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(factor(Idade), Esp, fill = Hdom)) +
  geom_tile() +
  labs(x = &amp;quot;Idade (anos)&amp;quot;, y = &amp;quot;Materiais genéticos&amp;quot;) +
  theme_few() +
  scale_fill_viridis(name = &amp;quot;Altura dominante (m)&amp;quot;, direction = -1) +
  guides(col = guide_legend(reverse = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:6-heatmap-cont&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-07-09-os-graficos-que-explicam-nossos-dados-heatmap_files/figure-html/6-heatmap-cont-1.png&#34; alt=&#34;Aumento da altura dominante utilizando heatmap com escala de cor contínua.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  2: Aumento da altura dominante utilizando heatmap com escala de cor contínua.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Se for do interesse controlar a escala de cor em intervalos e classes, a alteração é simples (Figura &lt;a href=&#34;#fig:6-heatmap-discr&#34;&gt;3&lt;/a&gt;). Se reduzirmos as classes de cor, perdemos resolução na escala da variável resposta. Dependendo do objetivo do gráfico isso pode ser bom ou ruim. Neste caso, escolhi intervalos de 2 metros, pois achei mais adequado.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(factor(Idade),
       Esp, fill = cut(Hdom, breaks = seq(0, 40, 2)))) +
 geom_tile() +
 labs(x = &amp;quot;Idade (anos)&amp;quot;, y = &amp;quot;Materiais genéticos&amp;quot;) +
 theme_few() +
 scale_fill_viridis(
   name = &amp;quot;Altura dominante (m)&amp;quot;,
   discrete = T, direction = -1
 ) +
 guides(col = guide_legend(reverse = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:6-heatmap-discr&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-07-09-os-graficos-que-explicam-nossos-dados-heatmap_files/figure-html/6-heatmap-discr-1.png&#34; alt=&#34;Aumento da altura dominante utilizando heatmap com escala de cor discreta.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  3: Aumento da altura dominante utilizando heatmap com escala de cor discreta.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Se quisermos deixar explícito o valor da variável resposta podemos indicá-la no gráfico, como na Figura &lt;a href=&#34;#fig:6-heatmap-discr-label&#34;&gt;4&lt;/a&gt;. Eu particularmente acho que fica muito poluído, mas em alguns casos pode ser interessante.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(dados, aes(factor(Idade),
       Esp, fill = cut(Hdom, breaks = seq(0, 40, 2)))) +
 geom_tile() +
 geom_text(aes(label = Hdom), color = &amp;quot;white&amp;quot;) +
 labs(x = &amp;quot;Idade (anos)&amp;quot;, y = &amp;quot;Materiais genéticos&amp;quot;) +
 theme_few() +
 scale_fill_viridis(
   name = &amp;quot;Altura dominante (m)&amp;quot;,
   discrete = T, direction = -1
 ) +
 guides(col = guide_legend(reverse = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:6-heatmap-discr-label&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-07-09-os-graficos-que-explicam-nossos-dados-heatmap_files/figure-html/6-heatmap-discr-label-1.png&#34; alt=&#34;Aumento da altura dominante utilizando heatmap com escala de cor discreta e informação do valor no grid.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  4: Aumento da altura dominante utilizando heatmap com escala de cor discreta e informação do valor no grid.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note que o eixo x é uma variável temporal, entretanto o gráfico não dá a escala entre os anos. Um observador desatento pode achar que as medições ocorreram em intervalos regulares, mas isso não é verdade. Essa é uma desvantagem do heatmap. Quando as variáveis dos eixos são numéricas e representam uma escala comparativa, este atributo fica comprometido.&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-10-14                  
## 
##  package     * version    date       source                            
##  assertthat    0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports     1.1.1      2017-09-25 CRAN (R 3.3.3)                    
##  base        * 3.3.3      2017-03-06 local                             
##  bindr         0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp    * 0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown      0.1        2017-08-22 CRAN (R 3.3.3)                    
##  bookdown      0.5        2017-08-20 CRAN (R 3.3.3)                    
##  colorspace    1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  curl          2.8.1      2017-07-21 CRAN (R 3.3.3)                    
##  datasets    * 3.3.3      2017-03-06 local                             
##  devtools      1.13.3     2017-08-02 CRAN (R 3.3.3)                    
##  digest        0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr       * 0.7.4      2017-09-28 CRAN (R 3.3.3)                    
##  evaluate      0.10.1     2017-06-24 CRAN (R 3.3.3)                    
##  ggplot2     * 2.2.1.9000 2017-07-15 Github (tidyverse/ggplot2@45853c7)
##  ggthemes    * 3.4.0      2017-02-19 CRAN (R 3.3.3)                    
##  glue          1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  graphics    * 3.3.3      2017-03-06 local                             
##  grDevices   * 3.3.3      2017-03-06 local                             
##  grid          3.3.3      2017-03-06 local                             
##  gridExtra     2.3        2017-09-09 CRAN (R 3.3.3)                    
##  gtable        0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  highr         0.6        2016-05-09 CRAN (R 3.3.3)                    
##  hms           0.3        2016-11-22 CRAN (R 3.3.2)                    
##  htmltools     0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  knitr         1.17       2017-08-10 CRAN (R 3.3.3)                    
##  labeling      0.3        2014-08-23 CRAN (R 3.3.2)                    
##  lazyeval      0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  magrittr      1.5        2014-11-22 CRAN (R 3.3.2)                    
##  memoise       1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods     * 3.3.3      2017-03-06 local                             
##  munsell       0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  pacman      * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  pkgconfig     2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr          1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  R6            2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  Rcpp          0.12.13    2017-09-28 CRAN (R 3.3.3)                    
##  readr       * 1.1.1      2017-05-16 CRAN (R 3.3.3)                    
##  rlang         0.1.2      2017-08-09 CRAN (R 3.3.3)                    
##  rmarkdown     1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot     1.2        2017-01-16 CRAN (R 3.3.3)                    
##  scales        0.5.0      2017-08-24 CRAN (R 3.3.3)                    
##  stats       * 3.3.3      2017-03-06 local                             
##  stringi       1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr       1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble        1.3.4      2017-08-22 CRAN (R 3.3.3)                    
##  tools         3.3.3      2017-03-06 local                             
##  utils       * 3.3.3      2017-03-06 local                             
##  viridis     * 0.4.0      2017-03-27 CRAN (R 3.3.3)                    
##  viridisLite * 0.2.0      2017-03-24 CRAN (R 3.3.3)                    
##  withr         2.0.0      2017-07-28 CRAN (R 3.3.3)                    
##  yaml          2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Os gráficos que explicam nossos dados (barras)</title>
      <link>/os-graficos-que-explicam-nossos-dados-barras/</link>
      <pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/os-graficos-que-explicam-nossos-dados-barras/</guid>
      <description>&lt;p&gt;Este é o segundo post de uma série que estou fazendo sobre tipos de gráficos. Falamos um pouco sobre o &lt;a href=&#34;https://italocegatta.github.io/os-graficos-que-explicam-nossos-dados-boxplot&#34;&gt;boxplot&lt;/a&gt; e agora vamos ao gráfico de barras.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Gráficos de barras são muito úteis para podermos comparar fatores. Quando estão um ao lado do outro a comparação é feita rapidamente, já que as barras dão a noção de escala. Normalmente as barras informam um resumo (i. e. média, soma ou contagem), mas podemos ainda adicionar uma barra de erro ou desvio e deixar o gráfico mais detalhado.&lt;/p&gt;
&lt;p&gt;Continuaremos com o banco de dados apresentado no post sobre &lt;a href=&#34;https://italocegatta.github.io/o-conceito-tidy-data.html&#34;&gt;tidy data&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(readr, dplyr, ggplot2, ggthemes)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados &amp;lt;- read_csv2(
  &amp;quot;https://github.com/italocegatta/italocegatta.github.io_source/raw/master/content/dados/base_vespa.csv&amp;quot;
)

dados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,100 x 5
##    Tratamento Individuo Coleta   Local Galhas
##         &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
##  1  Actara d1         1      1 Peciolo      1
##  2  Actara d1         2      1 Peciolo     NA
##  3  Actara d1         3      1 Peciolo     NA
##  4  Actara d1         4      1 Peciolo     NA
##  5  Actara d1         5      1 Peciolo     NA
##  6  Actara d1         6      1 Peciolo     NA
##  7  Actara d1         7      1 Peciolo     NA
##  8  Actara d1         8      1 Peciolo     NA
##  9  Actara d1         9      1 Peciolo     NA
## 10  Actara d1        10      1 Peciolo     NA
## # ... with 2,090 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;basico&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Básico&lt;/h2&gt;
&lt;p&gt;A primeira sequência de gráficos está relacionada ao total de galhas encontradas nas mudas de cada tratamento. Nessa comparação, temos de considerar tratamentos como fatores e os locais onde a galha foi encontrada como níveis do fator local. Essa distinção vai nos ajuda a escolher a melhor forma de construir um gráfico de acordo com o que queremos mostrar.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# seleciona apenas as Coletas de numero 5, em seguida monta um fator de 
# agrupamento em função de Tratamento. Aplica a soma de todas as
# observações (Galhas) de acordo com o fator de agrupamento.

total_trat &amp;lt;- dados %&amp;gt;%
  filter(Coleta == 5) %&amp;gt;%
  group_by(Tratamento) %&amp;gt;%
  summarise(Galhas = sum(Galhas, na.rm=T))

total_trat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 2
##    Tratamento Galhas
##         &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
## 1   Actara d1     73
## 2   Actara d2     57
## 3   Actara d3     30
## 4 Evidence d1     27
## 5 Evidence d2     21
## 6 Evidence d3     12
## 7  Testemunha     77&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora já podemos fazer o primeiro gráfico simples e básico (Figura &lt;a href=&#34;#fig:5-bar-basico&#34;&gt;1&lt;/a&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total_trat, aes(Tratamento, Galhas)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;) +
  theme_few()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:5-bar-basico&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-14-os-graficos-que-explicam-nossos-dados-barras_files/figure-html/5-bar-basico-1.png&#34; alt=&#34;Número total de galhas de cada tratamento.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Número total de galhas de cada tratamento.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Mas ainda temos a variável &lt;code&gt;Local&lt;/code&gt;, certo? Podemos apresentá-la sem muito esforço.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;total_trat_local &amp;lt;- dados %&amp;gt;%
  filter(Coleta == 5) %&amp;gt;%
  group_by(Tratamento, Local) %&amp;gt;%
  summarise(Galhas = sum(Galhas, na.rm=T))

total_trat_local&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 21 x 3
## # Groups:   Tratamento [?]
##     Tratamento   Local Galhas
##          &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
##  1   Actara d1   Caule     13
##  2   Actara d1 Nervura     19
##  3   Actara d1 Peciolo     41
##  4   Actara d2   Caule     10
##  5   Actara d2 Nervura      9
##  6   Actara d2 Peciolo     38
##  7   Actara d3   Caule      7
##  8   Actara d3 Nervura      6
##  9   Actara d3 Peciolo     17
## 10 Evidence d1   Caule      6
## # ... with 11 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total_trat_local, aes(Tratamento, Galhas, fill = Local)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;) +
  theme_few() +
  scale_fill_brewer(palette = &amp;quot;Spectral&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:5-bar-local&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-14-os-graficos-que-explicam-nossos-dados-barras_files/figure-html/5-bar-local-1.png&#34; alt=&#34;Número total de galhas de cada tratamento em diferentes locais - níveis agrupados.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  2: Número total de galhas de cada tratamento em diferentes locais - níveis agrupados.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;No caso da Figura &lt;a href=&#34;#fig:5-bar-local&#34;&gt;2&lt;/a&gt;, à primeira vista comparamos as barras (fatores) e depois as cores (níveis). Podemos dar mais evidência aos níveis, transformando-os em barras como na Figura &lt;a href=&#34;#fig:5-bar-local-dodge&#34;&gt;3&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total_trat_local, aes(Tratamento, Galhas, fill = Local)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) +
  theme_few() +
  scale_fill_brewer(palette = &amp;quot;Spectral&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:5-bar-local-dodge&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-14-os-graficos-que-explicam-nossos-dados-barras_files/figure-html/5-bar-local-dodge-1.png&#34; alt=&#34;Número total de galhas de cada tratamento em diferentes locais - níveis lado a lados.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  3: Número total de galhas de cada tratamento em diferentes locais - níveis lado a lados.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Como alternativa, podemos subdividir os níveis em painéis e deixar o gráfico mais balanceado, ou seja, sem concentrar a informação em fatores ou níveis (Figura &lt;a href=&#34;#fig:5-bar-local-facet&#34;&gt;4&lt;/a&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total_trat_local, aes(Tratamento, Galhas )) +
  geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) +
  facet_wrap(~Local) +
  theme_few() +
  theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:5-bar-local-facet&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-14-os-graficos-que-explicam-nossos-dados-barras_files/figure-html/5-bar-local-facet-1.png&#34; alt=&#34;Número total de galhas de cada tratamento em diferentes locais - níveis em painel.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  4: Número total de galhas de cada tratamento em diferentes locais - níveis em painel.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note que nos 3 gráficos anteriores o banco de dados para formação do gráfico é o mesmo, mas cada um dá ênfase em um aspecto diferente. A parte boa é que podemos modificá-los de acordo com o nosso interesse de uma forma rápida e bem simples.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adicionando-valores-as-barras&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Adicionando valores às barras&lt;/h2&gt;
&lt;p&gt;Se quisermos adicionar o valor de cada nível ou fator na barra, temos de alterar o banco de dados para que ele coincida com o que queremos mostrar.&lt;/p&gt;
&lt;p&gt;Para a Figura &lt;a href=&#34;#fig:5-bar-basico-annot&#34;&gt;5&lt;/a&gt;, modificamos apenas o código do gráfico.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total_trat, aes(Tratamento, Galhas)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;) +
  geom_text(aes(label = Galhas), size = 6, vjust = -0.2) +
  theme_few()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:5-bar-basico-annot&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-14-os-graficos-que-explicam-nossos-dados-barras_files/figure-html/5-bar-basico-annot-1.png&#34; alt=&#34;Número total de galhas de cada tratamento com o valor na respectiva barra.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  5: Número total de galhas de cada tratamento com o valor na respectiva barra.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Também é fácil indicar o número de galhas por local nas barras. A função &lt;code&gt;position_stack()&lt;/code&gt; é responsável por colocar o texto no topo de cada compartimento colorido. Para ficar mais atraente, podemos adicionar um parâmetro para que o texto fique 20% a baixo do topo do compartimento. Como resultado temos a Figura &lt;a href=&#34;#fig:5-bar-local-annot&#34;&gt;6&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Cria uma nova coluna que contem a posição no eixo y que corresponde ao centro
# da barra. Esta posição correnponde ao local onde o label de cada barra
# será mostrado

ggplot(total_trat_local, aes(Tratamento, Galhas, fill = Local)) +
    geom_col() +
    geom_text(
      aes(label = Galhas),
      position =  position_stack(vjust = 0.8), vjust = 1
    ) +
    theme_few() +
  scale_fill_brewer(palette = &amp;quot;Spectral&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:5-bar-local-annot&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-14-os-graficos-que-explicam-nossos-dados-barras_files/figure-html/5-bar-local-annot-1.png&#34; alt=&#34;Número total de galhas de cada tratamento em diferentes locais com o valor da respectiva barra - níveis agrupados.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  6: Número total de galhas de cada tratamento em diferentes locais com o valor da respectiva barra - níveis agrupados.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As Figuras &lt;a href=&#34;#fig:5-bar-local-dodge-annot&#34;&gt;7&lt;/a&gt; e &lt;a href=&#34;#fig:5-bar-local-facet-annot&#34;&gt;8&lt;/a&gt; foram criadas apenas alterando o código do gráfico.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total_trat_local, aes(Tratamento, Galhas, fill = Local)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) +
  geom_text(aes(label = Galhas),
    position = position_dodge(width=0.9), vjust = -0.2) +
  theme_few() +
  scale_fill_brewer(palette = &amp;quot;Spectral&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:5-bar-local-dodge-annot&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-14-os-graficos-que-explicam-nossos-dados-barras_files/figure-html/5-bar-local-dodge-annot-1.png&#34; alt=&#34;Número total de galhas de cada tratamento em diferentes locais com o valor da respectiva barra - níveis lado a lados.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  7: Número total de galhas de cada tratamento em diferentes locais com o valor da respectiva barra - níveis lado a lados.
&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total_trat_local, aes(Tratamento, Galhas )) +
  geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) +
    geom_text(aes(label = Galhas), vjust = -0.2) +
  facet_wrap(~Local) +
  theme_few() +
  theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:5-bar-local-facet-annot&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-14-os-graficos-que-explicam-nossos-dados-barras_files/figure-html/5-bar-local-facet-annot-1.png&#34; alt=&#34;Número total de galhas de cada tratamento em diferentes locais com o valor da respectiva barra - níveis em painel.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  8: Número total de galhas de cada tratamento em diferentes locais com o valor da respectiva barra - níveis em painel.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;barra-de-desvio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Barra de desvio&lt;/h2&gt;
&lt;p&gt;Uma outra informação interessante para o gráfico de barras é a barra de erro ou desvio. Com ela, além de informarmos o valor que queremos, também informamos uma medida de dispersão associada a esse valor. Nos gráficos anteriores apresentei o total de galhas por tratamento e local. Não faz sentido, nesse caso, colocar uma barra de desvio, pois a soma não é uma medida de posição. Portanto, vamos resumir novamente os dados em função da média e acrescentar o erro padrão da média.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Seleciona apenas as Coletas de numero 5, em seguida calcula a média e o
# desvio padrão de cada Tratamento.

media_trat_desv &amp;lt;- dados %&amp;gt;%
  filter(Coleta == 5) %&amp;gt;%
  group_by(Tratamento) %&amp;gt;%
  summarise(desv = sd(Galhas, na.rm=T)/sqrt(n()),
    Galhas = mean(Galhas, na.rm=T))

media_trat_desv&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 3
##    Tratamento      desv   Galhas
##         &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1   Actara d1 0.4799351 4.055556
## 2   Actara d2 0.4893473 3.352941
## 3   Actara d3 0.1331730 2.307692
## 4 Evidence d1 0.5889188 3.857143
## 5 Evidence d2 0.2667039 2.625000
## 6 Evidence d3 0.1632993 2.000000
## 7  Testemunha 0.3601529 3.347826&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Após criar o &lt;em&gt;data frame&lt;/em&gt; com o desvio, a Figura &lt;a href=&#34;#fig:5-bar-basico-desv&#34;&gt;9&lt;/a&gt; é facilmente criada com o código abaixo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(media_trat_desv, aes(Tratamento, Galhas)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;) +
  geom_errorbar(aes(ymin = Galhas - desv,
     ymax = Galhas + desv), width = 0.4) +
  theme_few()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:5-bar-basico-desv&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-14-os-graficos-que-explicam-nossos-dados-barras_files/figure-html/5-bar-basico-desv-1.png&#34; alt=&#34;Número total de galhas de cada tratamento com barra de desvio.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  9: Número total de galhas de cada tratamento com barra de desvio.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;No caso das Figuras &lt;a href=&#34;#fig:5-bar-local-dodge-desv&#34;&gt;10&lt;/a&gt; e &lt;a href=&#34;#fig:5-bar-local-facet-desv&#34;&gt;11&lt;/a&gt;, precisamos dados dados agrupados por &lt;code&gt;Tratamento&lt;/code&gt; e &lt;code&gt;Local&lt;/code&gt;. O código para o gráfico é muito semelhante aos anteriores. Em alguns tratamentos há somente um indivíduo indivídio com contagem de galhas. Nesta situação não há barra de desvio.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Seleciona apenas as Coletas de numero 5, em seguida calcula a mediana e o
# desvio padrão em função de cada Trtatamento e Local.

mediana_trat_local_desv &amp;lt;- dados %&amp;gt;%
  filter(Coleta == 5) %&amp;gt;%
  group_by(Tratamento, Local) %&amp;gt;%
  summarise(desv = sd(Galhas, na.rm=T)/sqrt(n()),
    Galhas = median(Galhas, na.rm=T))

mediana_trat_local_desv&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 21 x 4
## # Groups:   Tratamento [?]
##     Tratamento   Local      desv Galhas
##          &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1   Actara d1   Caule 0.3291403      2
##  2   Actara d1 Nervura 0.8276473      3
##  3   Actara d1 Peciolo 1.0200373      4
##  4   Actara d2   Caule 0.2708013      1
##  5   Actara d2 Nervura 0.2813657      2
##  6   Actara d2 Peciolo 1.1751393      4
##  7   Actara d3   Caule 0.1118034      2
##  8   Actara d3 Nervura 0.0000000      2
##  9   Actara d3 Peciolo 0.2972092      3
## 10 Evidence d1   Caule 0.2236068      2
## # ... with 11 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mediana_trat_local_desv, aes(Tratamento, Galhas, fill = Local)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) +
  geom_errorbar(aes(ymin = Galhas - desv, ymax = Galhas + desv),
    position = position_dodge(width=0.9), width = 0.4) +
  theme_few() +
  scale_fill_brewer(palette = &amp;quot;Spectral&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:5-bar-local-dodge-desv&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-14-os-graficos-que-explicam-nossos-dados-barras_files/figure-html/5-bar-local-dodge-desv-1.png&#34; alt=&#34;Número total de galhas de cada tratamento em diferentes locais com barra de desvio - níveis lado a lados.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  10: Número total de galhas de cada tratamento em diferentes locais com barra de desvio - níveis lado a lados.
&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mediana_trat_local_desv, aes(Tratamento, Galhas )) +
  geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) +
  geom_errorbar(aes(ymin = Galhas - desv,
    ymax = Galhas + desv), width = 0.4) +
  facet_wrap(~Local) +
  theme_few() +
  theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:5-bar-local-facet-desv&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-14-os-graficos-que-explicam-nossos-dados-barras_files/figure-html/5-bar-local-facet-desv-1.png&#34; alt=&#34;Número total de galhas de cada tratamento em diferentes locais com barra de desvio - níveis em painel.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  11: Número total de galhas de cada tratamento em diferentes locais com barra de desvio - níveis em painel.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-10-14                  
## 
##  package      * version    date       source                            
##  assertthat     0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports      1.1.1      2017-09-25 CRAN (R 3.3.3)                    
##  base         * 3.3.3      2017-03-06 local                             
##  bindr          0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp     * 0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown       0.1        2017-08-22 CRAN (R 3.3.3)                    
##  bookdown       0.5        2017-08-20 CRAN (R 3.3.3)                    
##  colorspace     1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  curl           2.8.1      2017-07-21 CRAN (R 3.3.3)                    
##  datasets     * 3.3.3      2017-03-06 local                             
##  devtools       1.13.3     2017-08-02 CRAN (R 3.3.3)                    
##  digest         0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr        * 0.7.4      2017-09-28 CRAN (R 3.3.3)                    
##  evaluate       0.10.1     2017-06-24 CRAN (R 3.3.3)                    
##  ggplot2      * 2.2.1.9000 2017-07-15 Github (tidyverse/ggplot2@45853c7)
##  ggthemes     * 3.4.0      2017-02-19 CRAN (R 3.3.3)                    
##  glue           1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  graphics     * 3.3.3      2017-03-06 local                             
##  grDevices    * 3.3.3      2017-03-06 local                             
##  grid           3.3.3      2017-03-06 local                             
##  gtable         0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  highr          0.6        2016-05-09 CRAN (R 3.3.3)                    
##  hms            0.3        2016-11-22 CRAN (R 3.3.2)                    
##  htmltools      0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  knitr          1.17       2017-08-10 CRAN (R 3.3.3)                    
##  labeling       0.3        2014-08-23 CRAN (R 3.3.2)                    
##  lazyeval       0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  magrittr       1.5        2014-11-22 CRAN (R 3.3.2)                    
##  memoise        1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods      * 3.3.3      2017-03-06 local                             
##  munsell        0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  pacman       * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  pkgconfig      2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr           1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  R6             2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  RColorBrewer   1.1-2      2014-12-07 CRAN (R 3.3.2)                    
##  Rcpp           0.12.13    2017-09-28 CRAN (R 3.3.3)                    
##  readr        * 1.1.1      2017-05-16 CRAN (R 3.3.3)                    
##  rlang          0.1.2      2017-08-09 CRAN (R 3.3.3)                    
##  rmarkdown      1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot      1.2        2017-01-16 CRAN (R 3.3.3)                    
##  scales         0.5.0      2017-08-24 CRAN (R 3.3.3)                    
##  stats        * 3.3.3      2017-03-06 local                             
##  stringi        1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr        1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble         1.3.4      2017-08-22 CRAN (R 3.3.3)                    
##  tools          3.3.3      2017-03-06 local                             
##  utils        * 3.3.3      2017-03-06 local                             
##  withr          2.0.0      2017-07-28 CRAN (R 3.3.3)                    
##  yaml           2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Os gráficos que explicam nossos dados (boxplot)</title>
      <link>/os-graficos-que-explicam-nossos-dados-boxplot/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/os-graficos-que-explicam-nossos-dados-boxplot/</guid>
      <description>&lt;p&gt;Nossos dados merecem ser apresentados de forma clara, atraente e inspiradora. Não há nada mais frustrante que dar duro no campo para coletar os dados e depois apresentá-los numa simples tabela de resumos. Podemos e devemos fazer mais, certo?&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Vou começar agora uma série de posts sobre tipos de gráficos. Como disse no primeiro post desse &lt;a href=&#34;https://italocegatta.github.io/sobre-esse-blog.html&#34;&gt;blog&lt;/a&gt;, minha intenção é documentar os scripts que escrevi durante a graduação, portanto os gráficos que vou apresentar se resumem aos que tive de fazer por conta de alguma demanda específica.&lt;/p&gt;
&lt;p&gt;Para iniciar, escolhi o gráfico boxplot. É um gráfico muito útil para entender a variabilidade das nossas observações. No boxplot temos 5 informações básicas: valor mínimo, primeiro quartil, mediana, terceiro quartil e valor máximo. Há ainda a notificação de &lt;em&gt;outliers&lt;/em&gt;, quando a observação é maior ou menor que 1,5 vezes a distância interquartílica.&lt;/p&gt;
&lt;p&gt;Vamos trabalhar com os dados que apresentei no post anterior sobre &lt;a href=&#34;https://italocegatta.github.io/o-conceito-tidy-data.html&#34;&gt;tidy data&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(pacman)
p_load(readr, dplyr, tidyr, ggplot2, ggthemes)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados &amp;lt;- read_csv2(
  &amp;quot;https://raw.githubusercontent.com/italocegatta/italocegatta.github.io_source/master/content/dados/base_vespa.csv&amp;quot;
)

dados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,100 x 5
##    Tratamento Individuo Coleta   Local Galhas
##         &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
##  1  Actara d1         1      1 Peciolo      1
##  2  Actara d1         2      1 Peciolo     NA
##  3  Actara d1         3      1 Peciolo     NA
##  4  Actara d1         4      1 Peciolo     NA
##  5  Actara d1         5      1 Peciolo     NA
##  6  Actara d1         6      1 Peciolo     NA
##  7  Actara d1         7      1 Peciolo     NA
##  8  Actara d1         8      1 Peciolo     NA
##  9  Actara d1         9      1 Peciolo     NA
## 10  Actara d1        10      1 Peciolo     NA
## # ... with 2,090 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Primeiro vamos processar os dados da última medição (Coleta 5) para verificar o nº total de galhas de cada tratamento, desconsiderando o local da galha. Nesse caso estou considerando apenas as mudas que foram atacadas e tiveram o desenvolvimento de galhas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# seleciona apenas as Coletas de numero 5, em seguida monta um fator de 
# agrupamento em função de Tratamento e Individuo. Aplica a soma de todas as
# observações (Galhas) de acordo com o fator de agrupamento. Troca os valores
# 0 (quando não há galhas) por NA.

total &amp;lt;- dados %&amp;gt;%
  filter(Coleta == 5) %&amp;gt;%
  group_by(Tratamento, Individuo) %&amp;gt;%
  summarise(Galhas = sum(Galhas, na.rm=T)) %&amp;gt;%
  mutate(Galhas = replace(Galhas, Galhas == 0, NA))

total&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 140 x 3
## # Groups:   Tratamento [7]
##    Tratamento Individuo Galhas
##         &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
##  1  Actara d1         1     11
##  2  Actara d1         2     NA
##  3  Actara d1         3      4
##  4  Actara d1         4     NA
##  5  Actara d1         5     NA
##  6  Actara d1         6     NA
##  7  Actara d1         7     30
##  8  Actara d1         8     NA
##  9  Actara d1         9     NA
## 10  Actara d1        10     NA
## # ... with 130 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O boxplot é um gráfico unidimensional, ou seja, precisamos de apenas uma variável para construí-lo. Entretanto, podemos usar variáveis categóricas para servir de agrupamento e replicar o gráfico para todos os níveis da variável. Por exemplo, no nosso banco de dados temos &lt;code&gt;Galhas&lt;/code&gt; como variável quantitativa e &lt;code&gt;Tratamento&lt;/code&gt;, &lt;code&gt;Coleta&lt;/code&gt; e &lt;code&gt;Local&lt;/code&gt; como variável qualitativa.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total, aes(&amp;quot;Total&amp;quot;, Galhas)) +
  geom_boxplot() +
  theme_few()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:4-boxplot-total&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-06-os-graficos-que-explicam-nossos-dados-boxplot_files/figure-html/4-boxplot-total-1.png&#34; alt=&#34;Boxplot que mostra o nº de galhas de todos os tratamentos.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  1: Boxplot que mostra o nº de galhas de todos os tratamentos.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A Figura &lt;a href=&#34;#fig:4-boxplot-total&#34;&gt;1&lt;/a&gt; dá uma visão geral de todas as observações em um único boxplot, mas não nos explica muita coisa. No caso da Figura &lt;a href=&#34;#fig:4-boxplot-trat&#34;&gt;2&lt;/a&gt;, &lt;code&gt;Tratamento&lt;/code&gt; tratamento é uma variável categórica e nos permite subdividir os boxplots para todos os níveis e assim podemos compará-los.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total, aes(Tratamento, Galhas)) +
  geom_boxplot() +
  theme_few()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:4-boxplot-trat&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-06-os-graficos-que-explicam-nossos-dados-boxplot_files/figure-html/4-boxplot-trat-1.png&#34; alt=&#34;Boxplot que mostra o nº de galhas em função de cada tratamento.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  2: Boxplot que mostra o nº de galhas em função de cada tratamento.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note que no tratamento &lt;em&gt;Actara d1&lt;/em&gt;, há um indivíduo discrepante (&lt;em&gt;outlier&lt;/em&gt;) que se destaca com 30 galhas. Note também a grande variabilidade entre os tratamentos, muito comum em experimentos envolvendo insetos. Normalmente o coeficiente de variação é extremamente alto e dificilmente há homogeneidade de variância. Um comentário interessante sobre o boxplot é que a caixa, valores entre o 1º e 3º quartil, corresponde a 50% das observações.&lt;/p&gt;
&lt;p&gt;Podemos também avaliar a variabilidade do nº de galhas por local. Para isso vamos incluir a variável &lt;code&gt;Local&lt;/code&gt; no agrupamento (Figura &lt;a href=&#34;#fig:4-boxplot-local&#34;&gt;3&lt;/a&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Adiciona mais um fator de agrupamento para o resumo. Nesse caso cada
# indivíduo terá o nº de galhas explicito em cada local.

local &amp;lt;- dados %&amp;gt;%
  filter(Coleta == 5) %&amp;gt;%
  group_by(Tratamento, Individuo, Local) %&amp;gt;%
  summarise(Galhas = sum(Galhas, na.rm=T)) %&amp;gt;%
  mutate(Galhas = replace(Galhas, Galhas == 0, NA))

local&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 420 x 4
## # Groups:   Tratamento, Individuo [140]
##    Tratamento Individuo   Local Galhas
##         &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
##  1  Actara d1         1   Caule      2
##  2  Actara d1         1 Nervura      3
##  3  Actara d1         1 Peciolo      6
##  4  Actara d1         2   Caule     NA
##  5  Actara d1         2 Nervura     NA
##  6  Actara d1         2 Peciolo     NA
##  7  Actara d1         3   Caule      1
##  8  Actara d1         3 Nervura      1
##  9  Actara d1         3 Peciolo      2
## 10  Actara d1         4   Caule     NA
## # ... with 410 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(local, aes(Tratamento, Galhas, fill = Local)) +
  geom_boxplot() +
  theme_few() +
  scale_fill_brewer(palette = &amp;quot;Spectral&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:4-boxplot-local&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-06-os-graficos-que-explicam-nossos-dados-boxplot_files/figure-html/4-boxplot-local-1.png&#34; alt=&#34;Boxplot que mostra o nº de galhas por local e tratamento.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  3: Boxplot que mostra o nº de galhas por local e tratamento.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Uma outra perspectiva é avaliar a evolução do total de galhas por coleta. Para isto basta incluir a variável &lt;code&gt;Coleta&lt;/code&gt; no agrupamento (Figura &lt;a href=&#34;#fig:4-boxplot-coleta&#34;&gt;4&lt;/a&gt;). Para facilitar a visualização, vou excluir a primeira coleta. Podemos ainda adicionar os pontos que representam as observações para poder identificar quantas observações tem cada tratamento.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;total_coleta &amp;lt;- dados %&amp;gt;%
  filter(Coleta != 1 ) %&amp;gt;%
  group_by(Tratamento, Coleta, Individuo) %&amp;gt;%
  summarise(Galhas = sum(Galhas, na.rm=T)) %&amp;gt;%
  mutate(Galhas = replace(Galhas, Galhas == 0, NA))

total_coleta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 560 x 4
## # Groups:   Tratamento, Coleta [28]
##    Tratamento Coleta Individuo Galhas
##         &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
##  1  Actara d1      2         1      3
##  2  Actara d1      2         2     NA
##  3  Actara d1      2         3     NA
##  4  Actara d1      2         4     NA
##  5  Actara d1      2         5     NA
##  6  Actara d1      2         6     NA
##  7  Actara d1      2         7      2
##  8  Actara d1      2         8     NA
##  9  Actara d1      2         9     NA
## 10  Actara d1      2        10     NA
## # ... with 550 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(total_coleta, aes(Tratamento, Galhas)) +
  geom_boxplot() +
  geom_jitter(alpha = 0.4) +
  facet_wrap(~ Coleta, labeller = label_both) +
  theme_few() +
  theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:4-boxplot-coleta&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2016-05-06-os-graficos-que-explicam-nossos-dados-boxplot_files/figure-html/4-boxplot-coleta-1.png&#34; alt=&#34;Boxplot que mostra a dispersão do total de galhas por tratamento  e coletas.&#34; width=&#34;4000&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figura  4: Boxplot que mostra a dispersão do total de galhas por tratamento e coletas.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;É importante destacar que o gráfico da Figura &lt;a href=&#34;#fig:4-boxplot-coleta&#34;&gt;4&lt;/a&gt; não é adequado para esse tipo de informação. Nesse caso seria mais interessante um gráfico de linhas em que cada linha representa um tratamento (veremos esse gráfico em um futuro post).&lt;/p&gt;
&lt;p&gt;Caso tenha alguma dúvida ou sugestão sobre o post, fique à vontade para fazer um comentário ou me contatar por E-mail.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.3.3 (2017-03-06)
##  system   x86_64, mingw32             
##  ui       RTerm                       
##  language (EN)                        
##  collate  Portuguese_Brazil.1252      
##  tz       America/Sao_Paulo           
##  date     2017-10-14                  
## 
##  package      * version    date       source                            
##  assertthat     0.2.0      2017-04-11 CRAN (R 3.3.3)                    
##  backports      1.1.1      2017-09-25 CRAN (R 3.3.3)                    
##  base         * 3.3.3      2017-03-06 local                             
##  bindr          0.1        2016-11-13 CRAN (R 3.3.3)                    
##  bindrcpp     * 0.2        2017-06-17 CRAN (R 3.3.3)                    
##  blogdown       0.1        2017-08-22 CRAN (R 3.3.3)                    
##  bookdown       0.5        2017-08-20 CRAN (R 3.3.3)                    
##  colorspace     1.3-2      2016-12-14 CRAN (R 3.3.2)                    
##  curl           2.8.1      2017-07-21 CRAN (R 3.3.3)                    
##  datasets     * 3.3.3      2017-03-06 local                             
##  devtools       1.13.3     2017-08-02 CRAN (R 3.3.3)                    
##  digest         0.6.12     2017-01-27 CRAN (R 3.3.2)                    
##  dplyr        * 0.7.4      2017-09-28 CRAN (R 3.3.3)                    
##  evaluate       0.10.1     2017-06-24 CRAN (R 3.3.3)                    
##  ggplot2      * 2.2.1.9000 2017-07-15 Github (tidyverse/ggplot2@45853c7)
##  ggthemes     * 3.4.0      2017-02-19 CRAN (R 3.3.3)                    
##  glue           1.1.1      2017-06-21 CRAN (R 3.3.3)                    
##  graphics     * 3.3.3      2017-03-06 local                             
##  grDevices    * 3.3.3      2017-03-06 local                             
##  grid           3.3.3      2017-03-06 local                             
##  gtable         0.2.0      2016-02-26 CRAN (R 3.3.2)                    
##  highr          0.6        2016-05-09 CRAN (R 3.3.3)                    
##  hms            0.3        2016-11-22 CRAN (R 3.3.2)                    
##  htmltools      0.3.6      2017-04-28 CRAN (R 3.3.3)                    
##  knitr          1.17       2017-08-10 CRAN (R 3.3.3)                    
##  labeling       0.3        2014-08-23 CRAN (R 3.3.2)                    
##  lazyeval       0.2.0      2016-06-12 CRAN (R 3.3.2)                    
##  magrittr       1.5        2014-11-22 CRAN (R 3.3.2)                    
##  memoise        1.1.0      2017-04-21 CRAN (R 3.3.3)                    
##  methods      * 3.3.3      2017-03-06 local                             
##  munsell        0.4.3      2016-02-13 CRAN (R 3.3.2)                    
##  pacman       * 0.4.6      2017-05-14 CRAN (R 3.3.3)                    
##  pkgconfig      2.0.1      2017-03-21 CRAN (R 3.3.3)                    
##  plyr           1.8.4      2016-06-08 CRAN (R 3.3.2)                    
##  purrr          0.2.3      2017-08-02 CRAN (R 3.3.3)                    
##  R6             2.2.2      2017-06-17 CRAN (R 3.3.3)                    
##  RColorBrewer   1.1-2      2014-12-07 CRAN (R 3.3.2)                    
##  Rcpp           0.12.13    2017-09-28 CRAN (R 3.3.3)                    
##  readr        * 1.1.1      2017-05-16 CRAN (R 3.3.3)                    
##  rlang          0.1.2      2017-08-09 CRAN (R 3.3.3)                    
##  rmarkdown      1.6        2017-06-15 CRAN (R 3.3.3)                    
##  rprojroot      1.2        2017-01-16 CRAN (R 3.3.3)                    
##  scales         0.5.0      2017-08-24 CRAN (R 3.3.3)                    
##  stats        * 3.3.3      2017-03-06 local                             
##  stringi        1.1.5      2017-04-07 CRAN (R 3.3.3)                    
##  stringr        1.2.0      2017-02-18 CRAN (R 3.3.2)                    
##  tibble         1.3.4      2017-08-22 CRAN (R 3.3.3)                    
##  tidyr        * 0.7.1      2017-09-01 CRAN (R 3.3.3)                    
##  tools          3.3.3      2017-03-06 local                             
##  utils        * 3.3.3      2017-03-06 local                             
##  withr          2.0.0      2017-07-28 CRAN (R 3.3.3)                    
##  yaml           2.1.14     2016-11-12 CRAN (R 3.3.3)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>